// This file is generated.

package com.mapbox.maps.extension.compose.style.sources.generated

import androidx.compose.runtime.Composable
import androidx.compose.runtime.remember
import androidx.compose.runtime.saveable.Saver
import androidx.compose.runtime.saveable.rememberSaveable
import com.mapbox.bindgen.Value
import com.mapbox.maps.MapboxExperimental
import com.mapbox.maps.extension.compose.style.IdGenerator.generateRandomSourceId
import com.mapbox.maps.extension.compose.style.sources.SourceState

/**
 * Create and [rememberSaveable] a [ImageSourceState] using [ImageSourceState.Saver].
 * [init] will be called when the [ImageSourceState] is first created to configure its
 * initial state.
 *
 * @param key An optional key to be used as a key for the saved value. If not provided we use the
 * automatically generated by the Compose runtime which is unique for the every exact code location
 * in the composition tree.
 * @param sourceId The optional sourceId for the source state, by default, a random source ID will be used.
 * @param init A function initialise this [ImageSourceState].
 */
@Composable
@MapboxExperimental
public inline fun rememberImageSourceState(
  key: String? = null,
  sourceId: String = remember {
    generateRandomSourceId("image")
  },
  crossinline init: ImageSourceState.() -> Unit = {}
): ImageSourceState = rememberSaveable(key = key, saver = ImageSourceState.Saver) {
  ImageSourceState(sourceId).apply(init)
}

/**
 * An image data source.
 *
 * @see [The online documentation](https://docs.mapbox.com/style-spec/reference/sources#image)
 *
 * @param sourceId The id of the source state, by default a random generated ID will be used.
 * @param initialBuilderProperties The initial immutable properties of the source.
 * @param initialProperties The initial mutable properties of the source.
 */
@MapboxExperimental
public class ImageSourceState(
  override val sourceId: String = generateRandomSourceId("image"),
  initialBuilderProperties: Map<String, Value> = mapOf(),
  initialProperties: Map<String, Value> = mapOf(),
) : SourceState(
  sourceId = sourceId,
  sourceType = "image",
  builderProperties = initialBuilderProperties.toMutableMap(),
  initialProperties = initialProperties,
) {

  /**
   * URL that points to an image. If the URL is not specified, the image is expected
   * to be loaded directly during runtime.
   */
  public var url: Url
    get() = Url(getBuilderProperty(Url.NAME) ?: Url.default.value)
    set(value) {
      setBuilderProperty(Url.NAME, value.value)
    }

  /**
   * Corners of image specified in longitude, latitude pairs. Note: When using globe projection, the image will
   * be centered at the North or South Pole in the respective hemisphere if the average latitude
   * value exceeds 85 degrees or falls below -85 degrees.
   */
  public var coordinates: Coordinates
    get() = Coordinates(getBuilderProperty(Coordinates.NAME) ?: Coordinates.default.value)
    set(value) {
      setBuilderProperty(Coordinates.NAME, value.value)
    }

  /**
   * When loading a map, if PrefetchZoomDelta is set to any number greater than 0, the map
   * will first request a tile at zoom level lower than zoom - delta, but so that
   * the zoom level is multiple of delta, in an attempt to display a full map at
   * lower resolution as quick as possible. It will get clamped at the tile source minimum zoom.
   * The default delta is 4.
   */
  public var prefetchZoomDelta: PrefetchZoomDelta
    get() = PrefetchZoomDelta(getProperty(PrefetchZoomDelta.NAME) ?: PrefetchZoomDelta.default.value)
    set(value) {
      setProperty(PrefetchZoomDelta.NAME, value.value)
    }

  /**
   * Public companion object.
   */
  public companion object {
    /**
     * The default saver implementation for [ImageSourceState]
     */
    public val Saver: Saver<ImageSourceState, Holder> = Saver(
      save = { it.save() },
      restore = {
        ImageSourceState(
          sourceId = it.sourcedId,
          initialBuilderProperties = it.builderProperties,
          initialProperties = it.cachedProperties,
        )
      }
    )
  }
}
// End of generated file.