apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply from: "${rootDir}/gradle/metalava.gradle"

android.libraryVariants.all { variant ->
    // TODO eliminate variants https://issuetracker.google.com/issues/62201427
    if (variant.buildType.isDebuggable()) {
        return
    }
    task updateApiMetalava(type: JavaExec) {
        group = 'Other'
        description = 'Update metalava generated public api files.'
        dependsOn assembleRelease

        def inputDir = ""
        if (file("src/main/java").exists()) {
            inputDir = "src/main/java"
        }
        if (file("src/main/kotlin").exists()) {
            inputDir = "src/main/kotlin"
        }
        inputs.dir(inputDir)
        outputs.file('api/metalava.txt')

        classpath = configurations.metalava
        main = 'com.android.tools.metalava.Driver'

        doFirst {
            args = [
                    '--no-banner',
                    '--source-path', inputDir,
                    '--compatible-output=no',
                    '--omit-common-packages=yes',
                    '--output-kotlin-nulls=yes',
                    '--hide', 'HiddenSuperclass',
                    '--hide', 'DeprecationMismatch',
                    '--classpath', (project.files(android.getBootClasspath()) + variant.javaCompile.classpath).join(File.pathSeparator),
                    '--api', 'api/metalava.txt'
            ]
            if (project.hasProperty('hidePackage')) {
                args += '--hide-package'
                args += hidePackage
            }
            if (project.hasProperty('hideId')) {
                args += '--hide'
                args += hideId
            }
        }
    }

    task checkApiMetalava(type: JavaExec) {
        group = 'Verification'
        description = 'Checks signatures of public API against the golden value in API folder generated by metalava.'
        dependsOn assembleRelease

        def inputDir = ""
        if (file("src/main/java").exists()) {
            inputDir = "src/main/java"
        }
        if (file("src/main/kotlin").exists()) {
            inputDir = "src/main/kotlin"
        }
        inputs.file('api/metalava.txt')
        inputs.dir(inputDir)
        outputs.file('api/metalava.txt')

        classpath = configurations.metalava
        main = 'com.android.tools.metalava.Driver'

        doFirst {
            args = [
                    '--no-banner',
                    '--source-path', inputDir,
                    '--compatible-output=no',
                    '--omit-common-packages=yes',
                    '--output-kotlin-nulls=yes',
                    '--input-kotlin-nulls=yes',
                    '--hide', 'HiddenSuperclass',
                    '--hide', 'DeprecationMismatch',
                    '--classpath', (project.files(android.getBootClasspath()) + variant.javaCompile.classpath).join(File.pathSeparator),
                    '--check-compatibility:api:current', 'api/metalava.txt'
            ]
            if (project.hasProperty('hidePackage')) {
                args += '--hide-package'
                args += hidePackage
            }
            if (project.hasProperty('hideId')) {
                args += '--hide'
                args += hideId
            }
        }
    }

    task checkApiKotlinValidator {
        dependsOn apiCheck
        group = 'Verification'
        description = 'Checks signatures of public API against the golden value in API folder generated by Kotlin binary compatibility validator.'
    }

    task updateApiKotlinValidator {
        dependsOn apiDump
        group = 'Other'
        description = 'Update Kotlin binary compatibility validator generated public api files.'
    }

    task checkApi {
        dependsOn checkApiMetalava
        dependsOn checkApiKotlinValidator
        group = 'Verification'
        description = 'Checks signatures of public API against the golden value in API folder generated by both Metalava and Kotlin binary compatibility validator.'
    }

    task updateApi {
        dependsOn updateApiMetalava
        dependsOn updateApiKotlinValidator
        group = 'Other'
        description = 'Update generated public api files from both Metalava and Kotlin binary compatibility validator.'
    }
}