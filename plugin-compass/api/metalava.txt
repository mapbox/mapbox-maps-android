// Signature format: 3.0
package com.mapbox.maps.plugin.compass {

  public class CompassViewImpl extends androidx.appcompat.widget.AppCompatImageView implements com.mapbox.maps.plugin.compass.CompassView {
    ctor public CompassViewImpl(android.content.Context context, android.util.AttributeSet? attrs = null, int defStyleAttr = 0);
    ctor public CompassViewImpl(android.content.Context context, android.util.AttributeSet? attrs = null);
    ctor public CompassViewImpl(android.content.Context context);
    method public int getCompassGravity();
    method public android.graphics.drawable.Drawable getCompassImage();
    method public float getCompassRotation();
    method public boolean isCompassEnabled();
    method public boolean isCompassVisible();
    method public void setCompassAlpha(float float);
    method public void setCompassEnabled(boolean value);
    method public void setCompassGravity(int value);
    method public void setCompassImage(android.graphics.drawable.Drawable compass);
    method public void setCompassMargins(int left, int top, int right, int bottom);
    method public void setCompassRotation(float value);
    method public void setCompassVisible(boolean value);
    property public int compassGravity;
    property public android.graphics.drawable.Drawable compassImage;
    property public float compassRotation;
    property public boolean isCompassEnabled;
    property public boolean isCompassVisible;
  }

  public class CompassViewPlugin extends com.mapbox.maps.plugin.compass.generated.CompassSettingsBase implements com.mapbox.maps.plugin.compass.CompassPlugin {
    ctor public CompassViewPlugin(kotlin.jvm.functions.Function1<? super android.content.Context,? extends com.mapbox.maps.plugin.compass.CompassViewImpl> viewImplProvider = { it -> return <init>(it) }, android.animation.ValueAnimator fadeAnimator = ValueAnimator.ofFloat(1.0, 0.0), android.os.Handler mainHandler = android.os.Handler(Looper.getMainLooper()));
    method public void addCompassClickListener(com.mapbox.maps.plugin.compass.OnCompassClickListener onClickListener);
    method protected void applySettings();
    method public android.view.View bind(android.widget.FrameLayout mapView, android.util.AttributeSet? attrs, float pixelRatio);
    method public void cleanup();
    method protected com.mapbox.maps.plugin.compass.generated.CompassSettings getInternalSettings();
    method public void initialize();
    method public void onCameraMove(double lat, double lon, double zoom, double pitch, double bearing, Double![] padding);
    method public void onCompassClicked();
    method public void onDelegateProvider(com.mapbox.maps.plugin.delegates.MapDelegateProvider delegateProvider);
    method public void onPluginView(android.view.View view);
    method public void onStart();
    method public void onStop();
    method public void removeCompassClickListener(com.mapbox.maps.plugin.compass.OnCompassClickListener onClickListener);
    method protected void setInternalSettings(com.mapbox.maps.plugin.compass.generated.CompassSettings internalSettings);
    property public boolean enabled;
    property protected com.mapbox.maps.plugin.compass.generated.CompassSettings internalSettings;
    field public static final com.mapbox.maps.plugin.compass.CompassViewPlugin.Companion Companion;
  }

  public static final class CompassViewPlugin.Companion {
  }

  public final class CompassViewPluginKt {
    method public static com.mapbox.maps.plugin.compass.CompassPlugin getCompass(com.mapbox.maps.plugin.delegates.MapPluginProviderDelegate);
  }

}

