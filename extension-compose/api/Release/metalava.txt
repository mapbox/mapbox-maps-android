// Signature format: 3.0
package com.mapbox.maps.extension.compose {

  @com.mapbox.maps.MapboxExperimental public final class DefaultSettingsProvider {
    method @com.mapbox.maps.MapboxExperimental public com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings defaultLocationComponentSettings(android.content.Context context, float pixelRatio = android.util.DisplayMetrics.density);
    method @com.mapbox.maps.MapboxExperimental public com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings defaultLocationComponentSettings(android.content.Context context);
    method public com.mapbox.maps.plugin.gestures.OnMapClickListener getDefaultOnClickListener();
    method public com.mapbox.maps.plugin.gestures.OnMapLongClickListener getDefaultOnLongClickListener();
    property public final com.mapbox.maps.plugin.gestures.OnMapClickListener defaultOnClickListener;
    property public final com.mapbox.maps.plugin.gestures.OnMapLongClickListener defaultOnLongClickListener;
    field public static final com.mapbox.maps.extension.compose.DefaultSettingsProvider INSTANCE;
  }

  public final class DisposableMapEffectKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void DisposableMapEffect(Object? key1, kotlin.jvm.functions.Function2<? super androidx.compose.runtime.DisposableEffectScope,? super com.mapbox.maps.MapView,? extends androidx.compose.runtime.DisposableEffectResult> block);
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void DisposableMapEffect(Object? key1, Object? key2, kotlin.jvm.functions.Function2<? super androidx.compose.runtime.DisposableEffectScope,? super com.mapbox.maps.MapView,? extends androidx.compose.runtime.DisposableEffectResult> block);
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void DisposableMapEffect(Object? key1, Object? key2, Object? key3, kotlin.jvm.functions.Function2<? super androidx.compose.runtime.DisposableEffectScope,? super com.mapbox.maps.MapView,? extends androidx.compose.runtime.DisposableEffectResult> block);
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void DisposableMapEffect(Object![]? keys, kotlin.jvm.functions.Function2<? super androidx.compose.runtime.DisposableEffectScope,? super com.mapbox.maps.MapView,? extends androidx.compose.runtime.DisposableEffectResult> block);
  }

  public final class MapEffectKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void MapEffect(Object? key1, kotlin.jvm.functions.Function3<? super kotlinx.coroutines.CoroutineScope,? super com.mapbox.maps.MapView,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,?> block);
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void MapEffect(Object? key1, Object? key2, kotlin.jvm.functions.Function3<? super kotlinx.coroutines.CoroutineScope,? super com.mapbox.maps.MapView,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,?> block);
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void MapEffect(Object? key1, Object? key2, Object? key3, kotlin.jvm.functions.Function3<? super kotlinx.coroutines.CoroutineScope,? super com.mapbox.maps.MapView,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,?> block);
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void MapEffect(Object![]? keys, kotlin.jvm.functions.Function3<? super kotlinx.coroutines.CoroutineScope,? super com.mapbox.maps.MapView,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,?> block);
  }

  @com.mapbox.maps.MapboxExperimental public final class MapEvents {
    ctor public MapEvents(com.mapbox.maps.MapLoadedCallback? onMapLoaded = null, com.mapbox.maps.MapIdleCallback? onMapIdle = null, com.mapbox.maps.MapLoadingErrorCallback? onMapLoadingError = null, com.mapbox.maps.StyleLoadedCallback? onStyleLoaded = null, com.mapbox.maps.StyleDataLoadedCallback? onStyleDataLoaded = null, com.mapbox.maps.SourceDataLoadedCallback? onSourceDataLoaded = null, com.mapbox.maps.SourceAddedCallback? onSourceAdded = null, com.mapbox.maps.SourceRemovedCallback? onSourceRemoved = null, com.mapbox.maps.StyleImageMissingCallback? onStyleImageMissing = null, com.mapbox.maps.StyleImageRemoveUnusedCallback? onStyleImageRemoveUnused = null, com.mapbox.maps.CameraChangedCallback? onCameraChanged = null, com.mapbox.maps.RenderFrameStartedCallback? onRenderFrameStarted = null, com.mapbox.maps.RenderFrameFinishedCallback? onRenderFrameFinished = null, com.mapbox.maps.ResourceRequestCallback? onResourceRequest = null);
    method public com.mapbox.maps.CameraChangedCallback? getOnCameraChanged();
    method public com.mapbox.maps.MapIdleCallback? getOnMapIdle();
    method public com.mapbox.maps.MapLoadedCallback? getOnMapLoaded();
    method public com.mapbox.maps.MapLoadingErrorCallback? getOnMapLoadingError();
    method public com.mapbox.maps.RenderFrameFinishedCallback? getOnRenderFrameFinished();
    method public com.mapbox.maps.RenderFrameStartedCallback? getOnRenderFrameStarted();
    method public com.mapbox.maps.ResourceRequestCallback? getOnResourceRequest();
    method public com.mapbox.maps.SourceAddedCallback? getOnSourceAdded();
    method public com.mapbox.maps.SourceDataLoadedCallback? getOnSourceDataLoaded();
    method public com.mapbox.maps.SourceRemovedCallback? getOnSourceRemoved();
    method public com.mapbox.maps.StyleDataLoadedCallback? getOnStyleDataLoaded();
    method public com.mapbox.maps.StyleImageMissingCallback? getOnStyleImageMissing();
    method public com.mapbox.maps.StyleImageRemoveUnusedCallback? getOnStyleImageRemoveUnused();
    method public com.mapbox.maps.StyleLoadedCallback? getOnStyleLoaded();
    property public final com.mapbox.maps.CameraChangedCallback? onCameraChanged;
    property public final com.mapbox.maps.MapIdleCallback? onMapIdle;
    property public final com.mapbox.maps.MapLoadedCallback? onMapLoaded;
    property public final com.mapbox.maps.MapLoadingErrorCallback? onMapLoadingError;
    property public final com.mapbox.maps.RenderFrameFinishedCallback? onRenderFrameFinished;
    property public final com.mapbox.maps.RenderFrameStartedCallback? onRenderFrameStarted;
    property public final com.mapbox.maps.ResourceRequestCallback? onResourceRequest;
    property public final com.mapbox.maps.SourceAddedCallback? onSourceAdded;
    property public final com.mapbox.maps.SourceDataLoadedCallback? onSourceDataLoaded;
    property public final com.mapbox.maps.SourceRemovedCallback? onSourceRemoved;
    property public final com.mapbox.maps.StyleDataLoadedCallback? onStyleDataLoaded;
    property public final com.mapbox.maps.StyleImageMissingCallback? onStyleImageMissing;
    property public final com.mapbox.maps.StyleImageRemoveUnusedCallback? onStyleImageRemoveUnused;
    property public final com.mapbox.maps.StyleLoadedCallback? onStyleLoaded;
  }

  @androidx.compose.runtime.ComposableTargetMarker(description="Mapbox Map Composable") @com.mapbox.maps.MapboxExperimental @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) @kotlin.annotation.Target(allowedTargets={kotlin.annotation.AnnotationTarget.FILE, kotlin.annotation.AnnotationTarget.FUNCTION, kotlin.annotation.AnnotationTarget.PROPERTY_GETTER, kotlin.annotation.AnnotationTarget.TYPE, kotlin.annotation.AnnotationTarget.TYPE_PARAMETER}) public @interface MapboxMapComposable {
  }

  public final class MapboxMapKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental public static void MapboxMap(androidx.compose.ui.Modifier modifier = Modifier, com.mapbox.maps.extension.compose.MapEvents? mapEvents = null, kotlin.jvm.functions.Function1<? super android.content.Context,com.mapbox.maps.MapInitOptions> mapInitOptionsFactory = { context -> return <init>(context) }, com.mapbox.maps.plugin.gestures.generated.GesturesSettings gesturesSettings = GesturesSettings({ 

}), com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings locationComponentSettings = DefaultSettingsProvider.defaultLocationComponentSettings(LocalContext.current), kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.ornaments.compass.MapCompassScope,kotlin.Unit> compass = { Compass() }, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.ornaments.scalebar.MapScaleBarScope,kotlin.Unit> scaleBar = { ScaleBar() }, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.ornaments.logo.MapLogoScope,kotlin.Unit> logo = { Logo() }, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.ornaments.attribution.MapAttributionScope,kotlin.Unit> attribution = { Attribution() }, com.mapbox.maps.extension.compose.animation.viewport.MapViewportState mapViewportState = rememberMapViewportState(), com.mapbox.maps.plugin.gestures.OnMapClickListener onMapClickListener = DefaultSettingsProvider.defaultOnClickListener, com.mapbox.maps.plugin.gestures.OnMapLongClickListener onMapLongClickListener = DefaultSettingsProvider.defaultOnLongClickListener, kotlin.jvm.functions.Function0<kotlin.Unit> style = { MapboxStandardStyle() }, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.MapboxMapScope,kotlin.Unit>? content = null);
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapScopeMarker public final class MapboxMapScope {
    field public static final com.mapbox.maps.extension.compose.MapboxMapScope INSTANCE;
  }

  @kotlin.DslMarker public @interface MapboxMapScopeMarker {
  }

}

package com.mapbox.maps.extension.compose.animation.viewport {

  @com.mapbox.maps.MapboxExperimental public final class MapViewportState {
    ctor public MapViewportState(com.mapbox.maps.CameraState cameraState = com.mapbox.maps.extension.compose.animation.viewport.MapViewportState.INIT_CAMERA_STATE);
    method @com.mapbox.maps.MapboxExperimental public void easeTo(com.mapbox.maps.CameraOptions cameraOptions, com.mapbox.maps.plugin.animation.MapAnimationOptions? animationOptions = null, com.mapbox.maps.plugin.viewport.CompletionListener? completionListener = null);
    method @com.mapbox.maps.MapboxExperimental public void flyTo(com.mapbox.maps.CameraOptions cameraOptions, com.mapbox.maps.plugin.animation.MapAnimationOptions? animationOptions = null, com.mapbox.maps.plugin.viewport.CompletionListener? completionListener = null);
    method public com.mapbox.maps.CameraState getCameraState();
    method public com.mapbox.maps.plugin.viewport.ViewportStatus getMapViewportStatus();
    method public com.mapbox.maps.plugin.viewport.data.ViewportStatusChangeReason getMapViewportStatusChangedReason();
    method public com.mapbox.maps.CameraOptions? getStyleDefaultCameraOptions();
    method @com.mapbox.maps.MapboxExperimental public void idle();
    method @UiThread @com.mapbox.maps.MapboxExperimental public void setCameraOptions(com.mapbox.maps.CameraOptions cameraOptions);
    method @UiThread @com.mapbox.maps.MapboxExperimental public void setCameraOptions(kotlin.jvm.functions.Function1<? super com.mapbox.maps.CameraOptions.Builder,kotlin.Unit> block);
    method @com.mapbox.maps.MapboxExperimental public void transitionToFollowPuckState(com.mapbox.maps.plugin.viewport.data.FollowPuckViewportStateOptions followPuckViewportStateOptions = FollowPuckViewportStateOptions.<init>().build(), com.mapbox.maps.plugin.viewport.data.DefaultViewportTransitionOptions defaultTransitionOptions = DefaultViewportTransitionOptions.<init>().build(), com.mapbox.maps.plugin.viewport.CompletionListener? completionListener = null);
    method @com.mapbox.maps.MapboxExperimental public void transitionToOverviewState(com.mapbox.maps.plugin.viewport.data.OverviewViewportStateOptions overviewViewportStateOptions, com.mapbox.maps.plugin.viewport.data.DefaultViewportTransitionOptions defaultTransitionOptions = DefaultViewportTransitionOptions.<init>().build(), com.mapbox.maps.plugin.viewport.CompletionListener? completionListener = null);
    property public final com.mapbox.maps.CameraState cameraState;
    property public final com.mapbox.maps.plugin.viewport.ViewportStatus mapViewportStatus;
    property public final com.mapbox.maps.plugin.viewport.data.ViewportStatusChangeReason mapViewportStatusChangedReason;
    property public final com.mapbox.maps.CameraOptions? styleDefaultCameraOptions;
    field public static final com.mapbox.maps.extension.compose.animation.viewport.MapViewportState.Companion Companion;
  }

  public static final class MapViewportState.Companion {
    method public androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.animation.viewport.MapViewportState,com.mapbox.maps.CameraState> getSaver();
    property public final androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.animation.viewport.MapViewportState,com.mapbox.maps.CameraState> Saver;
  }

  public final class MapViewportStateKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental public static inline com.mapbox.maps.extension.compose.animation.viewport.MapViewportState rememberMapViewportState(String? key = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.animation.viewport.MapViewportState,kotlin.Unit> init = {});
  }

}

package com.mapbox.maps.extension.compose.annotation {

  public final class ViewAnnotationKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void ViewAnnotation(com.mapbox.maps.ViewAnnotationOptions options, androidx.compose.ui.Modifier modifier = Modifier, com.mapbox.maps.viewannotation.OnViewAnnotationUpdatedListener? onUpdatedListener = null, android.view.ViewGroup.LayoutParams layoutParams = ViewGroup.<init>(FrameLayout.LayoutParams.WRAP_CONTENT, FrameLayout.LayoutParams.WRAP_CONTENT), kotlin.jvm.functions.Function0<kotlin.Unit> content);
  }

}

package com.mapbox.maps.extension.compose.annotation.generated {

  public final class CircleAnnotationGroupKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void CircleAnnotationGroup(java.util.List<com.mapbox.maps.plugin.annotation.generated.CircleAnnotationOptions> annotations, com.mapbox.maps.plugin.annotation.AnnotationConfig? annotationConfig = null, Double? circleEmissiveStrength = null, com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchAlignment? circlePitchAlignment = null, com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchScale? circlePitchScale = null, java.util.List<java.lang.Double>? circleTranslate = null, com.mapbox.maps.extension.style.layers.properties.generated.CircleTranslateAnchor? circleTranslateAnchor = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.annotation.generated.CircleAnnotation,java.lang.Boolean> onClick = { it -> return false });
  }

  public final class CircleAnnotationKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void CircleAnnotation(com.mapbox.geojson.Point point, Double? circleBlur = null, Integer? circleColorInt = null, String? circleColorString = null, Double? circleOpacity = null, Double? circleRadius = null, Integer? circleStrokeColorInt = null, String? circleStrokeColorString = null, Double? circleStrokeOpacity = null, Double? circleStrokeWidth = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.annotation.generated.CircleAnnotation,java.lang.Boolean> onClick = { it -> return false });
  }

  public final class PointAnnotationGroupKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void PointAnnotationGroup(java.util.List<com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions> annotations, com.mapbox.maps.plugin.annotation.AnnotationConfig? annotationConfig = null, Boolean? iconAllowOverlap = null, Boolean? iconIgnorePlacement = null, Boolean? iconKeepUpright = null, Boolean? iconOptional = null, Double? iconPadding = null, com.mapbox.maps.extension.style.layers.properties.generated.IconPitchAlignment? iconPitchAlignment = null, com.mapbox.maps.extension.style.layers.properties.generated.IconRotationAlignment? iconRotationAlignment = null, Boolean? symbolAvoidEdges = null, com.mapbox.maps.extension.style.layers.properties.generated.SymbolPlacement? symbolPlacement = null, Double? symbolSpacing = null, Boolean? symbolZElevate = null, com.mapbox.maps.extension.style.layers.properties.generated.SymbolZOrder? symbolZOrder = null, Boolean? textAllowOverlap = null, java.util.List<java.lang.String>? textFont = null, Boolean? textIgnorePlacement = null, Boolean? textKeepUpright = null, Double? textMaxAngle = null, Boolean? textOptional = null, Double? textPadding = null, com.mapbox.maps.extension.style.layers.properties.generated.TextPitchAlignment? textPitchAlignment = null, com.mapbox.maps.extension.style.layers.properties.generated.TextRotationAlignment? textRotationAlignment = null, java.util.List<java.lang.String>? textVariableAnchor = null, java.util.List<java.lang.String>? textWritingMode = null, Double? iconColorSaturation = null, java.util.List<java.lang.Double>? iconTranslate = null, com.mapbox.maps.extension.style.layers.properties.generated.IconTranslateAnchor? iconTranslateAnchor = null, java.util.List<java.lang.Double>? textTranslate = null, com.mapbox.maps.extension.style.layers.properties.generated.TextTranslateAnchor? textTranslateAnchor = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.annotation.generated.PointAnnotation,java.lang.Boolean> onClick = { it -> return false });
  }

  public final class PointAnnotationKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void PointAnnotation(com.mapbox.geojson.Point point, android.graphics.Bitmap? iconImageBitmap = null, com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor? iconAnchor = null, String? iconImage = null, java.util.List<java.lang.Double>? iconOffset = null, Double? iconRotate = null, Double? iconSize = null, com.mapbox.maps.extension.style.layers.properties.generated.IconTextFit? iconTextFit = null, java.util.List<java.lang.Double>? iconTextFitPadding = null, com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor? textAnchor = null, String? textField = null, com.mapbox.maps.extension.style.layers.properties.generated.TextJustify? textJustify = null, Double? textLetterSpacing = null, Double? textLineHeight = null, Double? textMaxWidth = null, java.util.List<java.lang.Double>? textOffset = null, Double? textRadialOffset = null, Double? textRotate = null, Double? textSize = null, com.mapbox.maps.extension.style.layers.properties.generated.TextTransform? textTransform = null, Integer? iconColorInt = null, String? iconColorString = null, Double? iconEmissiveStrength = null, Double? iconHaloBlur = null, Integer? iconHaloColorInt = null, String? iconHaloColorString = null, Double? iconHaloWidth = null, Double? iconImageCrossFade = null, Double? iconOpacity = null, Integer? textColorInt = null, String? textColorString = null, Double? textEmissiveStrength = null, Double? textHaloBlur = null, Integer? textHaloColorInt = null, String? textHaloColorString = null, Double? textHaloWidth = null, Double? textOpacity = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.annotation.generated.PointAnnotation,java.lang.Boolean> onClick = { it -> return false });
  }

  public final class PolygonAnnotationGroupKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void PolygonAnnotationGroup(java.util.List<com.mapbox.maps.plugin.annotation.generated.PolygonAnnotationOptions> annotations, com.mapbox.maps.plugin.annotation.AnnotationConfig? annotationConfig = null, Boolean? fillAntialias = null, Double? fillEmissiveStrength = null, java.util.List<java.lang.Double>? fillTranslate = null, com.mapbox.maps.extension.style.layers.properties.generated.FillTranslateAnchor? fillTranslateAnchor = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.annotation.generated.PolygonAnnotation,java.lang.Boolean> onClick = { it -> return false });
  }

  public final class PolygonAnnotationKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void PolygonAnnotation(java.util.List<? extends java.util.List<com.mapbox.geojson.Point>> points, Integer? fillColorInt = null, String? fillColorString = null, Double? fillOpacity = null, Integer? fillOutlineColorInt = null, String? fillOutlineColorString = null, String? fillPattern = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.annotation.generated.PolygonAnnotation,java.lang.Boolean> onClick = { it -> return false });
  }

  public final class PolylineAnnotationGroupKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void PolylineAnnotationGroup(java.util.List<com.mapbox.maps.plugin.annotation.generated.PolylineAnnotationOptions> annotations, com.mapbox.maps.plugin.annotation.AnnotationConfig? annotationConfig = null, com.mapbox.maps.extension.style.layers.properties.generated.LineCap? lineCap = null, Double? lineMiterLimit = null, Double? lineRoundLimit = null, java.util.List<java.lang.Double>? lineDasharray = null, Double? lineDepthOcclusionFactor = null, Double? lineEmissiveStrength = null, java.util.List<java.lang.Double>? lineTranslate = null, com.mapbox.maps.extension.style.layers.properties.generated.LineTranslateAnchor? lineTranslateAnchor = null, java.util.List<java.lang.Double>? lineTrimOffset = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.annotation.generated.PolylineAnnotation,java.lang.Boolean> onClick = { it -> return false });
  }

  public final class PolylineAnnotationKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void PolylineAnnotation(java.util.List<com.mapbox.geojson.Point> points, com.mapbox.maps.extension.style.layers.properties.generated.LineJoin? lineJoin = null, Double? lineBlur = null, Integer? lineBorderColorInt = null, String? lineBorderColorString = null, Double? lineBorderWidth = null, Integer? lineColorInt = null, String? lineColorString = null, Double? lineGapWidth = null, Double? lineOffset = null, Double? lineOpacity = null, String? linePattern = null, Double? lineWidth = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.annotation.generated.PolylineAnnotation,java.lang.Boolean> onClick = { it -> return false });
  }

}

package com.mapbox.maps.extension.compose.internal {

  public final class MapPreviewPlaceholderKt {
  }

  public final class MapViewLifecycleKt {
  }

  public final class MapboxMapNodeKt {
  }

  public final class SettingsUtilsKt {
  }

}

package com.mapbox.maps.extension.compose.ornaments.attribution {

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapScopeMarker public final class MapAttributionScope {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental public void Attribution(androidx.compose.ui.Modifier modifier = Modifier, androidx.compose.ui.Alignment alignment = androidx.compose.ui.Alignment.Companion.BottomStart, long iconColor = Color(4280192171), kotlin.jvm.functions.Function3<? super java.util.List<com.mapbox.maps.plugin.attribution.Attribution>,? super kotlin.jvm.functions.Function0<kotlin.Unit>,? super kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.attribution.Attribution,kotlin.Unit>,kotlin.Unit> attributionDialog = { attributions, onDismissRequest, onAttributionClick -> AttributionDialog(attributions, onDismissRequest, onAttributionClick) }, kotlin.jvm.functions.Function4<? super kotlin.jvm.functions.Function0<kotlin.Unit>,? super kotlin.jvm.functions.Function0<kotlin.Unit>,? super kotlin.jvm.functions.Function0<kotlin.Unit>,? super kotlin.jvm.functions.Function0<kotlin.Unit>,kotlin.Unit> telemetryDialog = { onDismissRequest, onMoreInfo, onDisagree, onAgree -> TelemetryDialog(onDismissRequest, onMoreInfo, onDisagree, onAgree) });
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental public void AttributionDialog(java.util.List<com.mapbox.maps.plugin.attribution.Attribution> attributions, kotlin.jvm.functions.Function0<kotlin.Unit> onDismissRequest, kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.attribution.Attribution,kotlin.Unit> onAttributionClick);
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental public void TelemetryDialog(kotlin.jvm.functions.Function0<kotlin.Unit> onDismissRequest, kotlin.jvm.functions.Function0<kotlin.Unit> onMoreInfo, kotlin.jvm.functions.Function0<kotlin.Unit> onDisagree, kotlin.jvm.functions.Function0<kotlin.Unit> onAgree);
  }

}

package com.mapbox.maps.extension.compose.ornaments.compass {

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapScopeMarker public final class MapCompassScope {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental public void Compass(androidx.compose.ui.Modifier modifier = Modifier, androidx.compose.ui.Alignment alignment = androidx.compose.ui.Alignment.Companion.TopEnd, boolean fadeWhenFacingNorth = true, boolean resetToNorthUponClick = true, kotlin.jvm.functions.Function0<kotlin.Unit> content = { Image(painterResource(R.drawable.mapbox_compass_icon), "Mapbox Compass") });
  }

}

package com.mapbox.maps.extension.compose.ornaments.logo {

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapScopeMarker public final class MapLogoScope {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental public void Logo(androidx.compose.ui.Modifier modifier = Modifier, androidx.compose.ui.Alignment alignment = androidx.compose.ui.Alignment.Companion.BottomStart);
  }

}

package com.mapbox.maps.extension.compose.ornaments.scalebar {

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapScopeMarker public final class MapScaleBarScope {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental public void ScaleBar(androidx.compose.ui.Modifier modifier = Modifier, androidx.compose.ui.Alignment alignment = androidx.compose.ui.Alignment.Companion.TopStart, long textColor = Color.Black, long primaryColor = Color.Black, long secondaryColor = Color.White, float borderWidth = 2.dp, float height = 2.dp, float textBarMargin = 8.dp, float textBorderWidth = 2.dp, long textSize = 8.sp, boolean isMetricUnit = true, long refreshInterval = 15.milliseconds, boolean showTextBorder = true, float ratio = 0.5f, boolean useContinuousRendering = false);
  }

}

package com.mapbox.maps.extension.compose.style {

  @androidx.compose.runtime.ComposableTargetMarker(description="Mapbox Style Composable") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) @kotlin.annotation.Target(allowedTargets={kotlin.annotation.AnnotationTarget.FILE, kotlin.annotation.AnnotationTarget.FUNCTION, kotlin.annotation.AnnotationTarget.PROPERTY_GETTER, kotlin.annotation.AnnotationTarget.TYPE, kotlin.annotation.AnnotationTarget.TYPE_PARAMETER}) public @interface MapboxStyleComposable {
  }

  public final class StyleKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.style.MapboxStyleComposable public static void GenericStyle(String style, java.util.Map<java.lang.String,? extends kotlin.jvm.functions.Function0<kotlin.Unit>> slots = emptyMap(), java.util.Map<com.mapbox.maps.LayerPosition,? extends kotlin.jvm.functions.Function0<kotlin.Unit>> layerPositions = emptyMap(), java.util.Map<java.lang.String,? extends java.util.Map<java.lang.String,? extends com.mapbox.bindgen.Value>> configs = emptyMap());
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.style.MapboxStyleComposable public static void MapStyle(String style);
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.style.MapboxStyleComposable public static void MapboxStandardStyle(kotlin.jvm.functions.Function0<kotlin.Unit>? topSlot = null, kotlin.jvm.functions.Function0<kotlin.Unit>? middleSlot = null, kotlin.jvm.functions.Function0<kotlin.Unit>? bottomSlot = null, com.mapbox.bindgen.Value lightPreset = Value.nullValue());
  }

}

package com.mapbox.maps.extension.compose.style.internal {

  public final class StyleConfigKt {
  }

  public final class StyleLayerPositionKt {
  }

  public final class StyleSlotKt {
  }

}

package com.mapbox.maps.extension.compose.style.layers.generated {

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class AccuracyRadius {
    ctor public AccuracyRadius(com.mapbox.bindgen.Value value);
    ctor public AccuracyRadius(double value);
    ctor public AccuracyRadius(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.AccuracyRadius copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.AccuracyRadius.Companion Companion;
  }

  public static final class AccuracyRadius.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.AccuracyRadius getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.AccuracyRadius default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class AccuracyRadiusBorderColor {
    ctor public AccuracyRadiusBorderColor(com.mapbox.bindgen.Value value);
    ctor public AccuracyRadiusBorderColor(long value);
    ctor public AccuracyRadiusBorderColor(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.AccuracyRadiusBorderColor copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.AccuracyRadiusBorderColor.Companion Companion;
  }

  public static final class AccuracyRadiusBorderColor.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.AccuracyRadiusBorderColor getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.AccuracyRadiusBorderColor default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class AccuracyRadiusColor {
    ctor public AccuracyRadiusColor(com.mapbox.bindgen.Value value);
    ctor public AccuracyRadiusColor(long value);
    ctor public AccuracyRadiusColor(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.AccuracyRadiusColor copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.AccuracyRadiusColor.Companion Companion;
  }

  public static final class AccuracyRadiusColor.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.AccuracyRadiusColor getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.AccuracyRadiusColor default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class BackgroundColor {
    ctor public BackgroundColor(com.mapbox.bindgen.Value value);
    ctor public BackgroundColor(long value);
    ctor public BackgroundColor(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.BackgroundColor copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.BackgroundColor.Companion Companion;
  }

  public static final class BackgroundColor.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.BackgroundColor getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.BackgroundColor default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class BackgroundEmissiveStrength {
    ctor public BackgroundEmissiveStrength(com.mapbox.bindgen.Value value);
    ctor public BackgroundEmissiveStrength(double value);
    ctor public BackgroundEmissiveStrength(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.BackgroundEmissiveStrength copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.BackgroundEmissiveStrength.Companion Companion;
  }

  public static final class BackgroundEmissiveStrength.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.BackgroundEmissiveStrength getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.BackgroundEmissiveStrength default;
  }

  public final class BackgroundLayerKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void BackgroundLayer(String layerId, com.mapbox.maps.extension.compose.style.layers.generated.BackgroundColor backgroundColor = BackgroundColor.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition backgroundColorTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.BackgroundEmissiveStrength backgroundEmissiveStrength = BackgroundEmissiveStrength.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition backgroundEmissiveStrengthTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.BackgroundOpacity backgroundOpacity = BackgroundOpacity.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition backgroundOpacityTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.BackgroundPattern backgroundPattern = BackgroundPattern.default, com.mapbox.maps.extension.compose.style.layers.generated.Visibility visibility = Visibility.default, com.mapbox.maps.extension.compose.style.layers.generated.MinZoom minZoom = MinZoom.default, com.mapbox.maps.extension.compose.style.layers.generated.MaxZoom maxZoom = MaxZoom.default);
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class BackgroundOpacity {
    ctor public BackgroundOpacity(com.mapbox.bindgen.Value value);
    ctor public BackgroundOpacity(double value);
    ctor public BackgroundOpacity(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.BackgroundOpacity copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.BackgroundOpacity.Companion Companion;
  }

  public static final class BackgroundOpacity.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.BackgroundOpacity getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.BackgroundOpacity default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class BackgroundPattern {
    ctor public BackgroundPattern(com.mapbox.bindgen.Value value);
    ctor public BackgroundPattern(String value);
    ctor public BackgroundPattern(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.BackgroundPattern copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.BackgroundPattern.Companion Companion;
  }

  public static final class BackgroundPattern.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.BackgroundPattern getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.BackgroundPattern default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class Bearing {
    ctor public Bearing(com.mapbox.bindgen.Value value);
    ctor public Bearing(double value);
    ctor public Bearing(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.Bearing copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.Bearing.Companion Companion;
  }

  public static final class Bearing.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.Bearing getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.Bearing default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class BearingImage {
    ctor public BearingImage(com.mapbox.bindgen.Value value);
    ctor public BearingImage(String value);
    ctor public BearingImage(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.BearingImage copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.BearingImage.Companion Companion;
  }

  public static final class BearingImage.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.BearingImage getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.BearingImage default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class BearingImageSize {
    ctor public BearingImageSize(com.mapbox.bindgen.Value value);
    ctor public BearingImageSize(double value);
    ctor public BearingImageSize(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.BearingImageSize copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.BearingImageSize.Companion Companion;
  }

  public static final class BearingImageSize.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.BearingImageSize getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.BearingImageSize default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class CircleBlur {
    ctor public CircleBlur(com.mapbox.bindgen.Value value);
    ctor public CircleBlur(double value);
    ctor public CircleBlur(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.CircleBlur copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.CircleBlur.Companion Companion;
  }

  public static final class CircleBlur.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.CircleBlur getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.CircleBlur default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class CircleColor {
    ctor public CircleColor(com.mapbox.bindgen.Value value);
    ctor public CircleColor(long value);
    ctor public CircleColor(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.CircleColor copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.CircleColor.Companion Companion;
  }

  public static final class CircleColor.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.CircleColor getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.CircleColor default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class CircleEmissiveStrength {
    ctor public CircleEmissiveStrength(com.mapbox.bindgen.Value value);
    ctor public CircleEmissiveStrength(double value);
    ctor public CircleEmissiveStrength(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.CircleEmissiveStrength copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.CircleEmissiveStrength.Companion Companion;
  }

  public static final class CircleEmissiveStrength.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.CircleEmissiveStrength getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.CircleEmissiveStrength default;
  }

  public final class CircleLayerKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void CircleLayer(String layerId, String sourceId, com.mapbox.maps.extension.compose.style.layers.generated.CircleSortKey circleSortKey = CircleSortKey.default, com.mapbox.maps.extension.compose.style.layers.generated.CircleBlur circleBlur = CircleBlur.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition circleBlurTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.CircleColor circleColor = CircleColor.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition circleColorTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.CircleEmissiveStrength circleEmissiveStrength = CircleEmissiveStrength.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition circleEmissiveStrengthTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.CircleOpacity circleOpacity = CircleOpacity.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition circleOpacityTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.CirclePitchAlignment circlePitchAlignment = CirclePitchAlignment.default, com.mapbox.maps.extension.compose.style.layers.generated.CirclePitchScale circlePitchScale = CirclePitchScale.default, com.mapbox.maps.extension.compose.style.layers.generated.CircleRadius circleRadius = CircleRadius.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition circleRadiusTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.CircleStrokeColor circleStrokeColor = CircleStrokeColor.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition circleStrokeColorTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.CircleStrokeOpacity circleStrokeOpacity = CircleStrokeOpacity.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition circleStrokeOpacityTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.CircleStrokeWidth circleStrokeWidth = CircleStrokeWidth.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition circleStrokeWidthTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.CircleTranslate circleTranslate = CircleTranslate.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition circleTranslateTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.CircleTranslateAnchor circleTranslateAnchor = CircleTranslateAnchor.default, com.mapbox.maps.extension.compose.style.layers.generated.Visibility visibility = Visibility.default, com.mapbox.maps.extension.compose.style.layers.generated.MinZoom minZoom = MinZoom.default, com.mapbox.maps.extension.compose.style.layers.generated.MaxZoom maxZoom = MaxZoom.default, com.mapbox.maps.extension.compose.style.layers.generated.SourceLayer sourceLayer = SourceLayer.default, com.mapbox.maps.extension.compose.style.layers.generated.Filter filter = Filter.default);
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class CircleOpacity {
    ctor public CircleOpacity(com.mapbox.bindgen.Value value);
    ctor public CircleOpacity(double value);
    ctor public CircleOpacity(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.CircleOpacity copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.CircleOpacity.Companion Companion;
  }

  public static final class CircleOpacity.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.CircleOpacity getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.CircleOpacity default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class CirclePitchAlignment {
    ctor public CirclePitchAlignment(com.mapbox.bindgen.Value value);
    ctor public CirclePitchAlignment(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.CirclePitchAlignment copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.CirclePitchAlignment.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.CirclePitchAlignment MAP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.CirclePitchAlignment VIEWPORT;
  }

  public static final class CirclePitchAlignment.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.CirclePitchAlignment getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.CirclePitchAlignment default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class CirclePitchScale {
    ctor public CirclePitchScale(com.mapbox.bindgen.Value value);
    ctor public CirclePitchScale(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.CirclePitchScale copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.CirclePitchScale.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.CirclePitchScale MAP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.CirclePitchScale VIEWPORT;
  }

  public static final class CirclePitchScale.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.CirclePitchScale getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.CirclePitchScale default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class CircleRadius {
    ctor public CircleRadius(com.mapbox.bindgen.Value value);
    ctor public CircleRadius(double value);
    ctor public CircleRadius(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.CircleRadius copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.CircleRadius.Companion Companion;
  }

  public static final class CircleRadius.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.CircleRadius getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.CircleRadius default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class CircleSortKey {
    ctor public CircleSortKey(com.mapbox.bindgen.Value value);
    ctor public CircleSortKey(double value);
    ctor public CircleSortKey(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.CircleSortKey copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.CircleSortKey.Companion Companion;
  }

  public static final class CircleSortKey.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.CircleSortKey getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.CircleSortKey default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class CircleStrokeColor {
    ctor public CircleStrokeColor(com.mapbox.bindgen.Value value);
    ctor public CircleStrokeColor(long value);
    ctor public CircleStrokeColor(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.CircleStrokeColor copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.CircleStrokeColor.Companion Companion;
  }

  public static final class CircleStrokeColor.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.CircleStrokeColor getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.CircleStrokeColor default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class CircleStrokeOpacity {
    ctor public CircleStrokeOpacity(com.mapbox.bindgen.Value value);
    ctor public CircleStrokeOpacity(double value);
    ctor public CircleStrokeOpacity(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.CircleStrokeOpacity copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.CircleStrokeOpacity.Companion Companion;
  }

  public static final class CircleStrokeOpacity.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.CircleStrokeOpacity getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.CircleStrokeOpacity default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class CircleStrokeWidth {
    ctor public CircleStrokeWidth(com.mapbox.bindgen.Value value);
    ctor public CircleStrokeWidth(double value);
    ctor public CircleStrokeWidth(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.CircleStrokeWidth copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.CircleStrokeWidth.Companion Companion;
  }

  public static final class CircleStrokeWidth.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.CircleStrokeWidth getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.CircleStrokeWidth default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class CircleTranslate {
    ctor public CircleTranslate(com.mapbox.bindgen.Value value);
    ctor public CircleTranslate(java.util.List<java.lang.Double> value);
    ctor public CircleTranslate(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.CircleTranslate copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.CircleTranslate.Companion Companion;
  }

  public static final class CircleTranslate.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.CircleTranslate getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.CircleTranslate default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class CircleTranslateAnchor {
    ctor public CircleTranslateAnchor(com.mapbox.bindgen.Value value);
    ctor public CircleTranslateAnchor(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.CircleTranslateAnchor copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.CircleTranslateAnchor.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.CircleTranslateAnchor MAP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.CircleTranslateAnchor VIEWPORT;
  }

  public static final class CircleTranslateAnchor.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.CircleTranslateAnchor getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.CircleTranslateAnchor default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class EmphasisCircleColor {
    ctor public EmphasisCircleColor(com.mapbox.bindgen.Value value);
    ctor public EmphasisCircleColor(long value);
    ctor public EmphasisCircleColor(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.EmphasisCircleColor copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.EmphasisCircleColor.Companion Companion;
  }

  public static final class EmphasisCircleColor.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.EmphasisCircleColor getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.EmphasisCircleColor default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class EmphasisCircleRadius {
    ctor public EmphasisCircleRadius(com.mapbox.bindgen.Value value);
    ctor public EmphasisCircleRadius(double value);
    ctor public EmphasisCircleRadius(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.EmphasisCircleRadius copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.EmphasisCircleRadius.Companion Companion;
  }

  public static final class EmphasisCircleRadius.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.EmphasisCircleRadius getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.EmphasisCircleRadius default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class FillAntialias {
    ctor public FillAntialias(com.mapbox.bindgen.Value value);
    ctor public FillAntialias(boolean value);
    ctor public FillAntialias(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillAntialias copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillAntialias.Companion Companion;
  }

  public static final class FillAntialias.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillAntialias getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.FillAntialias default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class FillColor {
    ctor public FillColor(com.mapbox.bindgen.Value value);
    ctor public FillColor(long value);
    ctor public FillColor(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillColor copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillColor.Companion Companion;
  }

  public static final class FillColor.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillColor getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.FillColor default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class FillEmissiveStrength {
    ctor public FillEmissiveStrength(com.mapbox.bindgen.Value value);
    ctor public FillEmissiveStrength(double value);
    ctor public FillEmissiveStrength(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillEmissiveStrength copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillEmissiveStrength.Companion Companion;
  }

  public static final class FillEmissiveStrength.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillEmissiveStrength getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.FillEmissiveStrength default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class FillExtrusionAmbientOcclusionGroundAttenuation {
    ctor public FillExtrusionAmbientOcclusionGroundAttenuation(com.mapbox.bindgen.Value value);
    ctor public FillExtrusionAmbientOcclusionGroundAttenuation(double value);
    ctor public FillExtrusionAmbientOcclusionGroundAttenuation(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionAmbientOcclusionGroundAttenuation copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionAmbientOcclusionGroundAttenuation.Companion Companion;
  }

  public static final class FillExtrusionAmbientOcclusionGroundAttenuation.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionAmbientOcclusionGroundAttenuation getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionAmbientOcclusionGroundAttenuation default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class FillExtrusionAmbientOcclusionGroundRadius {
    ctor public FillExtrusionAmbientOcclusionGroundRadius(com.mapbox.bindgen.Value value);
    ctor public FillExtrusionAmbientOcclusionGroundRadius(double value);
    ctor public FillExtrusionAmbientOcclusionGroundRadius(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionAmbientOcclusionGroundRadius copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionAmbientOcclusionGroundRadius.Companion Companion;
  }

  public static final class FillExtrusionAmbientOcclusionGroundRadius.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionAmbientOcclusionGroundRadius getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionAmbientOcclusionGroundRadius default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class FillExtrusionAmbientOcclusionIntensity {
    ctor public FillExtrusionAmbientOcclusionIntensity(com.mapbox.bindgen.Value value);
    ctor public FillExtrusionAmbientOcclusionIntensity(double value);
    ctor public FillExtrusionAmbientOcclusionIntensity(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionAmbientOcclusionIntensity copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionAmbientOcclusionIntensity.Companion Companion;
  }

  public static final class FillExtrusionAmbientOcclusionIntensity.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionAmbientOcclusionIntensity getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionAmbientOcclusionIntensity default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class FillExtrusionAmbientOcclusionRadius {
    ctor public FillExtrusionAmbientOcclusionRadius(com.mapbox.bindgen.Value value);
    ctor public FillExtrusionAmbientOcclusionRadius(double value);
    ctor public FillExtrusionAmbientOcclusionRadius(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionAmbientOcclusionRadius copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionAmbientOcclusionRadius.Companion Companion;
  }

  public static final class FillExtrusionAmbientOcclusionRadius.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionAmbientOcclusionRadius getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionAmbientOcclusionRadius default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class FillExtrusionAmbientOcclusionWallRadius {
    ctor public FillExtrusionAmbientOcclusionWallRadius(com.mapbox.bindgen.Value value);
    ctor public FillExtrusionAmbientOcclusionWallRadius(double value);
    ctor public FillExtrusionAmbientOcclusionWallRadius(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionAmbientOcclusionWallRadius copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionAmbientOcclusionWallRadius.Companion Companion;
  }

  public static final class FillExtrusionAmbientOcclusionWallRadius.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionAmbientOcclusionWallRadius getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionAmbientOcclusionWallRadius default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class FillExtrusionBase {
    ctor public FillExtrusionBase(com.mapbox.bindgen.Value value);
    ctor public FillExtrusionBase(double value);
    ctor public FillExtrusionBase(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionBase copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionBase.Companion Companion;
  }

  public static final class FillExtrusionBase.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionBase getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionBase default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class FillExtrusionColor {
    ctor public FillExtrusionColor(com.mapbox.bindgen.Value value);
    ctor public FillExtrusionColor(long value);
    ctor public FillExtrusionColor(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionColor copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionColor.Companion Companion;
  }

  public static final class FillExtrusionColor.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionColor getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionColor default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class FillExtrusionCutoffFadeRange {
    ctor public FillExtrusionCutoffFadeRange(com.mapbox.bindgen.Value value);
    ctor public FillExtrusionCutoffFadeRange(double value);
    ctor public FillExtrusionCutoffFadeRange(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionCutoffFadeRange copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionCutoffFadeRange.Companion Companion;
  }

  public static final class FillExtrusionCutoffFadeRange.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionCutoffFadeRange getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionCutoffFadeRange default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class FillExtrusionEdgeRadius {
    ctor public FillExtrusionEdgeRadius(com.mapbox.bindgen.Value value);
    ctor public FillExtrusionEdgeRadius(double value);
    ctor public FillExtrusionEdgeRadius(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionEdgeRadius copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionEdgeRadius.Companion Companion;
  }

  public static final class FillExtrusionEdgeRadius.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionEdgeRadius getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionEdgeRadius default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class FillExtrusionEmissiveStrength {
    ctor public FillExtrusionEmissiveStrength(com.mapbox.bindgen.Value value);
    ctor public FillExtrusionEmissiveStrength(double value);
    ctor public FillExtrusionEmissiveStrength(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionEmissiveStrength copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionEmissiveStrength.Companion Companion;
  }

  public static final class FillExtrusionEmissiveStrength.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionEmissiveStrength getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionEmissiveStrength default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class FillExtrusionFloodLightColor {
    ctor public FillExtrusionFloodLightColor(com.mapbox.bindgen.Value value);
    ctor public FillExtrusionFloodLightColor(long value);
    ctor public FillExtrusionFloodLightColor(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionFloodLightColor copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionFloodLightColor.Companion Companion;
  }

  public static final class FillExtrusionFloodLightColor.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionFloodLightColor getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionFloodLightColor default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class FillExtrusionFloodLightGroundAttenuation {
    ctor public FillExtrusionFloodLightGroundAttenuation(com.mapbox.bindgen.Value value);
    ctor public FillExtrusionFloodLightGroundAttenuation(double value);
    ctor public FillExtrusionFloodLightGroundAttenuation(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionFloodLightGroundAttenuation copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionFloodLightGroundAttenuation.Companion Companion;
  }

  public static final class FillExtrusionFloodLightGroundAttenuation.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionFloodLightGroundAttenuation getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionFloodLightGroundAttenuation default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class FillExtrusionFloodLightGroundRadius {
    ctor public FillExtrusionFloodLightGroundRadius(com.mapbox.bindgen.Value value);
    ctor public FillExtrusionFloodLightGroundRadius(double value);
    ctor public FillExtrusionFloodLightGroundRadius(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionFloodLightGroundRadius copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionFloodLightGroundRadius.Companion Companion;
  }

  public static final class FillExtrusionFloodLightGroundRadius.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionFloodLightGroundRadius getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionFloodLightGroundRadius default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class FillExtrusionFloodLightIntensity {
    ctor public FillExtrusionFloodLightIntensity(com.mapbox.bindgen.Value value);
    ctor public FillExtrusionFloodLightIntensity(double value);
    ctor public FillExtrusionFloodLightIntensity(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionFloodLightIntensity copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionFloodLightIntensity.Companion Companion;
  }

  public static final class FillExtrusionFloodLightIntensity.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionFloodLightIntensity getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionFloodLightIntensity default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class FillExtrusionFloodLightWallRadius {
    ctor public FillExtrusionFloodLightWallRadius(com.mapbox.bindgen.Value value);
    ctor public FillExtrusionFloodLightWallRadius(double value);
    ctor public FillExtrusionFloodLightWallRadius(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionFloodLightWallRadius copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionFloodLightWallRadius.Companion Companion;
  }

  public static final class FillExtrusionFloodLightWallRadius.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionFloodLightWallRadius getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionFloodLightWallRadius default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class FillExtrusionHeight {
    ctor public FillExtrusionHeight(com.mapbox.bindgen.Value value);
    ctor public FillExtrusionHeight(double value);
    ctor public FillExtrusionHeight(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionHeight copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionHeight.Companion Companion;
  }

  public static final class FillExtrusionHeight.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionHeight getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionHeight default;
  }

  public final class FillExtrusionLayerKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void FillExtrusionLayer(String layerId, String sourceId, com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionEdgeRadius fillExtrusionEdgeRadius = FillExtrusionEdgeRadius.default, com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionAmbientOcclusionGroundAttenuation fillExtrusionAmbientOcclusionGroundAttenuation = FillExtrusionAmbientOcclusionGroundAttenuation.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition fillExtrusionAmbientOcclusionGroundAttenuationTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionAmbientOcclusionGroundRadius fillExtrusionAmbientOcclusionGroundRadius = FillExtrusionAmbientOcclusionGroundRadius.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition fillExtrusionAmbientOcclusionGroundRadiusTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionAmbientOcclusionIntensity fillExtrusionAmbientOcclusionIntensity = FillExtrusionAmbientOcclusionIntensity.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition fillExtrusionAmbientOcclusionIntensityTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionAmbientOcclusionRadius fillExtrusionAmbientOcclusionRadius = FillExtrusionAmbientOcclusionRadius.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition fillExtrusionAmbientOcclusionRadiusTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionAmbientOcclusionWallRadius fillExtrusionAmbientOcclusionWallRadius = FillExtrusionAmbientOcclusionWallRadius.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition fillExtrusionAmbientOcclusionWallRadiusTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionBase fillExtrusionBase = FillExtrusionBase.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition fillExtrusionBaseTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionColor fillExtrusionColor = FillExtrusionColor.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition fillExtrusionColorTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionCutoffFadeRange fillExtrusionCutoffFadeRange = FillExtrusionCutoffFadeRange.default, com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionEmissiveStrength fillExtrusionEmissiveStrength = FillExtrusionEmissiveStrength.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition fillExtrusionEmissiveStrengthTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionFloodLightColor fillExtrusionFloodLightColor = FillExtrusionFloodLightColor.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition fillExtrusionFloodLightColorTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionFloodLightGroundAttenuation fillExtrusionFloodLightGroundAttenuation = FillExtrusionFloodLightGroundAttenuation.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition fillExtrusionFloodLightGroundAttenuationTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionFloodLightGroundRadius fillExtrusionFloodLightGroundRadius = FillExtrusionFloodLightGroundRadius.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition fillExtrusionFloodLightGroundRadiusTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionFloodLightIntensity fillExtrusionFloodLightIntensity = FillExtrusionFloodLightIntensity.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition fillExtrusionFloodLightIntensityTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionFloodLightWallRadius fillExtrusionFloodLightWallRadius = FillExtrusionFloodLightWallRadius.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition fillExtrusionFloodLightWallRadiusTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionHeight fillExtrusionHeight = FillExtrusionHeight.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition fillExtrusionHeightTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionOpacity fillExtrusionOpacity = FillExtrusionOpacity.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition fillExtrusionOpacityTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionPattern fillExtrusionPattern = FillExtrusionPattern.default, com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionRoundedRoof fillExtrusionRoundedRoof = FillExtrusionRoundedRoof.default, com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionTranslate fillExtrusionTranslate = FillExtrusionTranslate.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition fillExtrusionTranslateTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionTranslateAnchor fillExtrusionTranslateAnchor = FillExtrusionTranslateAnchor.default, com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionVerticalGradient fillExtrusionVerticalGradient = FillExtrusionVerticalGradient.default, com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionVerticalScale fillExtrusionVerticalScale = FillExtrusionVerticalScale.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition fillExtrusionVerticalScaleTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.Visibility visibility = Visibility.default, com.mapbox.maps.extension.compose.style.layers.generated.MinZoom minZoom = MinZoom.default, com.mapbox.maps.extension.compose.style.layers.generated.MaxZoom maxZoom = MaxZoom.default, com.mapbox.maps.extension.compose.style.layers.generated.SourceLayer sourceLayer = SourceLayer.default, com.mapbox.maps.extension.compose.style.layers.generated.Filter filter = Filter.default);
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class FillExtrusionOpacity {
    ctor public FillExtrusionOpacity(com.mapbox.bindgen.Value value);
    ctor public FillExtrusionOpacity(double value);
    ctor public FillExtrusionOpacity(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionOpacity copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionOpacity.Companion Companion;
  }

  public static final class FillExtrusionOpacity.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionOpacity getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionOpacity default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class FillExtrusionPattern {
    ctor public FillExtrusionPattern(com.mapbox.bindgen.Value value);
    ctor public FillExtrusionPattern(String value);
    ctor public FillExtrusionPattern(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionPattern copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionPattern.Companion Companion;
  }

  public static final class FillExtrusionPattern.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionPattern getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionPattern default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class FillExtrusionRoundedRoof {
    ctor public FillExtrusionRoundedRoof(com.mapbox.bindgen.Value value);
    ctor public FillExtrusionRoundedRoof(boolean value);
    ctor public FillExtrusionRoundedRoof(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionRoundedRoof copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionRoundedRoof.Companion Companion;
  }

  public static final class FillExtrusionRoundedRoof.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionRoundedRoof getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionRoundedRoof default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class FillExtrusionTranslate {
    ctor public FillExtrusionTranslate(com.mapbox.bindgen.Value value);
    ctor public FillExtrusionTranslate(java.util.List<java.lang.Double> value);
    ctor public FillExtrusionTranslate(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionTranslate copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionTranslate.Companion Companion;
  }

  public static final class FillExtrusionTranslate.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionTranslate getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionTranslate default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class FillExtrusionTranslateAnchor {
    ctor public FillExtrusionTranslateAnchor(com.mapbox.bindgen.Value value);
    ctor public FillExtrusionTranslateAnchor(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionTranslateAnchor copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionTranslateAnchor.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionTranslateAnchor MAP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionTranslateAnchor VIEWPORT;
  }

  public static final class FillExtrusionTranslateAnchor.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionTranslateAnchor getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionTranslateAnchor default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class FillExtrusionVerticalGradient {
    ctor public FillExtrusionVerticalGradient(com.mapbox.bindgen.Value value);
    ctor public FillExtrusionVerticalGradient(boolean value);
    ctor public FillExtrusionVerticalGradient(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionVerticalGradient copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionVerticalGradient.Companion Companion;
  }

  public static final class FillExtrusionVerticalGradient.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionVerticalGradient getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionVerticalGradient default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class FillExtrusionVerticalScale {
    ctor public FillExtrusionVerticalScale(com.mapbox.bindgen.Value value);
    ctor public FillExtrusionVerticalScale(double value);
    ctor public FillExtrusionVerticalScale(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionVerticalScale copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionVerticalScale.Companion Companion;
  }

  public static final class FillExtrusionVerticalScale.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionVerticalScale getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionVerticalScale default;
  }

  public final class FillLayerKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void FillLayer(String layerId, String sourceId, com.mapbox.maps.extension.compose.style.layers.generated.FillSortKey fillSortKey = FillSortKey.default, com.mapbox.maps.extension.compose.style.layers.generated.FillAntialias fillAntialias = FillAntialias.default, com.mapbox.maps.extension.compose.style.layers.generated.FillColor fillColor = FillColor.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition fillColorTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.FillEmissiveStrength fillEmissiveStrength = FillEmissiveStrength.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition fillEmissiveStrengthTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.FillOpacity fillOpacity = FillOpacity.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition fillOpacityTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.FillOutlineColor fillOutlineColor = FillOutlineColor.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition fillOutlineColorTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.FillPattern fillPattern = FillPattern.default, com.mapbox.maps.extension.compose.style.layers.generated.FillTranslate fillTranslate = FillTranslate.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition fillTranslateTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.FillTranslateAnchor fillTranslateAnchor = FillTranslateAnchor.default, com.mapbox.maps.extension.compose.style.layers.generated.Visibility visibility = Visibility.default, com.mapbox.maps.extension.compose.style.layers.generated.MinZoom minZoom = MinZoom.default, com.mapbox.maps.extension.compose.style.layers.generated.MaxZoom maxZoom = MaxZoom.default, com.mapbox.maps.extension.compose.style.layers.generated.SourceLayer sourceLayer = SourceLayer.default, com.mapbox.maps.extension.compose.style.layers.generated.Filter filter = Filter.default);
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class FillOpacity {
    ctor public FillOpacity(com.mapbox.bindgen.Value value);
    ctor public FillOpacity(double value);
    ctor public FillOpacity(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillOpacity copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillOpacity.Companion Companion;
  }

  public static final class FillOpacity.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillOpacity getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.FillOpacity default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class FillOutlineColor {
    ctor public FillOutlineColor(com.mapbox.bindgen.Value value);
    ctor public FillOutlineColor(long value);
    ctor public FillOutlineColor(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillOutlineColor copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillOutlineColor.Companion Companion;
  }

  public static final class FillOutlineColor.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillOutlineColor getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.FillOutlineColor default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class FillPattern {
    ctor public FillPattern(com.mapbox.bindgen.Value value);
    ctor public FillPattern(String value);
    ctor public FillPattern(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillPattern copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillPattern.Companion Companion;
  }

  public static final class FillPattern.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillPattern getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.FillPattern default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class FillSortKey {
    ctor public FillSortKey(com.mapbox.bindgen.Value value);
    ctor public FillSortKey(double value);
    ctor public FillSortKey(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillSortKey copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillSortKey.Companion Companion;
  }

  public static final class FillSortKey.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillSortKey getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.FillSortKey default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class FillTranslate {
    ctor public FillTranslate(com.mapbox.bindgen.Value value);
    ctor public FillTranslate(java.util.List<java.lang.Double> value);
    ctor public FillTranslate(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillTranslate copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillTranslate.Companion Companion;
  }

  public static final class FillTranslate.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillTranslate getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.FillTranslate default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class FillTranslateAnchor {
    ctor public FillTranslateAnchor(com.mapbox.bindgen.Value value);
    ctor public FillTranslateAnchor(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillTranslateAnchor copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillTranslateAnchor.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillTranslateAnchor MAP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillTranslateAnchor VIEWPORT;
  }

  public static final class FillTranslateAnchor.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillTranslateAnchor getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.FillTranslateAnchor default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class Filter {
    ctor public Filter(com.mapbox.bindgen.Value value);
    ctor public Filter(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.Filter copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.Filter.Companion Companion;
  }

  public static final class Filter.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.Filter getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.Filter default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class HeatmapColor {
    ctor public HeatmapColor(com.mapbox.bindgen.Value value);
    ctor public HeatmapColor(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.HeatmapColor copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.HeatmapColor.Companion Companion;
  }

  public static final class HeatmapColor.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.HeatmapColor getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.HeatmapColor default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class HeatmapIntensity {
    ctor public HeatmapIntensity(com.mapbox.bindgen.Value value);
    ctor public HeatmapIntensity(double value);
    ctor public HeatmapIntensity(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.HeatmapIntensity copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.HeatmapIntensity.Companion Companion;
  }

  public static final class HeatmapIntensity.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.HeatmapIntensity getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.HeatmapIntensity default;
  }

  public final class HeatmapLayerKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void HeatmapLayer(String layerId, String sourceId, com.mapbox.maps.extension.compose.style.layers.generated.HeatmapColor heatmapColor = HeatmapColor.default, com.mapbox.maps.extension.compose.style.layers.generated.HeatmapIntensity heatmapIntensity = HeatmapIntensity.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition heatmapIntensityTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.HeatmapOpacity heatmapOpacity = HeatmapOpacity.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition heatmapOpacityTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.HeatmapRadius heatmapRadius = HeatmapRadius.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition heatmapRadiusTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.HeatmapWeight heatmapWeight = HeatmapWeight.default, com.mapbox.maps.extension.compose.style.layers.generated.Visibility visibility = Visibility.default, com.mapbox.maps.extension.compose.style.layers.generated.MinZoom minZoom = MinZoom.default, com.mapbox.maps.extension.compose.style.layers.generated.MaxZoom maxZoom = MaxZoom.default, com.mapbox.maps.extension.compose.style.layers.generated.SourceLayer sourceLayer = SourceLayer.default, com.mapbox.maps.extension.compose.style.layers.generated.Filter filter = Filter.default);
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class HeatmapOpacity {
    ctor public HeatmapOpacity(com.mapbox.bindgen.Value value);
    ctor public HeatmapOpacity(double value);
    ctor public HeatmapOpacity(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.HeatmapOpacity copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.HeatmapOpacity.Companion Companion;
  }

  public static final class HeatmapOpacity.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.HeatmapOpacity getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.HeatmapOpacity default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class HeatmapRadius {
    ctor public HeatmapRadius(com.mapbox.bindgen.Value value);
    ctor public HeatmapRadius(double value);
    ctor public HeatmapRadius(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.HeatmapRadius copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.HeatmapRadius.Companion Companion;
  }

  public static final class HeatmapRadius.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.HeatmapRadius getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.HeatmapRadius default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class HeatmapWeight {
    ctor public HeatmapWeight(com.mapbox.bindgen.Value value);
    ctor public HeatmapWeight(double value);
    ctor public HeatmapWeight(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.HeatmapWeight copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.HeatmapWeight.Companion Companion;
  }

  public static final class HeatmapWeight.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.HeatmapWeight getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.HeatmapWeight default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class HillshadeAccentColor {
    ctor public HillshadeAccentColor(com.mapbox.bindgen.Value value);
    ctor public HillshadeAccentColor(long value);
    ctor public HillshadeAccentColor(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.HillshadeAccentColor copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.HillshadeAccentColor.Companion Companion;
  }

  public static final class HillshadeAccentColor.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.HillshadeAccentColor getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.HillshadeAccentColor default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class HillshadeEmissiveStrength {
    ctor public HillshadeEmissiveStrength(com.mapbox.bindgen.Value value);
    ctor public HillshadeEmissiveStrength(double value);
    ctor public HillshadeEmissiveStrength(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.HillshadeEmissiveStrength copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.HillshadeEmissiveStrength.Companion Companion;
  }

  public static final class HillshadeEmissiveStrength.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.HillshadeEmissiveStrength getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.HillshadeEmissiveStrength default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class HillshadeExaggeration {
    ctor public HillshadeExaggeration(com.mapbox.bindgen.Value value);
    ctor public HillshadeExaggeration(double value);
    ctor public HillshadeExaggeration(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.HillshadeExaggeration copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.HillshadeExaggeration.Companion Companion;
  }

  public static final class HillshadeExaggeration.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.HillshadeExaggeration getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.HillshadeExaggeration default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class HillshadeHighlightColor {
    ctor public HillshadeHighlightColor(com.mapbox.bindgen.Value value);
    ctor public HillshadeHighlightColor(long value);
    ctor public HillshadeHighlightColor(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.HillshadeHighlightColor copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.HillshadeHighlightColor.Companion Companion;
  }

  public static final class HillshadeHighlightColor.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.HillshadeHighlightColor getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.HillshadeHighlightColor default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class HillshadeIlluminationAnchor {
    ctor public HillshadeIlluminationAnchor(com.mapbox.bindgen.Value value);
    ctor public HillshadeIlluminationAnchor(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.HillshadeIlluminationAnchor copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.HillshadeIlluminationAnchor.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.HillshadeIlluminationAnchor MAP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.HillshadeIlluminationAnchor VIEWPORT;
  }

  public static final class HillshadeIlluminationAnchor.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.HillshadeIlluminationAnchor getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.HillshadeIlluminationAnchor default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class HillshadeIlluminationDirection {
    ctor public HillshadeIlluminationDirection(com.mapbox.bindgen.Value value);
    ctor public HillshadeIlluminationDirection(double value);
    ctor public HillshadeIlluminationDirection(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.HillshadeIlluminationDirection copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.HillshadeIlluminationDirection.Companion Companion;
  }

  public static final class HillshadeIlluminationDirection.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.HillshadeIlluminationDirection getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.HillshadeIlluminationDirection default;
  }

  public final class HillshadeLayerKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void HillshadeLayer(String layerId, String sourceId, com.mapbox.maps.extension.compose.style.layers.generated.HillshadeAccentColor hillshadeAccentColor = HillshadeAccentColor.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition hillshadeAccentColorTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.HillshadeEmissiveStrength hillshadeEmissiveStrength = HillshadeEmissiveStrength.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition hillshadeEmissiveStrengthTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.HillshadeExaggeration hillshadeExaggeration = HillshadeExaggeration.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition hillshadeExaggerationTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.HillshadeHighlightColor hillshadeHighlightColor = HillshadeHighlightColor.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition hillshadeHighlightColorTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.HillshadeIlluminationAnchor hillshadeIlluminationAnchor = HillshadeIlluminationAnchor.default, com.mapbox.maps.extension.compose.style.layers.generated.HillshadeIlluminationDirection hillshadeIlluminationDirection = HillshadeIlluminationDirection.default, com.mapbox.maps.extension.compose.style.layers.generated.HillshadeShadowColor hillshadeShadowColor = HillshadeShadowColor.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition hillshadeShadowColorTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.Visibility visibility = Visibility.default, com.mapbox.maps.extension.compose.style.layers.generated.MinZoom minZoom = MinZoom.default, com.mapbox.maps.extension.compose.style.layers.generated.MaxZoom maxZoom = MaxZoom.default, com.mapbox.maps.extension.compose.style.layers.generated.SourceLayer sourceLayer = SourceLayer.default, com.mapbox.maps.extension.compose.style.layers.generated.Filter filter = Filter.default);
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class HillshadeShadowColor {
    ctor public HillshadeShadowColor(com.mapbox.bindgen.Value value);
    ctor public HillshadeShadowColor(long value);
    ctor public HillshadeShadowColor(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.HillshadeShadowColor copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.HillshadeShadowColor.Companion Companion;
  }

  public static final class HillshadeShadowColor.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.HillshadeShadowColor getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.HillshadeShadowColor default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class IconAllowOverlap {
    ctor public IconAllowOverlap(com.mapbox.bindgen.Value value);
    ctor public IconAllowOverlap(boolean value);
    ctor public IconAllowOverlap(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconAllowOverlap copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconAllowOverlap.Companion Companion;
  }

  public static final class IconAllowOverlap.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconAllowOverlap getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.IconAllowOverlap default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class IconAnchor {
    ctor public IconAnchor(com.mapbox.bindgen.Value value);
    ctor public IconAnchor(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconAnchor copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconAnchor BOTTOM;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconAnchor BOTTOM_LEFT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconAnchor BOTTOM_RIGHT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconAnchor CENTER;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconAnchor.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconAnchor LEFT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconAnchor RIGHT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconAnchor TOP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconAnchor TOP_LEFT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconAnchor TOP_RIGHT;
  }

  public static final class IconAnchor.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconAnchor getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.IconAnchor default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class IconColor {
    ctor public IconColor(com.mapbox.bindgen.Value value);
    ctor public IconColor(long value);
    ctor public IconColor(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconColor copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconColor.Companion Companion;
  }

  public static final class IconColor.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconColor getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.IconColor default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class IconColorSaturation {
    ctor public IconColorSaturation(com.mapbox.bindgen.Value value);
    ctor public IconColorSaturation(double value);
    ctor public IconColorSaturation(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconColorSaturation copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconColorSaturation.Companion Companion;
  }

  public static final class IconColorSaturation.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconColorSaturation getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.IconColorSaturation default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class IconEmissiveStrength {
    ctor public IconEmissiveStrength(com.mapbox.bindgen.Value value);
    ctor public IconEmissiveStrength(double value);
    ctor public IconEmissiveStrength(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconEmissiveStrength copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconEmissiveStrength.Companion Companion;
  }

  public static final class IconEmissiveStrength.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconEmissiveStrength getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.IconEmissiveStrength default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class IconHaloBlur {
    ctor public IconHaloBlur(com.mapbox.bindgen.Value value);
    ctor public IconHaloBlur(double value);
    ctor public IconHaloBlur(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconHaloBlur copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconHaloBlur.Companion Companion;
  }

  public static final class IconHaloBlur.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconHaloBlur getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.IconHaloBlur default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class IconHaloColor {
    ctor public IconHaloColor(com.mapbox.bindgen.Value value);
    ctor public IconHaloColor(long value);
    ctor public IconHaloColor(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconHaloColor copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconHaloColor.Companion Companion;
  }

  public static final class IconHaloColor.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconHaloColor getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.IconHaloColor default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class IconHaloWidth {
    ctor public IconHaloWidth(com.mapbox.bindgen.Value value);
    ctor public IconHaloWidth(double value);
    ctor public IconHaloWidth(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconHaloWidth copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconHaloWidth.Companion Companion;
  }

  public static final class IconHaloWidth.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconHaloWidth getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.IconHaloWidth default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class IconIgnorePlacement {
    ctor public IconIgnorePlacement(com.mapbox.bindgen.Value value);
    ctor public IconIgnorePlacement(boolean value);
    ctor public IconIgnorePlacement(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconIgnorePlacement copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconIgnorePlacement.Companion Companion;
  }

  public static final class IconIgnorePlacement.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconIgnorePlacement getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.IconIgnorePlacement default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class IconImage {
    ctor public IconImage(com.mapbox.bindgen.Value value);
    ctor public IconImage(String value);
    ctor public IconImage(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconImage copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconImage.Companion Companion;
  }

  public static final class IconImage.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconImage getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.IconImage default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class IconImageCrossFade {
    ctor public IconImageCrossFade(com.mapbox.bindgen.Value value);
    ctor public IconImageCrossFade(double value);
    ctor public IconImageCrossFade(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconImageCrossFade copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconImageCrossFade.Companion Companion;
  }

  public static final class IconImageCrossFade.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconImageCrossFade getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.IconImageCrossFade default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class IconKeepUpright {
    ctor public IconKeepUpright(com.mapbox.bindgen.Value value);
    ctor public IconKeepUpright(boolean value);
    ctor public IconKeepUpright(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconKeepUpright copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconKeepUpright.Companion Companion;
  }

  public static final class IconKeepUpright.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconKeepUpright getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.IconKeepUpright default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class IconOffset {
    ctor public IconOffset(com.mapbox.bindgen.Value value);
    ctor public IconOffset(java.util.List<java.lang.Double> value);
    ctor public IconOffset(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconOffset copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconOffset.Companion Companion;
  }

  public static final class IconOffset.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconOffset getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.IconOffset default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class IconOpacity {
    ctor public IconOpacity(com.mapbox.bindgen.Value value);
    ctor public IconOpacity(double value);
    ctor public IconOpacity(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconOpacity copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconOpacity.Companion Companion;
  }

  public static final class IconOpacity.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconOpacity getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.IconOpacity default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class IconOptional {
    ctor public IconOptional(com.mapbox.bindgen.Value value);
    ctor public IconOptional(boolean value);
    ctor public IconOptional(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconOptional copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconOptional.Companion Companion;
  }

  public static final class IconOptional.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconOptional getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.IconOptional default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class IconPadding {
    ctor public IconPadding(com.mapbox.bindgen.Value value);
    ctor public IconPadding(double value);
    ctor public IconPadding(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconPadding copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconPadding.Companion Companion;
  }

  public static final class IconPadding.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconPadding getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.IconPadding default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class IconPitchAlignment {
    ctor public IconPitchAlignment(com.mapbox.bindgen.Value value);
    ctor public IconPitchAlignment(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconPitchAlignment copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconPitchAlignment AUTO;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconPitchAlignment.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconPitchAlignment MAP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconPitchAlignment VIEWPORT;
  }

  public static final class IconPitchAlignment.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconPitchAlignment getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.IconPitchAlignment default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class IconRotate {
    ctor public IconRotate(com.mapbox.bindgen.Value value);
    ctor public IconRotate(double value);
    ctor public IconRotate(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconRotate copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconRotate.Companion Companion;
  }

  public static final class IconRotate.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconRotate getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.IconRotate default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class IconRotationAlignment {
    ctor public IconRotationAlignment(com.mapbox.bindgen.Value value);
    ctor public IconRotationAlignment(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconRotationAlignment copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconRotationAlignment AUTO;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconRotationAlignment.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconRotationAlignment MAP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconRotationAlignment VIEWPORT;
  }

  public static final class IconRotationAlignment.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconRotationAlignment getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.IconRotationAlignment default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class IconSize {
    ctor public IconSize(com.mapbox.bindgen.Value value);
    ctor public IconSize(double value);
    ctor public IconSize(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconSize copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconSize.Companion Companion;
  }

  public static final class IconSize.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconSize getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.IconSize default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class IconTextFit {
    ctor public IconTextFit(com.mapbox.bindgen.Value value);
    ctor public IconTextFit(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconTextFit copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconTextFit BOTH;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconTextFit.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconTextFit HEIGHT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconTextFit NONE;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconTextFit WIDTH;
  }

  public static final class IconTextFit.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconTextFit getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.IconTextFit default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class IconTextFitPadding {
    ctor public IconTextFitPadding(com.mapbox.bindgen.Value value);
    ctor public IconTextFitPadding(java.util.List<java.lang.Double> value);
    ctor public IconTextFitPadding(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconTextFitPadding copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconTextFitPadding.Companion Companion;
  }

  public static final class IconTextFitPadding.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconTextFitPadding getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.IconTextFitPadding default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class IconTranslate {
    ctor public IconTranslate(com.mapbox.bindgen.Value value);
    ctor public IconTranslate(java.util.List<java.lang.Double> value);
    ctor public IconTranslate(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconTranslate copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconTranslate.Companion Companion;
  }

  public static final class IconTranslate.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconTranslate getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.IconTranslate default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class IconTranslateAnchor {
    ctor public IconTranslateAnchor(com.mapbox.bindgen.Value value);
    ctor public IconTranslateAnchor(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconTranslateAnchor copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconTranslateAnchor.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconTranslateAnchor MAP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconTranslateAnchor VIEWPORT;
  }

  public static final class IconTranslateAnchor.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconTranslateAnchor getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.IconTranslateAnchor default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class ImagePitchDisplacement {
    ctor public ImagePitchDisplacement(com.mapbox.bindgen.Value value);
    ctor public ImagePitchDisplacement(double value);
    ctor public ImagePitchDisplacement(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.ImagePitchDisplacement copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.ImagePitchDisplacement.Companion Companion;
  }

  public static final class ImagePitchDisplacement.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.ImagePitchDisplacement getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.ImagePitchDisplacement default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class LineBlur {
    ctor public LineBlur(com.mapbox.bindgen.Value value);
    ctor public LineBlur(double value);
    ctor public LineBlur(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineBlur copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineBlur.Companion Companion;
  }

  public static final class LineBlur.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineBlur getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.LineBlur default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class LineBorderColor {
    ctor public LineBorderColor(com.mapbox.bindgen.Value value);
    ctor public LineBorderColor(long value);
    ctor public LineBorderColor(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineBorderColor copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineBorderColor.Companion Companion;
  }

  public static final class LineBorderColor.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineBorderColor getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.LineBorderColor default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class LineBorderWidth {
    ctor public LineBorderWidth(com.mapbox.bindgen.Value value);
    ctor public LineBorderWidth(double value);
    ctor public LineBorderWidth(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineBorderWidth copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineBorderWidth.Companion Companion;
  }

  public static final class LineBorderWidth.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineBorderWidth getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.LineBorderWidth default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class LineCap {
    ctor public LineCap(com.mapbox.bindgen.Value value);
    ctor public LineCap(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineCap copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineCap BUTT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineCap.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineCap ROUND;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineCap SQUARE;
  }

  public static final class LineCap.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineCap getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.LineCap default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class LineColor {
    ctor public LineColor(com.mapbox.bindgen.Value value);
    ctor public LineColor(long value);
    ctor public LineColor(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineColor copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineColor.Companion Companion;
  }

  public static final class LineColor.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineColor getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.LineColor default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class LineDasharray {
    ctor public LineDasharray(com.mapbox.bindgen.Value value);
    ctor public LineDasharray(java.util.List<java.lang.Double> value);
    ctor public LineDasharray(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineDasharray copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineDasharray.Companion Companion;
  }

  public static final class LineDasharray.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineDasharray getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.LineDasharray default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class LineDepthOcclusionFactor {
    ctor public LineDepthOcclusionFactor(com.mapbox.bindgen.Value value);
    ctor public LineDepthOcclusionFactor(double value);
    ctor public LineDepthOcclusionFactor(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineDepthOcclusionFactor copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineDepthOcclusionFactor.Companion Companion;
  }

  public static final class LineDepthOcclusionFactor.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineDepthOcclusionFactor getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.LineDepthOcclusionFactor default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class LineEmissiveStrength {
    ctor public LineEmissiveStrength(com.mapbox.bindgen.Value value);
    ctor public LineEmissiveStrength(double value);
    ctor public LineEmissiveStrength(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineEmissiveStrength copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineEmissiveStrength.Companion Companion;
  }

  public static final class LineEmissiveStrength.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineEmissiveStrength getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.LineEmissiveStrength default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class LineGapWidth {
    ctor public LineGapWidth(com.mapbox.bindgen.Value value);
    ctor public LineGapWidth(double value);
    ctor public LineGapWidth(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineGapWidth copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineGapWidth.Companion Companion;
  }

  public static final class LineGapWidth.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineGapWidth getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.LineGapWidth default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class LineGradient {
    ctor public LineGradient(com.mapbox.bindgen.Value value);
    ctor public LineGradient(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineGradient copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineGradient.Companion Companion;
  }

  public static final class LineGradient.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineGradient getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.LineGradient default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class LineJoin {
    ctor public LineJoin(com.mapbox.bindgen.Value value);
    ctor public LineJoin(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineJoin copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineJoin BEVEL;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineJoin.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineJoin MITER;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineJoin ROUND;
  }

  public static final class LineJoin.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineJoin getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.LineJoin default;
  }

  public final class LineLayerKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void LineLayer(String layerId, String sourceId, com.mapbox.maps.extension.compose.style.layers.generated.LineCap lineCap = LineCap.default, com.mapbox.maps.extension.compose.style.layers.generated.LineJoin lineJoin = LineJoin.default, com.mapbox.maps.extension.compose.style.layers.generated.LineMiterLimit lineMiterLimit = LineMiterLimit.default, com.mapbox.maps.extension.compose.style.layers.generated.LineRoundLimit lineRoundLimit = LineRoundLimit.default, com.mapbox.maps.extension.compose.style.layers.generated.LineSortKey lineSortKey = LineSortKey.default, com.mapbox.maps.extension.compose.style.layers.generated.LineBlur lineBlur = LineBlur.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition lineBlurTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.LineBorderColor lineBorderColor = LineBorderColor.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition lineBorderColorTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.LineBorderWidth lineBorderWidth = LineBorderWidth.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition lineBorderWidthTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.LineColor lineColor = LineColor.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition lineColorTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.LineDasharray lineDasharray = LineDasharray.default, com.mapbox.maps.extension.compose.style.layers.generated.LineDepthOcclusionFactor lineDepthOcclusionFactor = LineDepthOcclusionFactor.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition lineDepthOcclusionFactorTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.LineEmissiveStrength lineEmissiveStrength = LineEmissiveStrength.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition lineEmissiveStrengthTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.LineGapWidth lineGapWidth = LineGapWidth.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition lineGapWidthTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.LineGradient lineGradient = LineGradient.default, com.mapbox.maps.extension.compose.style.layers.generated.LineOffset lineOffset = LineOffset.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition lineOffsetTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.LineOpacity lineOpacity = LineOpacity.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition lineOpacityTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.LinePattern linePattern = LinePattern.default, com.mapbox.maps.extension.compose.style.layers.generated.LineTranslate lineTranslate = LineTranslate.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition lineTranslateTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.LineTranslateAnchor lineTranslateAnchor = LineTranslateAnchor.default, com.mapbox.maps.extension.compose.style.layers.generated.LineTrimOffset lineTrimOffset = LineTrimOffset.default, com.mapbox.maps.extension.compose.style.layers.generated.LineWidth lineWidth = LineWidth.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition lineWidthTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.Visibility visibility = Visibility.default, com.mapbox.maps.extension.compose.style.layers.generated.MinZoom minZoom = MinZoom.default, com.mapbox.maps.extension.compose.style.layers.generated.MaxZoom maxZoom = MaxZoom.default, com.mapbox.maps.extension.compose.style.layers.generated.SourceLayer sourceLayer = SourceLayer.default, com.mapbox.maps.extension.compose.style.layers.generated.Filter filter = Filter.default);
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class LineMiterLimit {
    ctor public LineMiterLimit(com.mapbox.bindgen.Value value);
    ctor public LineMiterLimit(double value);
    ctor public LineMiterLimit(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineMiterLimit copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineMiterLimit.Companion Companion;
  }

  public static final class LineMiterLimit.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineMiterLimit getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.LineMiterLimit default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class LineOffset {
    ctor public LineOffset(com.mapbox.bindgen.Value value);
    ctor public LineOffset(double value);
    ctor public LineOffset(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineOffset copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineOffset.Companion Companion;
  }

  public static final class LineOffset.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineOffset getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.LineOffset default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class LineOpacity {
    ctor public LineOpacity(com.mapbox.bindgen.Value value);
    ctor public LineOpacity(double value);
    ctor public LineOpacity(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineOpacity copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineOpacity.Companion Companion;
  }

  public static final class LineOpacity.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineOpacity getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.LineOpacity default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class LinePattern {
    ctor public LinePattern(com.mapbox.bindgen.Value value);
    ctor public LinePattern(String value);
    ctor public LinePattern(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.LinePattern copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LinePattern.Companion Companion;
  }

  public static final class LinePattern.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.LinePattern getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.LinePattern default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class LineRoundLimit {
    ctor public LineRoundLimit(com.mapbox.bindgen.Value value);
    ctor public LineRoundLimit(double value);
    ctor public LineRoundLimit(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineRoundLimit copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineRoundLimit.Companion Companion;
  }

  public static final class LineRoundLimit.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineRoundLimit getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.LineRoundLimit default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class LineSortKey {
    ctor public LineSortKey(com.mapbox.bindgen.Value value);
    ctor public LineSortKey(double value);
    ctor public LineSortKey(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineSortKey copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineSortKey.Companion Companion;
  }

  public static final class LineSortKey.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineSortKey getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.LineSortKey default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class LineTranslate {
    ctor public LineTranslate(com.mapbox.bindgen.Value value);
    ctor public LineTranslate(java.util.List<java.lang.Double> value);
    ctor public LineTranslate(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineTranslate copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineTranslate.Companion Companion;
  }

  public static final class LineTranslate.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineTranslate getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.LineTranslate default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class LineTranslateAnchor {
    ctor public LineTranslateAnchor(com.mapbox.bindgen.Value value);
    ctor public LineTranslateAnchor(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineTranslateAnchor copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineTranslateAnchor.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineTranslateAnchor MAP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineTranslateAnchor VIEWPORT;
  }

  public static final class LineTranslateAnchor.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineTranslateAnchor getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.LineTranslateAnchor default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class LineTrimOffset {
    ctor public LineTrimOffset(com.mapbox.bindgen.Value value);
    ctor public LineTrimOffset(java.util.List<java.lang.Double> value);
    ctor public LineTrimOffset(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineTrimOffset copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineTrimOffset.Companion Companion;
  }

  public static final class LineTrimOffset.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineTrimOffset getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.LineTrimOffset default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class LineWidth {
    ctor public LineWidth(com.mapbox.bindgen.Value value);
    ctor public LineWidth(double value);
    ctor public LineWidth(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineWidth copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineWidth.Companion Companion;
  }

  public static final class LineWidth.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineWidth getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.LineWidth default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class Location {
    ctor public Location(com.mapbox.bindgen.Value value);
    ctor public Location(java.util.List<java.lang.Double> value);
    ctor public Location(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.Location copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.Location.Companion Companion;
  }

  public static final class Location.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.Location getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.Location default;
  }

  public final class LocationIndicatorLayerKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void LocationIndicatorLayer(String layerId, com.mapbox.maps.extension.compose.style.layers.generated.BearingImage bearingImage = BearingImage.default, com.mapbox.maps.extension.compose.style.layers.generated.ShadowImage shadowImage = ShadowImage.default, com.mapbox.maps.extension.compose.style.layers.generated.TopImage topImage = TopImage.default, com.mapbox.maps.extension.compose.style.layers.generated.AccuracyRadius accuracyRadius = AccuracyRadius.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition accuracyRadiusTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.AccuracyRadiusBorderColor accuracyRadiusBorderColor = AccuracyRadiusBorderColor.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition accuracyRadiusBorderColorTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.AccuracyRadiusColor accuracyRadiusColor = AccuracyRadiusColor.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition accuracyRadiusColorTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.Bearing bearing = Bearing.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition bearingTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.BearingImageSize bearingImageSize = BearingImageSize.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition bearingImageSizeTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.EmphasisCircleColor emphasisCircleColor = EmphasisCircleColor.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition emphasisCircleColorTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.EmphasisCircleRadius emphasisCircleRadius = EmphasisCircleRadius.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition emphasisCircleRadiusTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.ImagePitchDisplacement imagePitchDisplacement = ImagePitchDisplacement.default, com.mapbox.maps.extension.compose.style.layers.generated.Location location = Location.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition locationTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.LocationIndicatorOpacity locationIndicatorOpacity = LocationIndicatorOpacity.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition locationIndicatorOpacityTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.PerspectiveCompensation perspectiveCompensation = PerspectiveCompensation.default, com.mapbox.maps.extension.compose.style.layers.generated.ShadowImageSize shadowImageSize = ShadowImageSize.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition shadowImageSizeTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.TopImageSize topImageSize = TopImageSize.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition topImageSizeTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.Visibility visibility = Visibility.default, com.mapbox.maps.extension.compose.style.layers.generated.MinZoom minZoom = MinZoom.default, com.mapbox.maps.extension.compose.style.layers.generated.MaxZoom maxZoom = MaxZoom.default, com.mapbox.maps.extension.compose.style.layers.generated.SourceLayer sourceLayer = SourceLayer.default, com.mapbox.maps.extension.compose.style.layers.generated.Filter filter = Filter.default);
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class LocationIndicatorOpacity {
    ctor public LocationIndicatorOpacity(com.mapbox.bindgen.Value value);
    ctor public LocationIndicatorOpacity(double value);
    ctor public LocationIndicatorOpacity(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.LocationIndicatorOpacity copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LocationIndicatorOpacity.Companion Companion;
  }

  public static final class LocationIndicatorOpacity.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.LocationIndicatorOpacity getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.LocationIndicatorOpacity default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class MaxZoom {
    ctor public MaxZoom(com.mapbox.bindgen.Value value);
    ctor public MaxZoom(long value);
    ctor public MaxZoom(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.MaxZoom copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.MaxZoom.Companion Companion;
  }

  public static final class MaxZoom.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.MaxZoom getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.MaxZoom default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class MinZoom {
    ctor public MinZoom(com.mapbox.bindgen.Value value);
    ctor public MinZoom(long value);
    ctor public MinZoom(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.MinZoom copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.MinZoom.Companion Companion;
  }

  public static final class MinZoom.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.MinZoom getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.MinZoom default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class ModelAmbientOcclusionIntensity {
    ctor public ModelAmbientOcclusionIntensity(com.mapbox.bindgen.Value value);
    ctor public ModelAmbientOcclusionIntensity(double value);
    ctor public ModelAmbientOcclusionIntensity(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.ModelAmbientOcclusionIntensity copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.ModelAmbientOcclusionIntensity.Companion Companion;
  }

  public static final class ModelAmbientOcclusionIntensity.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.ModelAmbientOcclusionIntensity getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.ModelAmbientOcclusionIntensity default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class ModelCastShadows {
    ctor public ModelCastShadows(com.mapbox.bindgen.Value value);
    ctor public ModelCastShadows(boolean value);
    ctor public ModelCastShadows(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.ModelCastShadows copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.ModelCastShadows.Companion Companion;
  }

  public static final class ModelCastShadows.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.ModelCastShadows getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.ModelCastShadows default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class ModelColor {
    ctor public ModelColor(com.mapbox.bindgen.Value value);
    ctor public ModelColor(long value);
    ctor public ModelColor(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.ModelColor copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.ModelColor.Companion Companion;
  }

  public static final class ModelColor.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.ModelColor getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.ModelColor default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class ModelColorMixIntensity {
    ctor public ModelColorMixIntensity(com.mapbox.bindgen.Value value);
    ctor public ModelColorMixIntensity(double value);
    ctor public ModelColorMixIntensity(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.ModelColorMixIntensity copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.ModelColorMixIntensity.Companion Companion;
  }

  public static final class ModelColorMixIntensity.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.ModelColorMixIntensity getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.ModelColorMixIntensity default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class ModelCutoffFadeRange {
    ctor public ModelCutoffFadeRange(com.mapbox.bindgen.Value value);
    ctor public ModelCutoffFadeRange(double value);
    ctor public ModelCutoffFadeRange(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.ModelCutoffFadeRange copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.ModelCutoffFadeRange.Companion Companion;
  }

  public static final class ModelCutoffFadeRange.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.ModelCutoffFadeRange getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.ModelCutoffFadeRange default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class ModelEmissiveStrength {
    ctor public ModelEmissiveStrength(com.mapbox.bindgen.Value value);
    ctor public ModelEmissiveStrength(double value);
    ctor public ModelEmissiveStrength(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.ModelEmissiveStrength copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.ModelEmissiveStrength.Companion Companion;
  }

  public static final class ModelEmissiveStrength.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.ModelEmissiveStrength getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.ModelEmissiveStrength default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class ModelHeightBasedEmissiveStrengthMultiplier {
    ctor public ModelHeightBasedEmissiveStrengthMultiplier(com.mapbox.bindgen.Value value);
    ctor public ModelHeightBasedEmissiveStrengthMultiplier(java.util.List<java.lang.Double> value);
    ctor public ModelHeightBasedEmissiveStrengthMultiplier(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.ModelHeightBasedEmissiveStrengthMultiplier copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.ModelHeightBasedEmissiveStrengthMultiplier.Companion Companion;
  }

  public static final class ModelHeightBasedEmissiveStrengthMultiplier.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.ModelHeightBasedEmissiveStrengthMultiplier getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.ModelHeightBasedEmissiveStrengthMultiplier default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class ModelId {
    ctor public ModelId(com.mapbox.bindgen.Value value);
    ctor public ModelId(String value);
    ctor public ModelId(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.ModelId copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.ModelId.Companion Companion;
  }

  public static final class ModelId.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.ModelId getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.ModelId default;
  }

  public final class ModelLayerKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void ModelLayer(String layerId, String sourceId, com.mapbox.maps.extension.compose.style.layers.generated.ModelId modelId = ModelId.default, com.mapbox.maps.extension.compose.style.layers.generated.ModelAmbientOcclusionIntensity modelAmbientOcclusionIntensity = ModelAmbientOcclusionIntensity.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition modelAmbientOcclusionIntensityTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.ModelCastShadows modelCastShadows = ModelCastShadows.default, com.mapbox.maps.extension.compose.style.layers.generated.ModelColor modelColor = ModelColor.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition modelColorTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.ModelColorMixIntensity modelColorMixIntensity = ModelColorMixIntensity.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition modelColorMixIntensityTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.ModelCutoffFadeRange modelCutoffFadeRange = ModelCutoffFadeRange.default, com.mapbox.maps.extension.compose.style.layers.generated.ModelEmissiveStrength modelEmissiveStrength = ModelEmissiveStrength.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition modelEmissiveStrengthTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.ModelHeightBasedEmissiveStrengthMultiplier modelHeightBasedEmissiveStrengthMultiplier = ModelHeightBasedEmissiveStrengthMultiplier.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition modelHeightBasedEmissiveStrengthMultiplierTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.ModelOpacity modelOpacity = ModelOpacity.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition modelOpacityTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.ModelReceiveShadows modelReceiveShadows = ModelReceiveShadows.default, com.mapbox.maps.extension.compose.style.layers.generated.ModelRotation modelRotation = ModelRotation.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition modelRotationTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.ModelRoughness modelRoughness = ModelRoughness.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition modelRoughnessTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.ModelScale modelScale = ModelScale.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition modelScaleTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.ModelScaleMode modelScaleMode = ModelScaleMode.default, com.mapbox.maps.extension.compose.style.layers.generated.ModelTranslation modelTranslation = ModelTranslation.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition modelTranslationTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.ModelType modelType = ModelType.default, com.mapbox.maps.extension.compose.style.layers.generated.Visibility visibility = Visibility.default, com.mapbox.maps.extension.compose.style.layers.generated.MinZoom minZoom = MinZoom.default, com.mapbox.maps.extension.compose.style.layers.generated.MaxZoom maxZoom = MaxZoom.default, com.mapbox.maps.extension.compose.style.layers.generated.SourceLayer sourceLayer = SourceLayer.default, com.mapbox.maps.extension.compose.style.layers.generated.Filter filter = Filter.default);
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class ModelOpacity {
    ctor public ModelOpacity(com.mapbox.bindgen.Value value);
    ctor public ModelOpacity(double value);
    ctor public ModelOpacity(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.ModelOpacity copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.ModelOpacity.Companion Companion;
  }

  public static final class ModelOpacity.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.ModelOpacity getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.ModelOpacity default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class ModelReceiveShadows {
    ctor public ModelReceiveShadows(com.mapbox.bindgen.Value value);
    ctor public ModelReceiveShadows(boolean value);
    ctor public ModelReceiveShadows(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.ModelReceiveShadows copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.ModelReceiveShadows.Companion Companion;
  }

  public static final class ModelReceiveShadows.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.ModelReceiveShadows getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.ModelReceiveShadows default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class ModelRotation {
    ctor public ModelRotation(com.mapbox.bindgen.Value value);
    ctor public ModelRotation(java.util.List<java.lang.Double> value);
    ctor public ModelRotation(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.ModelRotation copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.ModelRotation.Companion Companion;
  }

  public static final class ModelRotation.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.ModelRotation getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.ModelRotation default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class ModelRoughness {
    ctor public ModelRoughness(com.mapbox.bindgen.Value value);
    ctor public ModelRoughness(double value);
    ctor public ModelRoughness(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.ModelRoughness copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.ModelRoughness.Companion Companion;
  }

  public static final class ModelRoughness.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.ModelRoughness getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.ModelRoughness default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class ModelScale {
    ctor public ModelScale(com.mapbox.bindgen.Value value);
    ctor public ModelScale(java.util.List<java.lang.Double> value);
    ctor public ModelScale(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.ModelScale copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.ModelScale.Companion Companion;
  }

  public static final class ModelScale.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.ModelScale getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.ModelScale default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class ModelScaleMode {
    ctor public ModelScaleMode(com.mapbox.bindgen.Value value);
    ctor public ModelScaleMode(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.ModelScaleMode copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.ModelScaleMode.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.ModelScaleMode MAP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.ModelScaleMode VIEWPORT;
  }

  public static final class ModelScaleMode.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.ModelScaleMode getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.ModelScaleMode default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class ModelTranslation {
    ctor public ModelTranslation(com.mapbox.bindgen.Value value);
    ctor public ModelTranslation(java.util.List<java.lang.Double> value);
    ctor public ModelTranslation(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.ModelTranslation copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.ModelTranslation.Companion Companion;
  }

  public static final class ModelTranslation.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.ModelTranslation getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.ModelTranslation default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class ModelType {
    ctor public ModelType(com.mapbox.bindgen.Value value);
    ctor public ModelType(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.ModelType copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.ModelType COMMON_3D;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.ModelType.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.ModelType LOCATION_INDICATOR;
  }

  public static final class ModelType.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.ModelType getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.ModelType default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class PerspectiveCompensation {
    ctor public PerspectiveCompensation(com.mapbox.bindgen.Value value);
    ctor public PerspectiveCompensation(double value);
    ctor public PerspectiveCompensation(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.PerspectiveCompensation copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.PerspectiveCompensation.Companion Companion;
  }

  public static final class PerspectiveCompensation.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.PerspectiveCompensation getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.PerspectiveCompensation default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class RasterArrayBand {
    ctor public RasterArrayBand(com.mapbox.bindgen.Value value);
    ctor public RasterArrayBand(String value);
    ctor public RasterArrayBand(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.RasterArrayBand copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.RasterArrayBand.Companion Companion;
  }

  public static final class RasterArrayBand.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.RasterArrayBand getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.RasterArrayBand default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class RasterBrightnessMax {
    ctor public RasterBrightnessMax(com.mapbox.bindgen.Value value);
    ctor public RasterBrightnessMax(double value);
    ctor public RasterBrightnessMax(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.RasterBrightnessMax copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.RasterBrightnessMax.Companion Companion;
  }

  public static final class RasterBrightnessMax.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.RasterBrightnessMax getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.RasterBrightnessMax default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class RasterBrightnessMin {
    ctor public RasterBrightnessMin(com.mapbox.bindgen.Value value);
    ctor public RasterBrightnessMin(double value);
    ctor public RasterBrightnessMin(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.RasterBrightnessMin copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.RasterBrightnessMin.Companion Companion;
  }

  public static final class RasterBrightnessMin.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.RasterBrightnessMin getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.RasterBrightnessMin default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class RasterColor {
    ctor public RasterColor(com.mapbox.bindgen.Value value);
    ctor public RasterColor(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.RasterColor copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.RasterColor.Companion Companion;
  }

  public static final class RasterColor.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.RasterColor getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.RasterColor default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class RasterColorMix {
    ctor public RasterColorMix(com.mapbox.bindgen.Value value);
    ctor public RasterColorMix(java.util.List<java.lang.Double> value);
    ctor public RasterColorMix(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.RasterColorMix copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.RasterColorMix.Companion Companion;
  }

  public static final class RasterColorMix.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.RasterColorMix getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.RasterColorMix default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class RasterColorRange {
    ctor public RasterColorRange(com.mapbox.bindgen.Value value);
    ctor public RasterColorRange(java.util.List<java.lang.Double> value);
    ctor public RasterColorRange(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.RasterColorRange copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.RasterColorRange.Companion Companion;
  }

  public static final class RasterColorRange.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.RasterColorRange getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.RasterColorRange default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class RasterContrast {
    ctor public RasterContrast(com.mapbox.bindgen.Value value);
    ctor public RasterContrast(double value);
    ctor public RasterContrast(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.RasterContrast copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.RasterContrast.Companion Companion;
  }

  public static final class RasterContrast.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.RasterContrast getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.RasterContrast default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class RasterElevation {
    ctor public RasterElevation(com.mapbox.bindgen.Value value);
    ctor public RasterElevation(double value);
    ctor public RasterElevation(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.RasterElevation copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.RasterElevation.Companion Companion;
  }

  public static final class RasterElevation.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.RasterElevation getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.RasterElevation default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class RasterEmissiveStrength {
    ctor public RasterEmissiveStrength(com.mapbox.bindgen.Value value);
    ctor public RasterEmissiveStrength(double value);
    ctor public RasterEmissiveStrength(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.RasterEmissiveStrength copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.RasterEmissiveStrength.Companion Companion;
  }

  public static final class RasterEmissiveStrength.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.RasterEmissiveStrength getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.RasterEmissiveStrength default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class RasterFadeDuration {
    ctor public RasterFadeDuration(com.mapbox.bindgen.Value value);
    ctor public RasterFadeDuration(double value);
    ctor public RasterFadeDuration(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.RasterFadeDuration copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.RasterFadeDuration.Companion Companion;
  }

  public static final class RasterFadeDuration.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.RasterFadeDuration getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.RasterFadeDuration default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class RasterHueRotate {
    ctor public RasterHueRotate(com.mapbox.bindgen.Value value);
    ctor public RasterHueRotate(double value);
    ctor public RasterHueRotate(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.RasterHueRotate copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.RasterHueRotate.Companion Companion;
  }

  public static final class RasterHueRotate.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.RasterHueRotate getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.RasterHueRotate default;
  }

  public final class RasterLayerKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void RasterLayer(String layerId, String sourceId, com.mapbox.maps.extension.compose.style.layers.generated.RasterArrayBand rasterArrayBand = RasterArrayBand.default, com.mapbox.maps.extension.compose.style.layers.generated.RasterBrightnessMax rasterBrightnessMax = RasterBrightnessMax.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition rasterBrightnessMaxTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.RasterBrightnessMin rasterBrightnessMin = RasterBrightnessMin.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition rasterBrightnessMinTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.RasterColor rasterColor = RasterColor.default, com.mapbox.maps.extension.compose.style.layers.generated.RasterColorMix rasterColorMix = RasterColorMix.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition rasterColorMixTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.RasterColorRange rasterColorRange = RasterColorRange.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition rasterColorRangeTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.RasterContrast rasterContrast = RasterContrast.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition rasterContrastTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.RasterElevation rasterElevation = RasterElevation.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition rasterElevationTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.RasterEmissiveStrength rasterEmissiveStrength = RasterEmissiveStrength.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition rasterEmissiveStrengthTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.RasterFadeDuration rasterFadeDuration = RasterFadeDuration.default, com.mapbox.maps.extension.compose.style.layers.generated.RasterHueRotate rasterHueRotate = RasterHueRotate.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition rasterHueRotateTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.RasterOpacity rasterOpacity = RasterOpacity.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition rasterOpacityTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.RasterResampling rasterResampling = RasterResampling.default, com.mapbox.maps.extension.compose.style.layers.generated.RasterSaturation rasterSaturation = RasterSaturation.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition rasterSaturationTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.Visibility visibility = Visibility.default, com.mapbox.maps.extension.compose.style.layers.generated.MinZoom minZoom = MinZoom.default, com.mapbox.maps.extension.compose.style.layers.generated.MaxZoom maxZoom = MaxZoom.default, com.mapbox.maps.extension.compose.style.layers.generated.SourceLayer sourceLayer = SourceLayer.default, com.mapbox.maps.extension.compose.style.layers.generated.Filter filter = Filter.default);
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class RasterOpacity {
    ctor public RasterOpacity(com.mapbox.bindgen.Value value);
    ctor public RasterOpacity(double value);
    ctor public RasterOpacity(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.RasterOpacity copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.RasterOpacity.Companion Companion;
  }

  public static final class RasterOpacity.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.RasterOpacity getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.RasterOpacity default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class RasterResampling {
    ctor public RasterResampling(com.mapbox.bindgen.Value value);
    ctor public RasterResampling(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.RasterResampling copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.RasterResampling.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.RasterResampling LINEAR;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.RasterResampling NEAREST;
  }

  public static final class RasterResampling.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.RasterResampling getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.RasterResampling default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class RasterSaturation {
    ctor public RasterSaturation(com.mapbox.bindgen.Value value);
    ctor public RasterSaturation(double value);
    ctor public RasterSaturation(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.RasterSaturation copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.RasterSaturation.Companion Companion;
  }

  public static final class RasterSaturation.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.RasterSaturation getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.RasterSaturation default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class ShadowImage {
    ctor public ShadowImage(com.mapbox.bindgen.Value value);
    ctor public ShadowImage(String value);
    ctor public ShadowImage(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.ShadowImage copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.ShadowImage.Companion Companion;
  }

  public static final class ShadowImage.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.ShadowImage getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.ShadowImage default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class ShadowImageSize {
    ctor public ShadowImageSize(com.mapbox.bindgen.Value value);
    ctor public ShadowImageSize(double value);
    ctor public ShadowImageSize(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.ShadowImageSize copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.ShadowImageSize.Companion Companion;
  }

  public static final class ShadowImageSize.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.ShadowImageSize getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.ShadowImageSize default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class SkyAtmosphereColor {
    ctor public SkyAtmosphereColor(com.mapbox.bindgen.Value value);
    ctor public SkyAtmosphereColor(long value);
    ctor public SkyAtmosphereColor(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.SkyAtmosphereColor copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SkyAtmosphereColor.Companion Companion;
  }

  public static final class SkyAtmosphereColor.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.SkyAtmosphereColor getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.SkyAtmosphereColor default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class SkyAtmosphereHaloColor {
    ctor public SkyAtmosphereHaloColor(com.mapbox.bindgen.Value value);
    ctor public SkyAtmosphereHaloColor(long value);
    ctor public SkyAtmosphereHaloColor(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.SkyAtmosphereHaloColor copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SkyAtmosphereHaloColor.Companion Companion;
  }

  public static final class SkyAtmosphereHaloColor.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.SkyAtmosphereHaloColor getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.SkyAtmosphereHaloColor default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class SkyAtmosphereSun {
    ctor public SkyAtmosphereSun(com.mapbox.bindgen.Value value);
    ctor public SkyAtmosphereSun(java.util.List<java.lang.Double> value);
    ctor public SkyAtmosphereSun(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.SkyAtmosphereSun copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SkyAtmosphereSun.Companion Companion;
  }

  public static final class SkyAtmosphereSun.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.SkyAtmosphereSun getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.SkyAtmosphereSun default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class SkyAtmosphereSunIntensity {
    ctor public SkyAtmosphereSunIntensity(com.mapbox.bindgen.Value value);
    ctor public SkyAtmosphereSunIntensity(double value);
    ctor public SkyAtmosphereSunIntensity(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.SkyAtmosphereSunIntensity copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SkyAtmosphereSunIntensity.Companion Companion;
  }

  public static final class SkyAtmosphereSunIntensity.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.SkyAtmosphereSunIntensity getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.SkyAtmosphereSunIntensity default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class SkyGradient {
    ctor public SkyGradient(com.mapbox.bindgen.Value value);
    ctor public SkyGradient(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.SkyGradient copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SkyGradient.Companion Companion;
  }

  public static final class SkyGradient.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.SkyGradient getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.SkyGradient default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class SkyGradientCenter {
    ctor public SkyGradientCenter(com.mapbox.bindgen.Value value);
    ctor public SkyGradientCenter(java.util.List<java.lang.Double> value);
    ctor public SkyGradientCenter(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.SkyGradientCenter copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SkyGradientCenter.Companion Companion;
  }

  public static final class SkyGradientCenter.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.SkyGradientCenter getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.SkyGradientCenter default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class SkyGradientRadius {
    ctor public SkyGradientRadius(com.mapbox.bindgen.Value value);
    ctor public SkyGradientRadius(double value);
    ctor public SkyGradientRadius(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.SkyGradientRadius copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SkyGradientRadius.Companion Companion;
  }

  public static final class SkyGradientRadius.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.SkyGradientRadius getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.SkyGradientRadius default;
  }

  public final class SkyLayerKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void SkyLayer(String layerId, com.mapbox.maps.extension.compose.style.layers.generated.SkyAtmosphereColor skyAtmosphereColor = SkyAtmosphereColor.default, com.mapbox.maps.extension.compose.style.layers.generated.SkyAtmosphereHaloColor skyAtmosphereHaloColor = SkyAtmosphereHaloColor.default, com.mapbox.maps.extension.compose.style.layers.generated.SkyAtmosphereSun skyAtmosphereSun = SkyAtmosphereSun.default, com.mapbox.maps.extension.compose.style.layers.generated.SkyAtmosphereSunIntensity skyAtmosphereSunIntensity = SkyAtmosphereSunIntensity.default, com.mapbox.maps.extension.compose.style.layers.generated.SkyGradient skyGradient = SkyGradient.default, com.mapbox.maps.extension.compose.style.layers.generated.SkyGradientCenter skyGradientCenter = SkyGradientCenter.default, com.mapbox.maps.extension.compose.style.layers.generated.SkyGradientRadius skyGradientRadius = SkyGradientRadius.default, com.mapbox.maps.extension.compose.style.layers.generated.SkyOpacity skyOpacity = SkyOpacity.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition skyOpacityTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.SkyType skyType = SkyType.default, com.mapbox.maps.extension.compose.style.layers.generated.Visibility visibility = Visibility.default, com.mapbox.maps.extension.compose.style.layers.generated.MinZoom minZoom = MinZoom.default, com.mapbox.maps.extension.compose.style.layers.generated.MaxZoom maxZoom = MaxZoom.default, com.mapbox.maps.extension.compose.style.layers.generated.SourceLayer sourceLayer = SourceLayer.default, com.mapbox.maps.extension.compose.style.layers.generated.Filter filter = Filter.default);
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class SkyOpacity {
    ctor public SkyOpacity(com.mapbox.bindgen.Value value);
    ctor public SkyOpacity(double value);
    ctor public SkyOpacity(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.SkyOpacity copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SkyOpacity.Companion Companion;
  }

  public static final class SkyOpacity.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.SkyOpacity getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.SkyOpacity default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class SkyType {
    ctor public SkyType(com.mapbox.bindgen.Value value);
    ctor public SkyType(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.SkyType copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SkyType ATMOSPHERE;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SkyType.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SkyType GRADIENT;
  }

  public static final class SkyType.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.SkyType getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.SkyType default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class SourceLayer {
    ctor public SourceLayer(com.mapbox.bindgen.Value value);
    ctor public SourceLayer(String value);
    ctor public SourceLayer(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.SourceLayer copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SourceLayer.Companion Companion;
  }

  public static final class SourceLayer.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.SourceLayer getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.SourceLayer default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class SymbolAvoidEdges {
    ctor public SymbolAvoidEdges(com.mapbox.bindgen.Value value);
    ctor public SymbolAvoidEdges(boolean value);
    ctor public SymbolAvoidEdges(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.SymbolAvoidEdges copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SymbolAvoidEdges.Companion Companion;
  }

  public static final class SymbolAvoidEdges.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.SymbolAvoidEdges getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.SymbolAvoidEdges default;
  }

  public final class SymbolLayerKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void SymbolLayer(String layerId, String sourceId, com.mapbox.maps.extension.compose.style.layers.generated.IconAllowOverlap iconAllowOverlap = IconAllowOverlap.default, com.mapbox.maps.extension.compose.style.layers.generated.IconAnchor iconAnchor = IconAnchor.default, com.mapbox.maps.extension.compose.style.layers.generated.IconIgnorePlacement iconIgnorePlacement = IconIgnorePlacement.default, com.mapbox.maps.extension.compose.style.layers.generated.IconImage iconImage = IconImage.default, com.mapbox.maps.extension.compose.style.layers.generated.IconKeepUpright iconKeepUpright = IconKeepUpright.default, com.mapbox.maps.extension.compose.style.layers.generated.IconOffset iconOffset = IconOffset.default, com.mapbox.maps.extension.compose.style.layers.generated.IconOptional iconOptional = IconOptional.default, com.mapbox.maps.extension.compose.style.layers.generated.IconPadding iconPadding = IconPadding.default, com.mapbox.maps.extension.compose.style.layers.generated.IconPitchAlignment iconPitchAlignment = IconPitchAlignment.default, com.mapbox.maps.extension.compose.style.layers.generated.IconRotate iconRotate = IconRotate.default, com.mapbox.maps.extension.compose.style.layers.generated.IconRotationAlignment iconRotationAlignment = IconRotationAlignment.default, com.mapbox.maps.extension.compose.style.layers.generated.IconSize iconSize = IconSize.default, com.mapbox.maps.extension.compose.style.layers.generated.IconTextFit iconTextFit = IconTextFit.default, com.mapbox.maps.extension.compose.style.layers.generated.IconTextFitPadding iconTextFitPadding = IconTextFitPadding.default, com.mapbox.maps.extension.compose.style.layers.generated.SymbolAvoidEdges symbolAvoidEdges = SymbolAvoidEdges.default, com.mapbox.maps.extension.compose.style.layers.generated.SymbolPlacement symbolPlacement = SymbolPlacement.default, com.mapbox.maps.extension.compose.style.layers.generated.SymbolSortKey symbolSortKey = SymbolSortKey.default, com.mapbox.maps.extension.compose.style.layers.generated.SymbolSpacing symbolSpacing = SymbolSpacing.default, com.mapbox.maps.extension.compose.style.layers.generated.SymbolZElevate symbolZElevate = SymbolZElevate.default, com.mapbox.maps.extension.compose.style.layers.generated.SymbolZOrder symbolZOrder = SymbolZOrder.default, com.mapbox.maps.extension.compose.style.layers.generated.TextAllowOverlap textAllowOverlap = TextAllowOverlap.default, com.mapbox.maps.extension.compose.style.layers.generated.TextAnchor textAnchor = TextAnchor.default, com.mapbox.maps.extension.compose.style.layers.generated.TextField textField = TextField.default, com.mapbox.maps.extension.compose.style.layers.generated.TextFont textFont = TextFont.default, com.mapbox.maps.extension.compose.style.layers.generated.TextIgnorePlacement textIgnorePlacement = TextIgnorePlacement.default, com.mapbox.maps.extension.compose.style.layers.generated.TextJustify textJustify = TextJustify.default, com.mapbox.maps.extension.compose.style.layers.generated.TextKeepUpright textKeepUpright = TextKeepUpright.default, com.mapbox.maps.extension.compose.style.layers.generated.TextLetterSpacing textLetterSpacing = TextLetterSpacing.default, com.mapbox.maps.extension.compose.style.layers.generated.TextLineHeight textLineHeight = TextLineHeight.default, com.mapbox.maps.extension.compose.style.layers.generated.TextMaxAngle textMaxAngle = TextMaxAngle.default, com.mapbox.maps.extension.compose.style.layers.generated.TextMaxWidth textMaxWidth = TextMaxWidth.default, com.mapbox.maps.extension.compose.style.layers.generated.TextOffset textOffset = TextOffset.default, com.mapbox.maps.extension.compose.style.layers.generated.TextOptional textOptional = TextOptional.default, com.mapbox.maps.extension.compose.style.layers.generated.TextPadding textPadding = TextPadding.default, com.mapbox.maps.extension.compose.style.layers.generated.TextPitchAlignment textPitchAlignment = TextPitchAlignment.default, com.mapbox.maps.extension.compose.style.layers.generated.TextRadialOffset textRadialOffset = TextRadialOffset.default, com.mapbox.maps.extension.compose.style.layers.generated.TextRotate textRotate = TextRotate.default, com.mapbox.maps.extension.compose.style.layers.generated.TextRotationAlignment textRotationAlignment = TextRotationAlignment.default, com.mapbox.maps.extension.compose.style.layers.generated.TextSize textSize = TextSize.default, com.mapbox.maps.extension.compose.style.layers.generated.TextTransform textTransform = TextTransform.default, com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchor textVariableAnchor = TextVariableAnchor.default, com.mapbox.maps.extension.compose.style.layers.generated.TextWritingMode textWritingMode = TextWritingMode.default, com.mapbox.maps.extension.compose.style.layers.generated.IconColor iconColor = IconColor.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition iconColorTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.IconColorSaturation iconColorSaturation = IconColorSaturation.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition iconColorSaturationTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.IconEmissiveStrength iconEmissiveStrength = IconEmissiveStrength.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition iconEmissiveStrengthTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.IconHaloBlur iconHaloBlur = IconHaloBlur.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition iconHaloBlurTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.IconHaloColor iconHaloColor = IconHaloColor.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition iconHaloColorTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.IconHaloWidth iconHaloWidth = IconHaloWidth.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition iconHaloWidthTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.IconImageCrossFade iconImageCrossFade = IconImageCrossFade.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition iconImageCrossFadeTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.IconOpacity iconOpacity = IconOpacity.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition iconOpacityTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.IconTranslate iconTranslate = IconTranslate.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition iconTranslateTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.IconTranslateAnchor iconTranslateAnchor = IconTranslateAnchor.default, com.mapbox.maps.extension.compose.style.layers.generated.TextColor textColor = TextColor.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition textColorTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.TextEmissiveStrength textEmissiveStrength = TextEmissiveStrength.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition textEmissiveStrengthTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.TextHaloBlur textHaloBlur = TextHaloBlur.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition textHaloBlurTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.TextHaloColor textHaloColor = TextHaloColor.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition textHaloColorTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.TextHaloWidth textHaloWidth = TextHaloWidth.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition textHaloWidthTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.TextOpacity textOpacity = TextOpacity.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition textOpacityTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.TextTranslate textTranslate = TextTranslate.default, com.mapbox.maps.extension.compose.style.layers.generated.Transition textTranslateTransition = Transition.default, com.mapbox.maps.extension.compose.style.layers.generated.TextTranslateAnchor textTranslateAnchor = TextTranslateAnchor.default, com.mapbox.maps.extension.compose.style.layers.generated.Visibility visibility = Visibility.default, com.mapbox.maps.extension.compose.style.layers.generated.MinZoom minZoom = MinZoom.default, com.mapbox.maps.extension.compose.style.layers.generated.MaxZoom maxZoom = MaxZoom.default, com.mapbox.maps.extension.compose.style.layers.generated.SourceLayer sourceLayer = SourceLayer.default, com.mapbox.maps.extension.compose.style.layers.generated.Filter filter = Filter.default);
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class SymbolPlacement {
    ctor public SymbolPlacement(com.mapbox.bindgen.Value value);
    ctor public SymbolPlacement(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.SymbolPlacement copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SymbolPlacement.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SymbolPlacement LINE;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SymbolPlacement LINE_CENTER;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SymbolPlacement POINT;
  }

  public static final class SymbolPlacement.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.SymbolPlacement getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.SymbolPlacement default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class SymbolSortKey {
    ctor public SymbolSortKey(com.mapbox.bindgen.Value value);
    ctor public SymbolSortKey(double value);
    ctor public SymbolSortKey(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.SymbolSortKey copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SymbolSortKey.Companion Companion;
  }

  public static final class SymbolSortKey.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.SymbolSortKey getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.SymbolSortKey default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class SymbolSpacing {
    ctor public SymbolSpacing(com.mapbox.bindgen.Value value);
    ctor public SymbolSpacing(double value);
    ctor public SymbolSpacing(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.SymbolSpacing copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SymbolSpacing.Companion Companion;
  }

  public static final class SymbolSpacing.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.SymbolSpacing getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.SymbolSpacing default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class SymbolZElevate {
    ctor public SymbolZElevate(com.mapbox.bindgen.Value value);
    ctor public SymbolZElevate(boolean value);
    ctor public SymbolZElevate(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.SymbolZElevate copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SymbolZElevate.Companion Companion;
  }

  public static final class SymbolZElevate.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.SymbolZElevate getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.SymbolZElevate default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class SymbolZOrder {
    ctor public SymbolZOrder(com.mapbox.bindgen.Value value);
    ctor public SymbolZOrder(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.SymbolZOrder copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SymbolZOrder AUTO;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SymbolZOrder.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SymbolZOrder SOURCE;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SymbolZOrder VIEWPORT_Y;
  }

  public static final class SymbolZOrder.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.SymbolZOrder getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.SymbolZOrder default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TextAllowOverlap {
    ctor public TextAllowOverlap(com.mapbox.bindgen.Value value);
    ctor public TextAllowOverlap(boolean value);
    ctor public TextAllowOverlap(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextAllowOverlap copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextAllowOverlap.Companion Companion;
  }

  public static final class TextAllowOverlap.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextAllowOverlap getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.TextAllowOverlap default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TextAnchor {
    ctor public TextAnchor(com.mapbox.bindgen.Value value);
    ctor public TextAnchor(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextAnchor copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextAnchor BOTTOM;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextAnchor BOTTOM_LEFT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextAnchor BOTTOM_RIGHT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextAnchor CENTER;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextAnchor.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextAnchor LEFT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextAnchor RIGHT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextAnchor TOP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextAnchor TOP_LEFT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextAnchor TOP_RIGHT;
  }

  public static final class TextAnchor.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextAnchor getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.TextAnchor default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TextColor {
    ctor public TextColor(com.mapbox.bindgen.Value value);
    ctor public TextColor(long value);
    ctor public TextColor(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextColor copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextColor.Companion Companion;
  }

  public static final class TextColor.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextColor getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.TextColor default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TextEmissiveStrength {
    ctor public TextEmissiveStrength(com.mapbox.bindgen.Value value);
    ctor public TextEmissiveStrength(double value);
    ctor public TextEmissiveStrength(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextEmissiveStrength copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextEmissiveStrength.Companion Companion;
  }

  public static final class TextEmissiveStrength.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextEmissiveStrength getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.TextEmissiveStrength default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TextField {
    ctor public TextField(com.mapbox.bindgen.Value value);
    ctor public TextField(String value);
    ctor public TextField(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextField copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextField.Companion Companion;
  }

  public static final class TextField.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextField getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.TextField default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TextFont {
    ctor public TextFont(com.mapbox.bindgen.Value value);
    ctor public TextFont(java.util.List<java.lang.String> value);
    ctor public TextFont(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextFont copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextFont.Companion Companion;
  }

  public static final class TextFont.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextFont getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.TextFont default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TextHaloBlur {
    ctor public TextHaloBlur(com.mapbox.bindgen.Value value);
    ctor public TextHaloBlur(double value);
    ctor public TextHaloBlur(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextHaloBlur copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextHaloBlur.Companion Companion;
  }

  public static final class TextHaloBlur.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextHaloBlur getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.TextHaloBlur default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TextHaloColor {
    ctor public TextHaloColor(com.mapbox.bindgen.Value value);
    ctor public TextHaloColor(long value);
    ctor public TextHaloColor(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextHaloColor copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextHaloColor.Companion Companion;
  }

  public static final class TextHaloColor.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextHaloColor getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.TextHaloColor default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TextHaloWidth {
    ctor public TextHaloWidth(com.mapbox.bindgen.Value value);
    ctor public TextHaloWidth(double value);
    ctor public TextHaloWidth(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextHaloWidth copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextHaloWidth.Companion Companion;
  }

  public static final class TextHaloWidth.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextHaloWidth getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.TextHaloWidth default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TextIgnorePlacement {
    ctor public TextIgnorePlacement(com.mapbox.bindgen.Value value);
    ctor public TextIgnorePlacement(boolean value);
    ctor public TextIgnorePlacement(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextIgnorePlacement copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextIgnorePlacement.Companion Companion;
  }

  public static final class TextIgnorePlacement.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextIgnorePlacement getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.TextIgnorePlacement default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TextJustify {
    ctor public TextJustify(com.mapbox.bindgen.Value value);
    ctor public TextJustify(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextJustify copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextJustify AUTO;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextJustify CENTER;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextJustify.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextJustify LEFT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextJustify RIGHT;
  }

  public static final class TextJustify.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextJustify getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.TextJustify default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TextKeepUpright {
    ctor public TextKeepUpright(com.mapbox.bindgen.Value value);
    ctor public TextKeepUpright(boolean value);
    ctor public TextKeepUpright(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextKeepUpright copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextKeepUpright.Companion Companion;
  }

  public static final class TextKeepUpright.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextKeepUpright getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.TextKeepUpright default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TextLetterSpacing {
    ctor public TextLetterSpacing(com.mapbox.bindgen.Value value);
    ctor public TextLetterSpacing(double value);
    ctor public TextLetterSpacing(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextLetterSpacing copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextLetterSpacing.Companion Companion;
  }

  public static final class TextLetterSpacing.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextLetterSpacing getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.TextLetterSpacing default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TextLineHeight {
    ctor public TextLineHeight(com.mapbox.bindgen.Value value);
    ctor public TextLineHeight(double value);
    ctor public TextLineHeight(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextLineHeight copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextLineHeight.Companion Companion;
  }

  public static final class TextLineHeight.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextLineHeight getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.TextLineHeight default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TextMaxAngle {
    ctor public TextMaxAngle(com.mapbox.bindgen.Value value);
    ctor public TextMaxAngle(double value);
    ctor public TextMaxAngle(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextMaxAngle copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextMaxAngle.Companion Companion;
  }

  public static final class TextMaxAngle.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextMaxAngle getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.TextMaxAngle default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TextMaxWidth {
    ctor public TextMaxWidth(com.mapbox.bindgen.Value value);
    ctor public TextMaxWidth(double value);
    ctor public TextMaxWidth(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextMaxWidth copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextMaxWidth.Companion Companion;
  }

  public static final class TextMaxWidth.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextMaxWidth getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.TextMaxWidth default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TextOffset {
    ctor public TextOffset(com.mapbox.bindgen.Value value);
    ctor public TextOffset(java.util.List<java.lang.Double> value);
    ctor public TextOffset(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextOffset copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextOffset.Companion Companion;
  }

  public static final class TextOffset.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextOffset getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.TextOffset default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TextOpacity {
    ctor public TextOpacity(com.mapbox.bindgen.Value value);
    ctor public TextOpacity(double value);
    ctor public TextOpacity(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextOpacity copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextOpacity.Companion Companion;
  }

  public static final class TextOpacity.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextOpacity getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.TextOpacity default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TextOptional {
    ctor public TextOptional(com.mapbox.bindgen.Value value);
    ctor public TextOptional(boolean value);
    ctor public TextOptional(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextOptional copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextOptional.Companion Companion;
  }

  public static final class TextOptional.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextOptional getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.TextOptional default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TextPadding {
    ctor public TextPadding(com.mapbox.bindgen.Value value);
    ctor public TextPadding(double value);
    ctor public TextPadding(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextPadding copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextPadding.Companion Companion;
  }

  public static final class TextPadding.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextPadding getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.TextPadding default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TextPitchAlignment {
    ctor public TextPitchAlignment(com.mapbox.bindgen.Value value);
    ctor public TextPitchAlignment(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextPitchAlignment copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextPitchAlignment AUTO;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextPitchAlignment.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextPitchAlignment MAP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextPitchAlignment VIEWPORT;
  }

  public static final class TextPitchAlignment.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextPitchAlignment getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.TextPitchAlignment default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TextRadialOffset {
    ctor public TextRadialOffset(com.mapbox.bindgen.Value value);
    ctor public TextRadialOffset(double value);
    ctor public TextRadialOffset(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextRadialOffset copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextRadialOffset.Companion Companion;
  }

  public static final class TextRadialOffset.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextRadialOffset getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.TextRadialOffset default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TextRotate {
    ctor public TextRotate(com.mapbox.bindgen.Value value);
    ctor public TextRotate(double value);
    ctor public TextRotate(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextRotate copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextRotate.Companion Companion;
  }

  public static final class TextRotate.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextRotate getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.TextRotate default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TextRotationAlignment {
    ctor public TextRotationAlignment(com.mapbox.bindgen.Value value);
    ctor public TextRotationAlignment(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextRotationAlignment copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextRotationAlignment AUTO;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextRotationAlignment.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextRotationAlignment MAP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextRotationAlignment VIEWPORT;
  }

  public static final class TextRotationAlignment.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextRotationAlignment getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.TextRotationAlignment default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TextSize {
    ctor public TextSize(com.mapbox.bindgen.Value value);
    ctor public TextSize(double value);
    ctor public TextSize(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextSize copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextSize.Companion Companion;
  }

  public static final class TextSize.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextSize getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.TextSize default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TextTransform {
    ctor public TextTransform(com.mapbox.bindgen.Value value);
    ctor public TextTransform(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextTransform copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextTransform.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextTransform LOWERCASE;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextTransform NONE;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextTransform UPPERCASE;
  }

  public static final class TextTransform.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextTransform getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.TextTransform default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TextTranslate {
    ctor public TextTranslate(com.mapbox.bindgen.Value value);
    ctor public TextTranslate(java.util.List<java.lang.Double> value);
    ctor public TextTranslate(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextTranslate copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextTranslate.Companion Companion;
  }

  public static final class TextTranslate.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextTranslate getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.TextTranslate default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TextTranslateAnchor {
    ctor public TextTranslateAnchor(com.mapbox.bindgen.Value value);
    ctor public TextTranslateAnchor(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextTranslateAnchor copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextTranslateAnchor.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextTranslateAnchor MAP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextTranslateAnchor VIEWPORT;
  }

  public static final class TextTranslateAnchor.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextTranslateAnchor getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.TextTranslateAnchor default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TextVariableAnchor {
    ctor public TextVariableAnchor(com.mapbox.bindgen.Value value);
    ctor public TextVariableAnchor(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchor copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchor BOTTOM;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchor BOTTOM_LEFT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchor BOTTOM_RIGHT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchor CENTER;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchor.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchor LEFT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchor RIGHT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchor TOP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchor TOP_LEFT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchor TOP_RIGHT;
  }

  public static final class TextVariableAnchor.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchor getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchor default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TextWritingMode {
    ctor public TextWritingMode(com.mapbox.bindgen.Value value);
    ctor public TextWritingMode(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextWritingMode copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextWritingMode.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextWritingMode HORIZONTAL;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextWritingMode VERTICAL;
  }

  public static final class TextWritingMode.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextWritingMode getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.TextWritingMode default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TopImage {
    ctor public TopImage(com.mapbox.bindgen.Value value);
    ctor public TopImage(String value);
    ctor public TopImage(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TopImage copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TopImage.Companion Companion;
  }

  public static final class TopImage.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.TopImage getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.TopImage default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TopImageSize {
    ctor public TopImageSize(com.mapbox.bindgen.Value value);
    ctor public TopImageSize(double value);
    ctor public TopImageSize(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TopImageSize copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TopImageSize.Companion Companion;
  }

  public static final class TopImageSize.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.TopImageSize getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.TopImageSize default;
  }

  public final class Transition {
    ctor public Transition(long duration = 0L, long delay = 0L);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.Transition copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.Transition.Companion Companion;
  }

  public static final class Transition.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.Transition getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.Transition default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class Visibility {
    ctor public Visibility(com.mapbox.bindgen.Value value);
    ctor public Visibility(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.Visibility copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.Visibility.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.Visibility NONE;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.Visibility VISIBLE;
  }

  public static final class Visibility.Companion {
    method public com.mapbox.maps.extension.compose.style.layers.generated.Visibility getDefault();
    property public final com.mapbox.maps.extension.compose.style.layers.generated.Visibility default;
  }

}

package com.mapbox.maps.extension.compose.style.sources.generated {

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class Attribution {
    ctor public Attribution(com.mapbox.bindgen.Value value);
    ctor public Attribution(String value);
    ctor public Attribution(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.sources.generated.Attribution copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.Attribution.Companion Companion;
  }

  public static final class Attribution.Companion {
    method public com.mapbox.maps.extension.compose.style.sources.generated.Attribution getDefault();
    property public final com.mapbox.maps.extension.compose.style.sources.generated.Attribution default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class Bounds {
    ctor public Bounds(com.mapbox.bindgen.Value value);
    ctor public Bounds(java.util.List<java.lang.Double> value);
    ctor public Bounds(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.sources.generated.Bounds copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.Bounds.Companion Companion;
  }

  public static final class Bounds.Companion {
    method public com.mapbox.maps.extension.compose.style.sources.generated.Bounds getDefault();
    property public final com.mapbox.maps.extension.compose.style.sources.generated.Bounds default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class Buffer {
    ctor public Buffer(com.mapbox.bindgen.Value value);
    ctor public Buffer(long value);
    ctor public Buffer(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.sources.generated.Buffer copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.Buffer.Companion Companion;
  }

  public static final class Buffer.Companion {
    method public com.mapbox.maps.extension.compose.style.sources.generated.Buffer getDefault();
    property public final com.mapbox.maps.extension.compose.style.sources.generated.Buffer default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class Cluster {
    ctor public Cluster(com.mapbox.bindgen.Value value);
    ctor public Cluster(boolean value);
    ctor public Cluster(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.sources.generated.Cluster copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.Cluster.Companion Companion;
  }

  public static final class Cluster.Companion {
    method public com.mapbox.maps.extension.compose.style.sources.generated.Cluster getDefault();
    property public final com.mapbox.maps.extension.compose.style.sources.generated.Cluster default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class ClusterMaxZoom {
    ctor public ClusterMaxZoom(com.mapbox.bindgen.Value value);
    ctor public ClusterMaxZoom(long value);
    ctor public ClusterMaxZoom(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.sources.generated.ClusterMaxZoom copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.ClusterMaxZoom.Companion Companion;
  }

  public static final class ClusterMaxZoom.Companion {
    method public com.mapbox.maps.extension.compose.style.sources.generated.ClusterMaxZoom getDefault();
    property public final com.mapbox.maps.extension.compose.style.sources.generated.ClusterMaxZoom default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class ClusterProperties {
    ctor public ClusterProperties(com.mapbox.bindgen.Value value);
    ctor public ClusterProperties(java.util.HashMap<java.lang.String,java.lang.Object> value);
    ctor public ClusterProperties(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.sources.generated.ClusterProperties copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.ClusterProperties.Companion Companion;
  }

  public static final class ClusterProperties.Companion {
    method public com.mapbox.maps.extension.compose.style.sources.generated.ClusterProperties getDefault();
    property public final com.mapbox.maps.extension.compose.style.sources.generated.ClusterProperties default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class ClusterRadius {
    ctor public ClusterRadius(com.mapbox.bindgen.Value value);
    ctor public ClusterRadius(long value);
    ctor public ClusterRadius(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.sources.generated.ClusterRadius copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.ClusterRadius.Companion Companion;
  }

  public static final class ClusterRadius.Companion {
    method public com.mapbox.maps.extension.compose.style.sources.generated.ClusterRadius getDefault();
    property public final com.mapbox.maps.extension.compose.style.sources.generated.ClusterRadius default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class Coordinates {
    ctor public Coordinates(com.mapbox.bindgen.Value value);
    ctor public Coordinates(java.util.List<? extends java.util.List<java.lang.Double>> value);
    ctor public Coordinates(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.sources.generated.Coordinates copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.Coordinates.Companion Companion;
  }

  public static final class Coordinates.Companion {
    method public com.mapbox.maps.extension.compose.style.sources.generated.Coordinates getDefault();
    property public final com.mapbox.maps.extension.compose.style.sources.generated.Coordinates default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class Encoding {
    ctor public Encoding(com.mapbox.bindgen.Value value);
    ctor public Encoding(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.sources.generated.Encoding copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.Encoding.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.Encoding MAPBOX;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.Encoding TERRARIUM;
  }

  public static final class Encoding.Companion {
    method public com.mapbox.maps.extension.compose.style.sources.generated.Encoding getDefault();
    property public final com.mapbox.maps.extension.compose.style.sources.generated.Encoding default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class GenerateId {
    ctor public GenerateId(com.mapbox.bindgen.Value value);
    ctor public GenerateId(boolean value);
    ctor public GenerateId(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.sources.generated.GenerateId copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.GenerateId.Companion Companion;
  }

  public static final class GenerateId.Companion {
    method public com.mapbox.maps.extension.compose.style.sources.generated.GenerateId getDefault();
    property public final com.mapbox.maps.extension.compose.style.sources.generated.GenerateId default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class GeoJSONData {
    ctor public GeoJSONData(com.mapbox.maps.GeoJSONSourceData data);
    ctor public GeoJSONData(String value);
    ctor public GeoJSONData(com.mapbox.geojson.Feature value);
    ctor public GeoJSONData(java.util.List<com.mapbox.geojson.Feature> value);
    ctor public GeoJSONData(com.mapbox.geojson.Geometry value);
    method public com.mapbox.maps.extension.compose.style.sources.generated.GeoJSONData copy(com.mapbox.maps.GeoJSONSourceData data);
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.GeoJSONData.Companion Companion;
  }

  public static final class GeoJSONData.Companion {
    method public com.mapbox.maps.extension.compose.style.sources.generated.GeoJSONData getDefault();
    property public final com.mapbox.maps.extension.compose.style.sources.generated.GeoJSONData default;
  }

  public final class GeoJsonSourceKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void GeoJsonSource(String sourceId, com.mapbox.maps.extension.compose.style.sources.generated.GeoJSONData data = GeoJSONData.default, com.mapbox.maps.extension.compose.style.sources.generated.MaxZoom maxZoom = MaxZoom.default, com.mapbox.maps.extension.compose.style.sources.generated.Attribution attribution = Attribution.default, com.mapbox.maps.extension.compose.style.sources.generated.Buffer buffer = Buffer.default, com.mapbox.maps.extension.compose.style.sources.generated.Tolerance tolerance = Tolerance.default, com.mapbox.maps.extension.compose.style.sources.generated.Cluster cluster = Cluster.default, com.mapbox.maps.extension.compose.style.sources.generated.ClusterRadius clusterRadius = ClusterRadius.default, com.mapbox.maps.extension.compose.style.sources.generated.ClusterMaxZoom clusterMaxZoom = ClusterMaxZoom.default, com.mapbox.maps.extension.compose.style.sources.generated.ClusterProperties clusterProperties = ClusterProperties.default, com.mapbox.maps.extension.compose.style.sources.generated.LineMetrics lineMetrics = LineMetrics.default, com.mapbox.maps.extension.compose.style.sources.generated.GenerateId generateId = GenerateId.default, com.mapbox.maps.extension.compose.style.sources.generated.PromoteId promoteId = PromoteId.default, com.mapbox.maps.extension.compose.style.sources.generated.PrefetchZoomDelta prefetchZoomDelta = PrefetchZoomDelta.default, com.mapbox.maps.extension.compose.style.sources.generated.TileCacheBudget tileCacheBudget = TileCacheBudget.default);
  }

  public final class ImageSourceKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void ImageSource(String sourceId, com.mapbox.maps.extension.compose.style.sources.generated.Url url = Url.default, com.mapbox.maps.extension.compose.style.sources.generated.Coordinates coordinates = Coordinates.default, com.mapbox.maps.extension.compose.style.sources.generated.PrefetchZoomDelta prefetchZoomDelta = PrefetchZoomDelta.default);
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class LineMetrics {
    ctor public LineMetrics(com.mapbox.bindgen.Value value);
    ctor public LineMetrics(boolean value);
    ctor public LineMetrics(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.sources.generated.LineMetrics copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.LineMetrics.Companion Companion;
  }

  public static final class LineMetrics.Companion {
    method public com.mapbox.maps.extension.compose.style.sources.generated.LineMetrics getDefault();
    property public final com.mapbox.maps.extension.compose.style.sources.generated.LineMetrics default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class MaxOverscaleFactorForParentTiles {
    ctor public MaxOverscaleFactorForParentTiles(com.mapbox.bindgen.Value value);
    ctor public MaxOverscaleFactorForParentTiles(long value);
    ctor public MaxOverscaleFactorForParentTiles(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.sources.generated.MaxOverscaleFactorForParentTiles copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.MaxOverscaleFactorForParentTiles.Companion Companion;
  }

  public static final class MaxOverscaleFactorForParentTiles.Companion {
    method public com.mapbox.maps.extension.compose.style.sources.generated.MaxOverscaleFactorForParentTiles getDefault();
    property public final com.mapbox.maps.extension.compose.style.sources.generated.MaxOverscaleFactorForParentTiles default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class MaxZoom {
    ctor public MaxZoom(com.mapbox.bindgen.Value value);
    ctor public MaxZoom(long value);
    ctor public MaxZoom(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.sources.generated.MaxZoom copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.MaxZoom.Companion Companion;
  }

  public static final class MaxZoom.Companion {
    method public com.mapbox.maps.extension.compose.style.sources.generated.MaxZoom getDefault();
    property public final com.mapbox.maps.extension.compose.style.sources.generated.MaxZoom default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class MinZoom {
    ctor public MinZoom(com.mapbox.bindgen.Value value);
    ctor public MinZoom(long value);
    ctor public MinZoom(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.sources.generated.MinZoom copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.MinZoom.Companion Companion;
  }

  public static final class MinZoom.Companion {
    method public com.mapbox.maps.extension.compose.style.sources.generated.MinZoom getDefault();
    property public final com.mapbox.maps.extension.compose.style.sources.generated.MinZoom default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class MinimumTileUpdateInterval {
    ctor public MinimumTileUpdateInterval(com.mapbox.bindgen.Value value);
    ctor public MinimumTileUpdateInterval(double value);
    ctor public MinimumTileUpdateInterval(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.sources.generated.MinimumTileUpdateInterval copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.MinimumTileUpdateInterval.Companion Companion;
  }

  public static final class MinimumTileUpdateInterval.Companion {
    method public com.mapbox.maps.extension.compose.style.sources.generated.MinimumTileUpdateInterval getDefault();
    property public final com.mapbox.maps.extension.compose.style.sources.generated.MinimumTileUpdateInterval default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class PrefetchZoomDelta {
    ctor public PrefetchZoomDelta(com.mapbox.bindgen.Value value);
    ctor public PrefetchZoomDelta(long value);
    ctor public PrefetchZoomDelta(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.sources.generated.PrefetchZoomDelta copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.PrefetchZoomDelta.Companion Companion;
  }

  public static final class PrefetchZoomDelta.Companion {
    method public com.mapbox.maps.extension.compose.style.sources.generated.PrefetchZoomDelta getDefault();
    property public final com.mapbox.maps.extension.compose.style.sources.generated.PrefetchZoomDelta default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class PromoteId {
    ctor public PromoteId(com.mapbox.bindgen.Value value);
    ctor public PromoteId(com.mapbox.maps.extension.compose.style.sources.generated.PromoteId value);
    ctor public PromoteId(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.sources.generated.PromoteId copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.PromoteId.Companion Companion;
  }

  public static final class PromoteId.Companion {
    method public com.mapbox.maps.extension.compose.style.sources.generated.PromoteId getDefault();
    property public final com.mapbox.maps.extension.compose.style.sources.generated.PromoteId default;
  }

  public final class RasterArraySourceKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void RasterArraySource(String sourceId, com.mapbox.maps.extension.compose.style.sources.generated.Url url = Url.default, com.mapbox.maps.extension.compose.style.sources.generated.Tiles tiles = Tiles.default, com.mapbox.maps.extension.compose.style.sources.generated.Bounds bounds = Bounds.default, com.mapbox.maps.extension.compose.style.sources.generated.MinZoom minZoom = MinZoom.default, com.mapbox.maps.extension.compose.style.sources.generated.MaxZoom maxZoom = MaxZoom.default, com.mapbox.maps.extension.compose.style.sources.generated.TileSize tileSize = TileSize.default, com.mapbox.maps.extension.compose.style.sources.generated.Attribution attribution = Attribution.default, com.mapbox.maps.extension.compose.style.sources.generated.RasterLayers rasterLayers = RasterLayers.default, com.mapbox.maps.extension.compose.style.sources.generated.TileCacheBudget tileCacheBudget = TileCacheBudget.default);
  }

  public final class RasterDemSourceKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void RasterDemSource(String sourceId, com.mapbox.maps.extension.compose.style.sources.generated.Url url = Url.default, com.mapbox.maps.extension.compose.style.sources.generated.Tiles tiles = Tiles.default, com.mapbox.maps.extension.compose.style.sources.generated.Bounds bounds = Bounds.default, com.mapbox.maps.extension.compose.style.sources.generated.MinZoom minZoom = MinZoom.default, com.mapbox.maps.extension.compose.style.sources.generated.MaxZoom maxZoom = MaxZoom.default, com.mapbox.maps.extension.compose.style.sources.generated.TileSize tileSize = TileSize.default, com.mapbox.maps.extension.compose.style.sources.generated.Attribution attribution = Attribution.default, com.mapbox.maps.extension.compose.style.sources.generated.Encoding encoding = Encoding.default, com.mapbox.maps.extension.compose.style.sources.generated.Volatile volatile = Volatile.default, com.mapbox.maps.extension.compose.style.sources.generated.PrefetchZoomDelta prefetchZoomDelta = PrefetchZoomDelta.default, com.mapbox.maps.extension.compose.style.sources.generated.TileCacheBudget tileCacheBudget = TileCacheBudget.default, com.mapbox.maps.extension.compose.style.sources.generated.MinimumTileUpdateInterval minimumTileUpdateInterval = MinimumTileUpdateInterval.default, com.mapbox.maps.extension.compose.style.sources.generated.MaxOverscaleFactorForParentTiles maxOverscaleFactorForParentTiles = MaxOverscaleFactorForParentTiles.default, com.mapbox.maps.extension.compose.style.sources.generated.TileRequestsDelay tileRequestsDelay = TileRequestsDelay.default, com.mapbox.maps.extension.compose.style.sources.generated.TileNetworkRequestsDelay tileNetworkRequestsDelay = TileNetworkRequestsDelay.default);
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class RasterLayers {
    ctor public RasterLayers(com.mapbox.bindgen.Value value);
    ctor public RasterLayers(java.util.List<com.mapbox.maps.extension.style.sources.generated.RasterArraySource.RasterDataLayer> value);
    ctor public RasterLayers(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.sources.generated.RasterLayers copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.RasterLayers.Companion Companion;
  }

  public static final class RasterLayers.Companion {
    method public com.mapbox.maps.extension.compose.style.sources.generated.RasterLayers getDefault();
    property public final com.mapbox.maps.extension.compose.style.sources.generated.RasterLayers default;
  }

  public final class RasterSourceKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void RasterSource(String sourceId, com.mapbox.maps.extension.compose.style.sources.generated.Url url = Url.default, com.mapbox.maps.extension.compose.style.sources.generated.Tiles tiles = Tiles.default, com.mapbox.maps.extension.compose.style.sources.generated.Bounds bounds = Bounds.default, com.mapbox.maps.extension.compose.style.sources.generated.MinZoom minZoom = MinZoom.default, com.mapbox.maps.extension.compose.style.sources.generated.MaxZoom maxZoom = MaxZoom.default, com.mapbox.maps.extension.compose.style.sources.generated.TileSize tileSize = TileSize.default, com.mapbox.maps.extension.compose.style.sources.generated.Scheme scheme = Scheme.default, com.mapbox.maps.extension.compose.style.sources.generated.Attribution attribution = Attribution.default, com.mapbox.maps.extension.compose.style.sources.generated.Volatile volatile = Volatile.default, com.mapbox.maps.extension.compose.style.sources.generated.PrefetchZoomDelta prefetchZoomDelta = PrefetchZoomDelta.default, com.mapbox.maps.extension.compose.style.sources.generated.TileCacheBudget tileCacheBudget = TileCacheBudget.default, com.mapbox.maps.extension.compose.style.sources.generated.MinimumTileUpdateInterval minimumTileUpdateInterval = MinimumTileUpdateInterval.default, com.mapbox.maps.extension.compose.style.sources.generated.MaxOverscaleFactorForParentTiles maxOverscaleFactorForParentTiles = MaxOverscaleFactorForParentTiles.default, com.mapbox.maps.extension.compose.style.sources.generated.TileRequestsDelay tileRequestsDelay = TileRequestsDelay.default, com.mapbox.maps.extension.compose.style.sources.generated.TileNetworkRequestsDelay tileNetworkRequestsDelay = TileNetworkRequestsDelay.default);
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class Scheme {
    ctor public Scheme(com.mapbox.bindgen.Value value);
    ctor public Scheme(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.sources.generated.Scheme copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.Scheme.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.Scheme TMS;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.Scheme XYZ;
  }

  public static final class Scheme.Companion {
    method public com.mapbox.maps.extension.compose.style.sources.generated.Scheme getDefault();
    property public final com.mapbox.maps.extension.compose.style.sources.generated.Scheme default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TileCacheBudget {
    ctor public TileCacheBudget(com.mapbox.bindgen.Value value);
    ctor public TileCacheBudget(com.mapbox.maps.TileCacheBudget value);
    ctor public TileCacheBudget(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.sources.generated.TileCacheBudget copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.TileCacheBudget.Companion Companion;
  }

  public static final class TileCacheBudget.Companion {
    method public com.mapbox.maps.extension.compose.style.sources.generated.TileCacheBudget getDefault();
    property public final com.mapbox.maps.extension.compose.style.sources.generated.TileCacheBudget default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TileNetworkRequestsDelay {
    ctor public TileNetworkRequestsDelay(com.mapbox.bindgen.Value value);
    ctor public TileNetworkRequestsDelay(double value);
    ctor public TileNetworkRequestsDelay(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.sources.generated.TileNetworkRequestsDelay copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.TileNetworkRequestsDelay.Companion Companion;
  }

  public static final class TileNetworkRequestsDelay.Companion {
    method public com.mapbox.maps.extension.compose.style.sources.generated.TileNetworkRequestsDelay getDefault();
    property public final com.mapbox.maps.extension.compose.style.sources.generated.TileNetworkRequestsDelay default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TileRequestsDelay {
    ctor public TileRequestsDelay(com.mapbox.bindgen.Value value);
    ctor public TileRequestsDelay(double value);
    ctor public TileRequestsDelay(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.sources.generated.TileRequestsDelay copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.TileRequestsDelay.Companion Companion;
  }

  public static final class TileRequestsDelay.Companion {
    method public com.mapbox.maps.extension.compose.style.sources.generated.TileRequestsDelay getDefault();
    property public final com.mapbox.maps.extension.compose.style.sources.generated.TileRequestsDelay default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TileSize {
    ctor public TileSize(com.mapbox.bindgen.Value value);
    ctor public TileSize(long value);
    ctor public TileSize(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.sources.generated.TileSize copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.TileSize.Companion Companion;
  }

  public static final class TileSize.Companion {
    method public com.mapbox.maps.extension.compose.style.sources.generated.TileSize getDefault();
    property public final com.mapbox.maps.extension.compose.style.sources.generated.TileSize default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class Tiles {
    ctor public Tiles(com.mapbox.bindgen.Value value);
    ctor public Tiles(java.util.List<java.lang.String> value);
    ctor public Tiles(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.sources.generated.Tiles copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.Tiles.Companion Companion;
  }

  public static final class Tiles.Companion {
    method public com.mapbox.maps.extension.compose.style.sources.generated.Tiles getDefault();
    property public final com.mapbox.maps.extension.compose.style.sources.generated.Tiles default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class Tolerance {
    ctor public Tolerance(com.mapbox.bindgen.Value value);
    ctor public Tolerance(double value);
    ctor public Tolerance(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.sources.generated.Tolerance copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.Tolerance.Companion Companion;
  }

  public static final class Tolerance.Companion {
    method public com.mapbox.maps.extension.compose.style.sources.generated.Tolerance getDefault();
    property public final com.mapbox.maps.extension.compose.style.sources.generated.Tolerance default;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class Url {
    ctor public Url(com.mapbox.bindgen.Value value);
    ctor public Url(String value);
    ctor public Url(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.sources.generated.Url copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.Url.Companion Companion;
  }

  public static final class Url.Companion {
    method public com.mapbox.maps.extension.compose.style.sources.generated.Url getDefault();
    property public final com.mapbox.maps.extension.compose.style.sources.generated.Url default;
  }

  public final class VectorSourceKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void VectorSource(String sourceId, com.mapbox.maps.extension.compose.style.sources.generated.Url url = Url.default, com.mapbox.maps.extension.compose.style.sources.generated.Tiles tiles = Tiles.default, com.mapbox.maps.extension.compose.style.sources.generated.Bounds bounds = Bounds.default, com.mapbox.maps.extension.compose.style.sources.generated.Scheme scheme = Scheme.default, com.mapbox.maps.extension.compose.style.sources.generated.MinZoom minZoom = MinZoom.default, com.mapbox.maps.extension.compose.style.sources.generated.MaxZoom maxZoom = MaxZoom.default, com.mapbox.maps.extension.compose.style.sources.generated.Attribution attribution = Attribution.default, com.mapbox.maps.extension.compose.style.sources.generated.PromoteId promoteId = PromoteId.default, com.mapbox.maps.extension.compose.style.sources.generated.Volatile volatile = Volatile.default, com.mapbox.maps.extension.compose.style.sources.generated.PrefetchZoomDelta prefetchZoomDelta = PrefetchZoomDelta.default, com.mapbox.maps.extension.compose.style.sources.generated.TileCacheBudget tileCacheBudget = TileCacheBudget.default, com.mapbox.maps.extension.compose.style.sources.generated.MinimumTileUpdateInterval minimumTileUpdateInterval = MinimumTileUpdateInterval.default, com.mapbox.maps.extension.compose.style.sources.generated.MaxOverscaleFactorForParentTiles maxOverscaleFactorForParentTiles = MaxOverscaleFactorForParentTiles.default, com.mapbox.maps.extension.compose.style.sources.generated.TileRequestsDelay tileRequestsDelay = TileRequestsDelay.default, com.mapbox.maps.extension.compose.style.sources.generated.TileNetworkRequestsDelay tileNetworkRequestsDelay = TileNetworkRequestsDelay.default);
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class Volatile {
    ctor public Volatile(com.mapbox.bindgen.Value value);
    ctor public Volatile(boolean value);
    ctor public Volatile(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.sources.generated.Volatile copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.Volatile.Companion Companion;
  }

  public static final class Volatile.Companion {
    method public com.mapbox.maps.extension.compose.style.sources.generated.Volatile getDefault();
    property public final com.mapbox.maps.extension.compose.style.sources.generated.Volatile default;
  }

}

