// This file is generated.

package com.mapbox.maps.extension.compose.style.sources.generated

import androidx.compose.runtime.Composable
import androidx.compose.runtime.MutableState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.saveable.Saver
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.runtime.setValue
import com.mapbox.bindgen.Value
import com.mapbox.maps.MapboxExperimental
import com.mapbox.maps.extension.compose.style.IdGenerator.generateRandomSourceId
import com.mapbox.maps.extension.compose.style.LongValue
import com.mapbox.maps.extension.compose.style.PointListValue
import com.mapbox.maps.extension.compose.style.StringValue
import com.mapbox.maps.extension.compose.style.sources.SourceState
import java.util.Objects

/**
 * Create and [rememberSaveable] a [ImageSourceState] using [ImageSourceState.Saver].
 * [init] will be called when the [ImageSourceState] is first created to configure its
 * initial state.
 *
 * @param key An optional key to be used as a key for the saved value. If not provided we use the
 * automatically generated by the Compose runtime which is unique for the every exact code location
 * in the composition tree.
 * @param sourceId The optional sourceId for the source state, by default, a random source ID will be used.
 * @param init A function initialise this [ImageSourceState].
 */
@Composable
@MapboxExperimental
public inline fun rememberImageSourceState(
  key: String? = null,
  sourceId: String = remember {
    generateRandomSourceId("image")
  },
  crossinline init: ImageSourceState.() -> Unit = {}
): ImageSourceState = rememberSaveable(key = key, saver = ImageSourceState.Saver) {
  ImageSourceState(sourceId).apply(init)
}

/**
 * An image data source.
 *
 * @see [The online documentation](https://docs.mapbox.com/style-spec/reference/sources#image)
 *
 * @param sourceId The id of the source state, by default a random generated ID will be used.
 * @param initialProperties The initial mutable properties of the source.
 */
@MapboxExperimental
public class ImageSourceState private constructor(
  sourceId: String,
  sourceType: String,
  initialProperties: Map<String, Pair<Boolean, Value>>,
  url: StringValue,
  coordinates: PointListValue,
  prefetchZoomDelta: LongValue,
) : SourceState(
  sourceId = sourceId,
  sourceType = sourceType,
  initialProperties = initialProperties,
) {
  public constructor(
    sourceId: String = generateRandomSourceId("image"),
  ) : this(
    sourceId = sourceId,
    sourceType = "image",
    initialProperties = emptyMap(),
    url = StringValue.INITIAL,
    coordinates = PointListValue.INITIAL,
    prefetchZoomDelta = LongValue.INITIAL,
  )

  private val urlState: MutableState<StringValue> = mutableStateOf(url)

  /**
   * URL that points to an image. If the URL is not specified, the image is expected
   * to be loaded directly during runtime.
   */
  public var url: StringValue by urlState

  @Composable
  private fun UpdateUrl() {
    urlState.value.apply {
      if (notInitial) {
        setBuilderProperty("url", value)
      }
    }
  }
  private val coordinatesState: MutableState<PointListValue> = mutableStateOf(coordinates)

  /**
   * Corners of image specified in longitude, latitude pairs. Note: When using globe projection, the image will
   * be centered at the North or South Pole in the respective hemisphere if the average latitude
   * value exceeds 85 degrees or falls below -85 degrees.
   */
  public var coordinates: PointListValue by coordinatesState

  @Composable
  private fun UpdateCoordinates() {
    coordinatesState.value.apply {
      if (notInitial) {
        setBuilderProperty("coordinates", value)
      }
    }
  }
  private val prefetchZoomDeltaState: MutableState<LongValue> = mutableStateOf(prefetchZoomDelta)

  /**
   * When loading a map, if PrefetchZoomDelta is set to any number greater than 0, the map
   * will first request a tile at zoom level lower than zoom - delta, but so that
   * the zoom level is multiple of delta, in an attempt to display a full map at
   * lower resolution as quick as possible. It will get clamped at the tile source minimum zoom.
   * Default value: 4.
   */
  public var prefetchZoomDelta: LongValue by prefetchZoomDeltaState

  @Composable
  private fun UpdatePrefetchZoomDelta() {
    prefetchZoomDeltaState.value.apply {
      if (notInitial) {
        setProperty("prefetch-zoom-delta", value)
      }
    }
  }

  @Composable
  override fun UpdateProperties() {
    UpdateUrl()
    UpdateCoordinates()
    UpdatePrefetchZoomDelta()
  }

  private fun getProperties(): Map<String, Value> =
    listOfNotNull(
      ("url" to url.value).takeIf { url.notInitial },
      ("coordinates" to coordinates.value).takeIf { coordinates.notInitial },
      ("prefetch-zoom-delta" to prefetchZoomDelta.value).takeIf { prefetchZoomDelta.notInitial },
    ).toMap()

  /**
   * See [Any.equals]
   */
  override fun equals(other: Any?): Boolean {
    if (this === other) return true
    if (javaClass != other?.javaClass) return false

    other as ImageSourceState

    if (sourceId != other.sourceId) return false
    if (url != other.url) return false
    if (coordinates != other.coordinates) return false
    if (prefetchZoomDelta != other.prefetchZoomDelta) return false

    return true
  }

  /**
   * See [Any.hashCode]
   */
  override fun hashCode(): Int {
    return Objects.hash(
      sourceId,
      url,
      coordinates,
      prefetchZoomDelta,
    )
  }

  /**
   * Returns a string representation of the object.
   */
  override fun toString(): String =
    "ImageSourceState(sourceId=$sourceId, url=$url, coordinates=$coordinates, prefetchZoomDelta=$prefetchZoomDelta)"

  /**
   * Public companion object.
   */
  public companion object {
    /**
     * The default saver implementation for [ImageSourceState]
     */
    public val Saver: Saver<ImageSourceState, Holder> = Saver(
      save = { it.save() },
      restore = { holder ->
        ImageSourceState(
          sourceId = holder.sourcedId,
          sourceType = "image",
          initialProperties = holder.savedProperties,
          url = holder.savedProperties["url"]?.let { StringValue(it.second) } ?: StringValue.INITIAL,
          coordinates = holder.savedProperties["coordinates"]?.let { PointListValue(it.second) } ?: PointListValue.INITIAL,
          prefetchZoomDelta = holder.savedProperties["prefetch-zoom-delta"]?.let { LongValue(it.second) } ?: LongValue.INITIAL,
        )
      }
    )
  }
}
// End of generated file.