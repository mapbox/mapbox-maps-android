version: 2.1

orbs:
  slack: circleci/slack@4.5

parameters:
  mapbox_upstream:
    type: boolean
    default: false
  mapbox_hash:
    type: string
    default: "000000"
  mapbox_slug:
    type: string
    default: "owner/repo"
  git_release_tag:
    type: string
    default: ^v[0-9]+\.[0-9]+\.[0-9]+.*$
  changelog_branch:
    type: string
    default: "^add-changelog.*"
  git_release_branch:
    type: string
    default: ^v[0-9]+\.[0-9]+$
  weekly:
    type: boolean
    default: false

workflows:
  version: 2

  build:
    when:
      and:
        - not: << pipeline.parameters.mapbox_upstream >>
        - not: << pipeline.parameters.weekly >>
    jobs:
      - verify-code:
          filters:
            tags:
              only: /(v.*|extension-androidauto-v.*)/
      - verify-docs:
          requires:
            - verify-code
      - verify-api-kotlin-binary-compatibility:
          requires:
            - verify-code
      - verify-api-metalava:
          requires:
            - verify-code
      - verify-api-revapi:
          requires:
            - verify-code
      - verify-permissions:
          requires:
            - build-modules-and-instrumentation-tests
      - verify-internal:
            requires:
              - verify-code
      - run-lint:
          requires:
            - verify-code
      - run-unit-test:
          requires:
            - verify-code
      - start-run-style-test:
          type: approval
      - run-style-test:
          requires:
            - start-run-style-test
      - build-android-auto-app:
          requires:
            - verify-code
      - build-modules-and-instrumentation-tests:
          requires:
            - verify-code
          filters:
            tags:
              only: /(v.*|extension-androidauto-v.*)/
      - run-app-instrumentation-test:
          requires:
            - build-modules-and-instrumentation-tests
      - run-sdk-instrumentation-test:
          requires:
            - build-modules-and-instrumentation-tests
      - run-robo-test:
          requires:
            - build-modules-and-instrumentation-tests
      - sdk-e2e-test:
          filters:
              branches:
                  ignore:
                      - main
                      - /<< pipeline.parameters.git_release_branch >>/
          name: run-sdk-e2e-test-devel
          requires:
              - verify-code
      - sdk-e2e-test:
          filters:
              branches:
                  only:
                      - main
                      - /<< pipeline.parameters.git_release_branch >>/
              tags:
                  only: /<< pipeline.parameters.git_release_tag >>/
          name: run-sdk-e2e-test-validation
          requires:
              - verify-code
          validation: true
      - sync-internal-ci:
          filters:
            branches:
              only:
                - main
                - /<< pipeline.parameters.git_release_branch >>/
          requires:
            - verify-code

  validation:
    when: << pipeline.parameters.mapbox_upstream >>
    jobs:
      - run-sdk-instrumentation-test

  weekly:
    triggers:
      - schedule:
          # at 7:00 on Monday
          cron: 0 7 * * 1
          filters:
            branches:
              only:
                - main
    jobs:
      - check-gradle-dependencies
      - run-robo-test-weekly:
          requires:
            - build-modules-and-instrumentation-tests
      - run-sdk-instrumentation-test-weekly:
          requires:
            - run-robo-test-weekly
      - build-modules-and-instrumentation-tests:
          requires:
            - verify-code
      - verify-code

  validation-weekly:
    when: << pipeline.parameters.weekly >>
    jobs:
      - check-gradle-dependencies
      - run-robo-test-weekly:
          requires:
            - build-modules-and-instrumentation-tests
      - run-sdk-instrumentation-test-weekly:
          requires:
            - run-robo-test-weekly
      - build-modules-and-instrumentation-tests:
          requires:
            - verify-code
      - verify-code

commands:
  save-to-workspace:
    parameters:
      path:
        type: string
    steps:
      - persist_to_workspace:
          root: .
          paths:
            - << parameters.path >>

  read-from-workspace:
    steps:
      - attach_workspace:
          at: .

  restore-gradle-cache:
    steps:
      - run:
          name: Generate cache key
          command: ./scripts/checksum.sh ./tmp/checksum.txt
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "./tmp/checksum.txt" }}

  save-gradle-cache:
    steps:
      - run:
          name: Generate cache key
          command: ./scripts/checksum.sh ./tmp/checksum.txt
          when: always
      - save_cache:
          when: always
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "./tmp/checksum.txt" }}

  set-pr-target-branch:
    steps:
      - run:
          name: Save PR target branch at $PR_TARGET_BRANCH environment var
          command: |
            export GITHUB_TOKEN=$(./mbx-ci github reader token)
            # Let's figure out the branch this PR is targeting
            export PR_TARGET_BRANCH=$(gh pr view --repo $CIRCLE_REPOSITORY_URL $CIRCLE_PULL_REQUEST --json baseRefName -q ".baseRefName")
            echo "PR Target branch: $PR_TARGET_BRANCH"
            # Make it available to next steps
            echo "export PR_TARGET_BRANCH=$PR_TARGET_BRANCH" >> "$BASH_ENV"

  jvm-unit-tests:
    steps:
      - run:
          name: Run JVM unit tests & create jacoco code coverage report
          no_output_timeout: 15m
          command: ./gradlew jacocoTestDebugUnitTestReport
#      - run:
#          name: Upload codecov
#          command: bash <(curl -sSfL https://codecov.io/bash)

  store-results:
    steps:
      - store_artifacts:
          path: sdk/build
      - store_artifacts:
          path: LICENSE.md

  build-instrumentation-test:
    parameters:
      module_target:
        description: module target
        type: string
    steps:
      - run:
          name: Initialize developer access token for sdk tests
          command: |
            if [ -n "${MAPBOX_DEVELOPER_CONFIG_XML}" ]; then
              echo "${MAPBOX_DEVELOPER_CONFIG_XML}" > sdk/src/androidTest/res/values/developer-config.xml
            fi
      - run:
          name: Build << parameters.module_target >> instrumentation test apk
          no_output_timeout: 30m
          command: ./gradlew << parameters.module_target >>:assembleAndroidTest

  build-module:
    parameters:
      module_target:
        description: module target
        type: string
      variant:
        description: debug or release or all
        type: string
    steps:
      - run:
          name: Initialize developer access token for app tests
          command: |
            if [ -n "${MAPBOX_DEVELOPER_CONFIG_XML}" ]; then
              echo "${MAPBOX_DEVELOPER_CONFIG_XML}" > app/src/main/res/values/developer-config.xml
              echo "${MAPBOX_DEVELOPER_CONFIG_XML}" > extension-style-app/src/main/res/values/developer-config.xml
              echo "${MAPBOX_DEVELOPER_CONFIG_XML}" > android-auto-app/src/main/res/values/developer-config.xml
            fi
      - run:
          name: |
            if [ << parameters.variant >> == "All" ]; then
              Build << parameters.module_target >> apk for all flavors
            else
              Build << parameters.module_target >> apk in << parameters.variant >> mode
            fi
          command: |
            if [ << parameters.variant >> == "All" ]; then
              ./gradlew << parameters.module_target >>:assemble
            else
              ./gradlew << parameters.module_target >>:assemble<< parameters.variant >>
            fi

  update-version-name:
    steps:
      - run:
          name: Update version name
          command: |
            if [[ $CIRCLE_TAG =~ << pipeline.parameters.git_release_tag >> ]]; then
              sed -i -e "s/^VERSION_NAME=.*/VERSION_NAME=${CIRCLE_TAG:1}/" gradle.properties
            elif [[ $CIRCLE_TAG == extension-androidauto-v* ]]; then
              sed -i -e "s/^MODULE_VERSION_NAME=.*/MODULE_VERSION_NAME=${CIRCLE_TAG:23}/" extension-androidauto/gradle.properties
            elif [[ $CIRCLE_BRANCH == main ]]; then
              COMMIT_SHA=$(git rev-parse --short HEAD)
              sed -i -e "s/-SNAPSHOT.*/-${COMMIT_SHA}-SNAPSHOT/" gradle.properties
            fi

  generate-docs:
    steps:
      - run:
          name: Start internal CI release flow
          command: |
            if [[ $CIRCLE_TAG =~ << pipeline.parameters.git_release_tag >> ]]; then
              TARGET_BRANCH=$(echo $CIRCLE_TAG | awk -F\- '{print $1}' | cut -f1-2 -d".")
              python3 scripts/start-internal-release-pipeline.py --token ${MOBILE_METRICS_TOKEN} --origin-slug mapbox/mapbox-maps-android --target-slug mapbox/mapbox-maps-android-internal --release_tag $CIRCLE_TAG --branch $TARGET_BRANCH
            fi

  validate-internal-ci:
    steps:
      - run:
          name: Trigger generated code validation
          command: |
            python3 scripts/ci-circleci-start-pipeline.py --token ${MOBILE_METRICS_TOKEN} --origin-slug mapbox/mapbox-maps-android --target-slug mapbox/mapbox-maps-android-internal --current-branch ${CIRCLE_BRANCH} --pixel_match_public True

  init-aws:
    steps:
      - run:
          name: Init aws with mbx-ci
          command: |
            curl -Ls https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/latest/mbx-ci-linux-amd64 > mbx-ci && chmod 755 ./mbx-ci
            ./mbx-ci aws setup

  publish-sdk-registry:
    steps:
      - unless:
          condition: << pipeline.parameters.mapbox_upstream >>
          steps:
            - run:
                name: Publish the SDK
                command: |
                  if [[ $CIRCLE_TAG =~ << pipeline.parameters.git_release_tag >> ||  $CIRCLE_BRANCH == main ]]; then
                    make sdkRegistryUpload
                  fi
                  if [[ $CIRCLE_TAG =~ << pipeline.parameters.git_release_tag >> ]]; then
                    git config --global user.email "MapboxCI@users.noreply.github.com"
                    git config --global user.name "MapboxCI"
                    export GITHUB_TOKEN=$(./mbx-ci github writer private token)
                    make sdkRegistryPublish
                  fi
                  if [[ $CIRCLE_TAG == extension-androidauto-v* ]]; then
                    git config --global user.email "MapboxCI@users.noreply.github.com"
                    git config --global user.name "MapboxCI"
                    export GITHUB_TOKEN=$(./mbx-ci github writer private token)
                    make sdkRegistryUploadAndroidAutoExtension
                    make sdkRegistryPublishAndroidAutoExtension
                  fi

  publish-sdk-registry-named-snapshot:
    steps:
      - unless:
          condition: << pipeline.parameters.mapbox_upstream >>
          steps:
            - run:
                name: Publish the SDK snapshot based on the keyword in commit message
                command: |
                  COMMIT_SHA=$(git rev-parse --short HEAD)
                  LAST_RELEASE=$(git describe --tags --abbrev=0 --match 'android-v[0-9]*.[0-9]*.[0-9]*' --match 'v[0-9]*.[0-9]*.[0-9]*')
                  if [[ $LAST_RELEASE == android-v* ]]; then
                    LAST_RELEASE=${LAST_RELEASE:9}
                  else
                    LAST_RELEASE=${LAST_RELEASE:1}
                  fi
                  if [[ -n ${CIRCLE_BRANCH+x} ]] && [[ $CIRCLE_BRANCH != "main" ]] && [[ "$(git log -1)" = *"publish_android_snapshot"* ]]; then
                    sed -i -e "s/^VERSION_NAME=.*/VERSION_NAME=${LAST_RELEASE}-${CIRCLE_BRANCH}-${COMMIT_SHA}-SNAPSHOT/" gradle.properties
                    make sdkRegistryUpload
                  fi

  login-google-cloud-platform:
    steps:
      - run:
          name: Log in to Google Cloud Platform
          command: |
            if [[ -n "${GCLOUD_SERVICE_ACCOUNT_JSON}" ]]; then
              echo "${GCLOUD_SERVICE_ACCOUNT_JSON}" > secret.json
              gcloud auth activate-service-account --key-file secret.json --project mapbox-maps-android
              rm secret.json
            fi

  generate-sanity-test:
    steps:
      - run:
          name: Generate sanity test
          command: |
            npm install
            make generate-sanity-test

  run-firebase-instrumentation:
    parameters:
      module_target:
        description: module target
        type: string
      app_target:
        description: app target
        type: string
        default: "app"
      multiple_devices:
        description: multiple_devices build or normal
        type: boolean
        default: false
    steps:
      - run:
          name: Run instrumentation tests on Firebase
          no_output_timeout: 50m
          command: |
            if [[ -n "${GCLOUD_SERVICE_ACCOUNT_JSON}" ]]; then
              if [ << parameters.module_target >> == "extension-style-app" ]; then
                gcloud beta firebase test android run --type instrumentation \
                  --app << parameters.app_target >>/build/outputs/apk/debug/<< parameters.app_target >>-debug.apk \
                  --test << parameters.module_target >>/build/outputs/apk/androidTest/debug/<< parameters.module_target >>-debug-androidTest.apk \
                  --device model=blueline,version=28,locale=en,orientation=portrait \
                  --timeout 45m --use-orchestrator --no-record-video --num-flaky-test-attempts 1 \
                  --num-uniform-shards 3
              else
                if << parameters.multiple_devices >> ; then
                  gcloud beta firebase test android run --type instrumentation \
                    --app << parameters.app_target >>/build/outputs/apk/debug/<< parameters.app_target >>-debug.apk \
                    --test << parameters.module_target >>/build/outputs/apk/androidTest/debug/<< parameters.module_target >>-debug-androidTest.apk \
                    --device model=harpia,version=23,locale=en,orientation=portrait \
                    --device model=blueline,version=28,locale=en,orientation=portrait \
                    --device model=redfin,version=30,locale=en,orientation=portrait \
                    --device model=oriole,version=33,locale=en,orientation=portrait \
                    --timeout 45m --use-orchestrator --no-record-video --num-flaky-test-attempts 1 \
                    --num-uniform-shards 4
                else
                  gcloud beta firebase test android run --type instrumentation \
                    --app << parameters.app_target >>/build/outputs/apk/debug/<< parameters.app_target >>-debug.apk \
                    --test << parameters.module_target >>/build/outputs/apk/androidTest/debug/<< parameters.module_target >>-debug-androidTest.apk \
                    --device model=redfin,version=30,locale=en,orientation=portrait \
                    --timeout 45m --use-orchestrator --no-record-video --num-flaky-test-attempts 1 \
                    --num-uniform-shards 4
                fi
              fi
            fi

  run-firebase-robo:
    parameters:
      multiple_devices:
        description: multiple_devices build or normal
        type: boolean
        default: false
    steps:
      - run:
          name: Run robo tests on Firebase
          no_output_timeout: 10m
          command: |
            if [[ -n "${GCLOUD_SERVICE_ACCOUNT_JSON}" ]]; then
              if << parameters.multiple_devices >> ; then
                gcloud firebase test android run --type robo \
                  --app app/build/outputs/apk/release/app-release.apk \
                  --device model=Nexus5,version=21,locale=en,orientation=portrait \
                  --device model=harpia,version=23,locale=en,orientation=portrait \
                  --device model=Pixel2,version=29,locale=en,orientation=portrait \
                  --device model=redfin,version=30,locale=en,orientation=portrait \
                  --device model=oriole,version=33,locale=en,orientation=portrait \
                  --timeout 90s
              else
                gcloud firebase test android run --type robo \
                  --app app/build/outputs/apk/release/app-release.apk \
                  --device model=redfin,version=30,locale=en,orientation=portrait \
                  --timeout 90s
              fi
            fi

  mapbox-gl-native-begin:
    steps:
      - when:
          condition: << pipeline.parameters.mapbox_upstream >>
          steps:
            - run:
               name: Install Python dependencies
               command: |
                 pip3 install requests
            - run:
               name: Report upstream pending
               command: |
                 scripts/ci-github-set-commit-status.py --pending --slug << pipeline.parameters.mapbox_slug >> --hash << pipeline.parameters.mapbox_hash >>

  mapbox-gl-native-end:
    steps:
      - when:
          condition: << pipeline.parameters.mapbox_upstream >>
          steps:
            - run:
               name: Report upstream success
               command: |
                 scripts/ci-github-set-commit-status.py --success --slug << pipeline.parameters.mapbox_slug >> --hash << pipeline.parameters.mapbox_hash >>
            - run:
               when: on_fail
               name: Report upstream failure
               command: |
                 scripts/ci-github-set-commit-status.py --slug << pipeline.parameters.mapbox_slug >> --hash << pipeline.parameters.mapbox_hash >>

jobs:
#  Use this construction to skip jobs for the changelog branch
#  steps:
#    - when:
#        condition:
#          not:
#            matches:
#              pattern: << pipeline.parameters.changelog_branch >>
#              value: << pipeline.git.branch >>
#        steps:
#          - step1
#          - step2
#          - ...
#    - run: exit 0
  verify-code:
    executor:
      name: ubuntu
      machine: xlarge
    steps:
      - when:
          condition:
            not:
              matches:
                pattern: << pipeline.parameters.changelog_branch >>
                value: << pipeline.git.branch >>
          steps:
            - checkout
            - restore-gradle-cache
            - init-aws
            - set-pr-target-branch
            - run:
                name: ktlint
                command: ./gradlew ktlint
            - run:
                name: check release runtime Mapbox dependencies to fail fast
                command: |
                  echo "PR Target branch: $PR_TARGET_BRANCH"
                  ./gradlew sdk:dependencyInsight --configuration releaseRuntimeClasspath --dependency com.mapbox.maps | grep -vzq 'FAILED'
            - run:
                name: check changelog
                command: |
                  if [[ ! -z "${CIRCLE_PULL_REQUEST}" ]]; then
                    echo "$(./mbx-ci github reader token)" > gh_token.txt
                    ./scripts/check-changelog.sh
                  fi
            - save-gradle-cache
            - store-results
      - run: exit 0

  verify-docs:
    executor:
      name: ubuntu
      machine: xlarge
    steps:
      - when:
          condition:
            not:
              matches:
                pattern: << pipeline.parameters.changelog_branch >>
                value: << pipeline.git.branch >>
          steps:
            - checkout
            - restore-gradle-cache
            - run:
                no_output_timeout: 30m
                name: docs
                command: bash scripts/kdoc-validate.sh
      - run: exit 0

  verify-api-metalava:
    executor:
      name: ubuntu
      machine: xlarge
    steps:
      - when:
          condition:
            not:
              matches:
                pattern: << pipeline.parameters.changelog_branch >>
                value: << pipeline.git.branch >>
          steps:
            - checkout
            - restore-gradle-cache
            - run:
                no_output_timeout: 30m
                name: verify-api-metalava
                command: |
                  ./gradlew checkApiMetalava
      - run: exit 0

  verify-api-kotlin-binary-compatibility:
    executor: ubuntu
    steps:
      - when:
          condition:
            not:
              matches:
                pattern: << pipeline.parameters.changelog_branch >>
                value: << pipeline.git.branch >>
          steps:
            - checkout
            - restore-gradle-cache
            - run:
                no_output_timeout: 30m
                name: verify-api-kotlin-binary-compatibility
                command: |
                  ./gradlew checkApiKotlinValidator
      - run: exit 0

  verify-api-revapi:
    executor:
      name: ubuntu
      machine: large
    steps:
      - when:
          condition:
            not:
              matches:
                pattern: << pipeline.parameters.changelog_branch >>
                value: << pipeline.git.branch >>
          steps:
            - checkout
            - restore-gradle-cache
            - init-aws
            - run:
                no_output_timeout: 30m
                name: verify-api-revapi
                command: |
                  make build
                  echo "$(./mbx-ci github reader token)" > gh_token.txt
                  if [[ $CIRCLE_TAG =~ << pipeline.parameters.git_release_tag >> ]]; then
                    ./scripts/java-api-check-all.sh "${CIRCLE_TAG}"
                  else
                    ./scripts/java-api-check-all.sh ""
                  fi
            - store_artifacts:
                path: api_compat_report
      - run: exit 0

  verify-permissions:
    executor:
      name: ubuntu
      machine: small
    steps:
      - when:
          condition:
            not:
              matches:
                pattern: << pipeline.parameters.changelog_branch >>
                value: << pipeline.git.branch >>
          steps:
            - checkout
            - read-from-workspace
            - run:
                name: verify-permissions
                command: |
                  apt install -y aapt
                  make check-permissions
      - run: exit 0

  verify-internal:
    executor:
      name: ubuntu
      machine: small
    steps:
      - when:
          condition:
            not:
              matches:
                pattern: << pipeline.parameters.changelog_branch >>
                value: << pipeline.git.branch >>
          steps:
            - checkout
            - validate-internal-ci
      - run: exit 0

  run-unit-test:
    executor:
      name: ubuntu
      machine: xlarge
    steps:
      - when:
          condition:
            not:
              matches:
                pattern: << pipeline.parameters.changelog_branch >>
                value: << pipeline.git.branch >>
          steps:
            - checkout
            - restore-gradle-cache
            - jvm-unit-tests
      - run: exit 0

  run-lint:
    executor:
      name: ubuntu
      machine: xlarge
    steps:
      - when:
          condition:
            not:
              matches:
                pattern: << pipeline.parameters.changelog_branch >>
                value: << pipeline.git.branch >>
          steps:
            - checkout
            - restore-gradle-cache
            - run:
                name: lintRelease
                command: ./gradlew lintRelease
      - run: exit 0

  run-robo-test:
    executor:
      name: ubuntu
      machine: small
    steps:
      - when:
          condition:
            not:
              matches:
                pattern: << pipeline.parameters.changelog_branch >>
                value: << pipeline.git.branch >>
          steps:
            - read-from-workspace
            - login-google-cloud-platform
            - run-firebase-robo:
                multiple_devices: false
      - run: exit 0

  run-robo-test-weekly:
    executor:
      name: ubuntu
      machine: small
    steps:
      - read-from-workspace
      - login-google-cloud-platform
      - run-firebase-robo:
          multiple_devices: true
      - slack/notify:
          event: fail
          mentions: '@maps-android'
          template: basic_fail_1

  run-app-instrumentation-test:
    executor:
      name: ubuntu
      machine: small
    steps:
      - when:
          condition:
            not:
              matches:
                pattern: << pipeline.parameters.changelog_branch >>
                value: << pipeline.git.branch >>
          steps:
            - read-from-workspace
            - login-google-cloud-platform
            - run-firebase-instrumentation:
                module_target: "app"
      - run: exit 0

  run-sdk-instrumentation-test:
    executor:
      name: ubuntu
      machine: small
    steps:
      - when:
          condition:
            not:
              matches:
                pattern: << pipeline.parameters.changelog_branch >>
                value: << pipeline.git.branch >>
          steps:
            - read-from-workspace
            - mapbox-gl-native-begin
            - login-google-cloud-platform
            - run-firebase-instrumentation:
                module_target: "sdk"
                multiple_devices: false
            - mapbox-gl-native-end
      - run: exit 0

  run-sdk-instrumentation-test-weekly:
    executor:
      name: ubuntu
      machine: small
    steps:
      - read-from-workspace
      - login-google-cloud-platform
      - run-firebase-instrumentation:
          module_target: "sdk"
          multiple_devices: true
      - slack/notify:
          event: fail
          mentions: '@maps-android'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1
      - run: exit 0

  run-style-test:
    executor:
      name: ubuntu
      machine: large
    steps:
      - when:
          condition:
            not:
              matches:
                pattern: << pipeline.parameters.changelog_branch >>
                value: << pipeline.git.branch >>
          steps:
            - checkout
            - restore-gradle-cache
            - build-instrumentation-test:
                module_target: "extension-style-app"
            - build-module:
                module_target: "extension-style-app"
                variant: "Debug"
            - store_artifacts:
                path: extension-style-app/build/outputs/apk
                destination: .
            - login-google-cloud-platform
            - run-firebase-instrumentation:
                module_target: "extension-style-app"
                app_target: "extension-style-app"
      - run: exit 0

  build-android-auto-app:
    executor:
      name: ubuntu
      machine: large
    steps:
      - when:
          condition:
            not:
              matches:
                pattern: << pipeline.parameters.changelog_branch >>
                value: << pipeline.git.branch >>
          steps:
            - checkout
            - restore-gradle-cache
            - build-module:
                module_target: "android-auto-app"
                variant: "Release"
      - run: exit 0

  build-modules-and-instrumentation-tests:
    executor:
      name: ubuntu
      machine: xlarge
    steps:
      - when:
          condition:
            not:
              matches:
                pattern: << pipeline.parameters.changelog_branch >>
                value: << pipeline.git.branch >>
          steps:
            - checkout
            - restore-gradle-cache
            - generate-sanity-test
            - build-module:
                module_target: "app"
                variant: "All"
            - build-instrumentation-test:
                module_target: "app"
            - build-instrumentation-test:
                module_target: "sdk"
            - store_artifacts:
                path: app/build/outputs/apk
                destination: .
            - update-version-name
            - init-aws
            - generate-docs
            - publish-sdk-registry
            - publish-sdk-registry-named-snapshot
            - save-to-workspace:
                path: "app/build/outputs/apk/release/app-release.apk"
            - save-to-workspace:
                path: "app/build/outputs/apk/debug/app-debug.apk"
            - save-to-workspace:
                path: "app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk"
            - save-to-workspace:
                path: "sdk/build/outputs/apk/androidTest/debug/sdk-debug-androidTest.apk"
      - run: exit 0

  sdk-e2e-test:
      executor: ubuntu
      parameters:
          validation:
              default: false
              type: boolean
      steps:
        - when:
            condition:
              not:
                matches:
                  pattern: << pipeline.parameters.changelog_branch >>
                  value: << pipeline.git.branch >>
            steps:
              - checkout
              - init-aws
              - run:
                  command: |
                      sudo pip3 install gitpython
                      sudo cp ./mbx-ci /usr/local/bin/
                  name: Install dependency
              - when:
                  condition:
                      not: << parameters.validation >>
                  steps:
                      - run:
                          command: |
                              E2E_TRIGGER=$(./scripts/ci-e2e-job-trigger-checker.sh || echo -n "retval $?")
                              echo $E2E_TRIGGER
                              if [[ $E2E_TRIGGER == *"retval 1"* ]]; then
                                  echo "E2E tests not requested, skipping."
                                  exit 0
                              fi
                              export GITHUB_TOKEN=$(mbx-ci github reader token)
                              LABELS=$(gh pr view --repo $CIRCLE_REPOSITORY_URL $CIRCLE_PULL_REQUEST --json labels)
                              if [[ $LABELS == *"e2e_trunk"* ]]; then
                                  export E2E_VERSION_CONFIG="trunk"
                              elif [[ $LABELS == *"e2e_latest"* ]]; then
                                  export E2E_VERSION_CONFIG="latest"
                              else
                                  export E2E_VERSION_CONFIG="default"
                              fi
                              echo "Run E2E tests with ${E2E_VERSION_CONFIG} config."
                              scripts/ci-e2e-compatibility-start-pipeline.py --token ${MOBILE_METRICS_TOKEN} --config mapbox-maps-android=${CIRCLE_SHA1} --platform all --versions ${E2E_VERSION_CONFIG}
                          name: Trigger E2E SDK test devel pipeline
              - when:
                  condition: << parameters.validation >>
                  steps:
                      - run:
                          command: |
                              export E2E_VERSION_CONFIG="latest"
                              echo "Run E2E tests with ${E2E_VERSION_CONFIG} config."
                              scripts/ci-e2e-compatibility-start-pipeline.py --token ${MOBILE_METRICS_TOKEN} --config mapbox-maps-android=${CIRCLE_SHA1} --platform all --versions ${E2E_VERSION_CONFIG}
                          name: Trigger E2E SDK test validation pipeline
        - run: exit 0

  sync-internal-ci:
    executor:
      name: ubuntu
      machine: small
    steps:
      - when:
          condition:
            not:
              matches:
                pattern: << pipeline.parameters.changelog_branch >>
                value: << pipeline.git.branch >>
          steps:
            - checkout
            - run:
                name: Notify maps internal CI about $CIRCLE_BRANCH branch update
                command: |
                  python3 scripts/ci-circleci-start-pipeline.py --token ${MOBILE_METRICS_TOKEN} \
                    --origin-slug mapbox/mapbox-maps-android \
                    --current-branch $CIRCLE_BRANCH \
                    --target-slug mapbox/mapbox-maps-android-private \
                    --sync-internal True
      - run: exit 0

  check-gradle-dependencies:
    executor:
      name: ubuntu
      machine: xlarge
    steps:
      - checkout
      - restore-gradle-cache
      - run:
          name: Run dependency check
          no_output_timeout: 15m
          command: ./gradlew dependencyUpdates
      - run:
          name: Merge all reports
          command: python3 scripts/merge-gradle-dependency-output.py
      - run:
          name: Zip artifacts
          command: zip -r results.zip merged_report.txt
          when: always
      - store_artifacts:
          path: results.zip
          destination: .

executors:
  ubuntu:
    parameters:
      machine:
        type: string
        default: medium
    docker:
      - image: mbgl/android-ndk-r21e:latest
    resource_class: << parameters.machine >>
    working_directory: /src
    environment:
      JVM_OPTS: -Xmx3200m
      BUILDTYPE: Debug
      GRADLE_OPTS: -Xmx4096m
