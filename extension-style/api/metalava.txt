// Signature format: 3.0
package com.mapbox.maps.extension.style {

  public final class StyleExtensionImpl implements com.mapbox.maps.extension.style.StyleContract.StyleExtension {
    method public java.util.List<com.mapbox.maps.extension.style.StyleContract.StyleImageExtension> getImages();
    method public java.util.List<kotlin.Pair<com.mapbox.maps.extension.style.layers.Layer,com.mapbox.maps.LayerPosition>> getLayers();
    method public com.mapbox.maps.extension.style.light.generated.Light? getLight();
    method public java.util.List<com.mapbox.maps.extension.style.sources.Source> getSources();
    method public String getStyleUri();
    method public com.mapbox.maps.extension.style.terrain.generated.Terrain? getTerrain();
    property public java.util.List<com.mapbox.maps.extension.style.StyleContract.StyleImageExtension> images;
    property public java.util.List<kotlin.Pair<com.mapbox.maps.extension.style.layers.Layer,com.mapbox.maps.LayerPosition>> layers;
    property public com.mapbox.maps.extension.style.light.generated.Light? light;
    property public java.util.List<com.mapbox.maps.extension.style.sources.Source> sources;
    property public String styleUri;
    property public com.mapbox.maps.extension.style.terrain.generated.Terrain? terrain;
  }

  public static final class StyleExtensionImpl.Builder {
    ctor public StyleExtensionImpl.Builder(String styleUri);
    method public operator void addImage(com.mapbox.maps.extension.style.image.ImageExtensionImpl);
    method public operator void addImage9Patch(com.mapbox.maps.extension.style.image.ImageNinePatchExtensionImpl);
    method public operator void addLayer(com.mapbox.maps.extension.style.layers.Layer);
    method public operator void addLayerAtPosition(kotlin.Pair<? extends com.mapbox.maps.extension.style.layers.Layer,com.mapbox.maps.LayerPosition>);
    method public operator void addSource(com.mapbox.maps.extension.style.sources.Source);
    method public com.mapbox.maps.extension.style.StyleContract.StyleExtension build();
    method public String getStyleUri();
    method public kotlin.Pair<com.mapbox.maps.extension.style.layers.Layer,com.mapbox.maps.LayerPosition> layerAtPosition(com.mapbox.maps.extension.style.layers.Layer layer, String? above = null, String? below = null, Integer? at = null);
    method public kotlin.Pair<com.mapbox.maps.extension.style.layers.Layer,com.mapbox.maps.LayerPosition> layerAtPosition(com.mapbox.maps.extension.style.layers.Layer layer, String? above = null, String? below = null);
    method public kotlin.Pair<com.mapbox.maps.extension.style.layers.Layer,com.mapbox.maps.LayerPosition> layerAtPosition(com.mapbox.maps.extension.style.layers.Layer layer, String? above = null);
    method public kotlin.Pair<com.mapbox.maps.extension.style.layers.Layer,com.mapbox.maps.LayerPosition> layerAtPosition(com.mapbox.maps.extension.style.layers.Layer layer);
    method public operator void setLight(com.mapbox.maps.extension.style.light.generated.Light);
    method public operator void setTerrain(com.mapbox.maps.extension.style.terrain.generated.Terrain);
    property public final String styleUri;
  }

  public final class StyleExtensionImplKt {
    method public static com.mapbox.maps.extension.style.StyleContract.StyleExtension style(String styleUri = "", kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.StyleExtensionImpl.Builder,kotlin.Unit> block);
  }

}

package com.mapbox.maps.extension.style.expressions.dsl.generated {

  public final class ExpressionDslKt {
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression abs(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression abs(double value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression accumulated();
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression acos(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression acos(double value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression all(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression any(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression array(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression asin(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression asin(double value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression at(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression at(double index, com.mapbox.maps.extension.style.expressions.generated.Expression array);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression atan(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression atan(double value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression boolean(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression ceil(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression ceil(double value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression coalesce(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression collator(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.CollatorBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression color(@ColorInt int intColor);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression concat(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression concat(java.lang.String... values);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression cos(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression cos(double value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression distance(com.mapbox.geojson.GeoJson geojson);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression division(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression division(double first, double second);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression downcase(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression downcase(String value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression e();
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression eq(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression featureState(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression floor(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression floor(double value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression format(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.FormatBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression geometryType();
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression get(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression get(String key);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression get(String key, com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression gt(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression gte(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression has(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression has(String string, com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression has(String string);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression heatmapDensity();
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression id();
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression image(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression inExpression(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression inExpression(String needle, com.mapbox.maps.extension.style.expressions.generated.Expression haystack);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression inExpression(double needle, com.mapbox.maps.extension.style.expressions.generated.Expression haystack);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression indexOf(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression interpolate(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.InterpolatorBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression isSupportedScript(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression isSupportedScript(String script);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression length(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression length(String string);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression letExpression(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression lineProgress();
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression literal(double value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression literal(long value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression literal(boolean value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression literal(String value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression literal(java.util.List<?> value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression literal(java.util.HashMap<java.lang.String,java.lang.Object> value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression ln(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression ln(double value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression ln2();
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression log10(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression log10(double value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression log2(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression log2(double value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression lt(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression lte(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression match(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression max(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression max(double... values);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression min(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression min(double... values);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression mod(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression mod(double first, double second);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression neq(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression not(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression not(boolean bool);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression number(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression numberFormat(com.mapbox.maps.extension.style.expressions.generated.Expression input, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.NumberFormatBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression objectExpression(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression pi();
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression pow(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression pow(double first, double second);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression product(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression product(double... double);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression properties();
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression resolvedLocale(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression rgb(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression rgb(double red, double green, double blue);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression rgba(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression rgba(double red, double green, double blue, double alpha);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression round(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression round(double value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression sin(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression sin(double value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression skyRadialProgress();
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression slice(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression sqrt(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression sqrt(double value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression step(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression string(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression subtract(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression subtract(double first, double second);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression subtract(double value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression sum(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression sum(double... double);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression switchCase(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression tan(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression tan(double value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression toBoolean(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression toColor(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression toNumber(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression toRgba(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression toString(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression typeofExpression(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression upcase(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression upcase(String value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression varExpression(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression varExpression(String value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression within(com.mapbox.geojson.Geometry geometry);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression zoom();
  }

}

package com.mapbox.maps.extension.style.expressions.generated {

  public final class Expression extends com.mapbox.bindgen.Value {
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression abs(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression abs(double value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression accumulated();
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression acos(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression acos(double value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression all(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression any(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression array(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression asin(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression asin(double value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression at(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression at(double index, com.mapbox.maps.extension.style.expressions.generated.Expression array);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression atan(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression atan(double value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression boolean(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression ceil(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression ceil(double value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression coalesce(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression collator(boolean caseSensitive = false, boolean diacriticSensitive = false, java.util.Locale locale);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression collator(boolean caseSensitive = false, boolean diacriticSensitive = false, String locale);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression collator(com.mapbox.maps.extension.style.expressions.generated.Expression caseSensitive, com.mapbox.maps.extension.style.expressions.generated.Expression diacriticSensitive, com.mapbox.maps.extension.style.expressions.generated.Expression locale);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression color(@ColorInt int intColor);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression concat(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression concat(java.lang.String... values);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression cos(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression cos(double value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression cubicBezier(com.mapbox.maps.extension.style.expressions.generated.Expression x1, com.mapbox.maps.extension.style.expressions.generated.Expression x2, com.mapbox.maps.extension.style.expressions.generated.Expression x3, com.mapbox.maps.extension.style.expressions.generated.Expression x4);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression distance(com.mapbox.geojson.GeoJson geojson);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression division(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression division(double first, double second);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression downcase(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression downcase(String value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression e();
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression eq(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression exponential(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression featureState(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression floor(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression floor(double value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression format(com.mapbox.maps.extension.style.expressions.types.FormatSection... formatSections);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression fromRaw(String expression);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression geometryType();
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression get(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression get(String key);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression get(String key, com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public inline <reified T> T! getLiteral();
    method public Object? getLiteralValue();
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression gt(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression gte(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression has(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression has(String string, com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression has(String string);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression heatmapDensity();
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression id();
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression image(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression inExpression(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression inExpression(String needle, com.mapbox.maps.extension.style.expressions.generated.Expression haystack);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression inExpression(double needle, com.mapbox.maps.extension.style.expressions.generated.Expression haystack);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression indexOf(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression interpolate(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public boolean isLiteral();
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression isSupportedScript(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression isSupportedScript(String script);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression length(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression length(String string);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression letExpression(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression lineProgress();
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression linear();
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression literal(double value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression literal(long value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression literal(boolean value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression literal(String value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression ln(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression ln(double value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression ln2();
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression log10(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression log10(double value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression log2(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression log2(double value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression lt(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression lte(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression match(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression max(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression max(double... values);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression min(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression min(double... values);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression mod(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression mod(double first, double second);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression neq(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression not(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression not(boolean bool);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression number(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression numberFormat(com.mapbox.maps.extension.style.expressions.generated.Expression number, com.mapbox.maps.extension.style.expressions.generated.Expression? locale = null, com.mapbox.maps.extension.style.expressions.generated.Expression? currency = null, com.mapbox.maps.extension.style.expressions.generated.Expression? minFractionDigits = null, com.mapbox.maps.extension.style.expressions.generated.Expression? maxFractionDigits = null);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression numberFormat(double value, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.NumberFormatBuilder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression objectExpression(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression pi();
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression pow(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression pow(double first, double second);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression product(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression product(double... double);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression properties();
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression resolvedLocale(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression rgb(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression rgb(double red, double green, double blue);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression rgba(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression rgba(double red, double green, double blue, double alpha);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression round(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression round(double value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression sin(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression sin(double value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression skyRadialProgress();
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression slice(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression sqrt(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression sqrt(double value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression step(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression string(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression subtract(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression subtract(double first, double second);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression subtract(double value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression sum(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression sum(double... double);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression switchCase(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression tan(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression tan(double value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression toBoolean(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression toColor(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression toNumber(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression toRgba(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression toString(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression typeofExpression(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression upcase(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression upcase(String value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression varExpression(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression varExpression(String value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression within(com.mapbox.geojson.Geometry geometry);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression zoom();
    property public final Object? literalValue;
    field public static final com.mapbox.maps.extension.style.expressions.generated.Expression.Companion Companion;
  }

  public abstract static class Expression.Builder {
    ctor public Expression.Builder(String operator);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression build();
  }

  @com.mapbox.maps.extension.style.types.ExpressionDsl public static final class Expression.CollatorBuilder extends com.mapbox.maps.extension.style.expressions.generated.Expression.Builder {
    ctor public Expression.CollatorBuilder();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression.CollatorBuilder caseSensitive(com.mapbox.maps.extension.style.expressions.generated.Expression caseSensitive);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression.CollatorBuilder caseSensitive(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression.CollatorBuilder caseSensitive(boolean caseSensitive = false);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression.CollatorBuilder diacriticSensitive(com.mapbox.maps.extension.style.expressions.generated.Expression diacriticSensitive);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression.CollatorBuilder diacriticSensitive(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression.CollatorBuilder diacriticSensitive(boolean diacriticSensitive = false);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression.CollatorBuilder locale(com.mapbox.maps.extension.style.expressions.generated.Expression locale);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression.CollatorBuilder locale(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression.CollatorBuilder locale(String locale);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression.CollatorBuilder locale(java.util.Locale locale);
  }

  public static final class Expression.Companion {
    method public com.mapbox.maps.extension.style.expressions.generated.Expression abs(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression abs(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression abs(double value);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression accumulated();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression acos(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression acos(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression acos(double value);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression all(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression all(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression any(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression any(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression array(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression array(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression asin(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression asin(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression asin(double value);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression at(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression at(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression at(double index, com.mapbox.maps.extension.style.expressions.generated.Expression array);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression atan(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression atan(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression atan(double value);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression boolean(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression boolean(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression ceil(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression ceil(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression ceil(double value);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression coalesce(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression coalesce(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression collator(boolean caseSensitive = false, boolean diacriticSensitive = false, java.util.Locale locale);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression collator(boolean caseSensitive = false, boolean diacriticSensitive = false, String locale);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression collator(com.mapbox.maps.extension.style.expressions.generated.Expression caseSensitive, com.mapbox.maps.extension.style.expressions.generated.Expression diacriticSensitive, com.mapbox.maps.extension.style.expressions.generated.Expression locale);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression collator(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.CollatorBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression color(@ColorInt int intColor);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression concat(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression concat(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression concat(java.lang.String... values);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression cos(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression cos(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression cos(double value);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression cubicBezier(com.mapbox.maps.extension.style.expressions.generated.Expression x1, com.mapbox.maps.extension.style.expressions.generated.Expression x2, com.mapbox.maps.extension.style.expressions.generated.Expression x3, com.mapbox.maps.extension.style.expressions.generated.Expression x4);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression cubicBezier(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression distance(com.mapbox.geojson.GeoJson geojson);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression division(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression division(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression division(double first, double second);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression downcase(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression downcase(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression downcase(String value);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression e();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression eq(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression eq(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression exponential(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression exponential(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression featureState(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression featureState(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression floor(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression floor(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression floor(double value);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression format(com.mapbox.maps.extension.style.expressions.types.FormatSection... formatSections);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression format(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.FormatBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression fromRaw(String expression);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression geometryType();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression get(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression get(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression get(String key);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression get(String key, com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression gt(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression gt(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression gte(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression gte(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression has(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression has(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression has(String string, com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression has(String string);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression heatmapDensity();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression id();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression image(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression image(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression inExpression(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression inExpression(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression inExpression(String needle, com.mapbox.maps.extension.style.expressions.generated.Expression haystack);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression inExpression(double needle, com.mapbox.maps.extension.style.expressions.generated.Expression haystack);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression indexOf(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression indexOf(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression interpolate(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression interpolate(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.InterpolatorBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression isSupportedScript(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression isSupportedScript(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression isSupportedScript(String script);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression length(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression length(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression length(String string);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression letExpression(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression letExpression(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression lineProgress();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression linear();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression literal(double value);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression literal(long value);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression literal(boolean value);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression literal(String value);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression ln(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression ln(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression ln(double value);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression ln2();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression log10(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression log10(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression log10(double value);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression log2(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression log2(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression log2(double value);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression lt(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression lt(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression lte(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression lte(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression match(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression match(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression max(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression max(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression max(double... values);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression min(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression min(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression min(double... values);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression mod(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression mod(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression mod(double first, double second);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression neq(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression neq(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression not(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression not(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression not(boolean bool);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression number(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression number(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression numberFormat(com.mapbox.maps.extension.style.expressions.generated.Expression number, com.mapbox.maps.extension.style.expressions.generated.Expression? locale = null, com.mapbox.maps.extension.style.expressions.generated.Expression? currency = null, com.mapbox.maps.extension.style.expressions.generated.Expression? minFractionDigits = null, com.mapbox.maps.extension.style.expressions.generated.Expression? maxFractionDigits = null);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression numberFormat(com.mapbox.maps.extension.style.expressions.generated.Expression number, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.NumberFormatBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression numberFormat(double value, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.NumberFormatBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression objectExpression(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression objectExpression(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression pi();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression pow(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression pow(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression pow(double first, double second);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression product(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression product(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression product(double... double);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression properties();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression resolvedLocale(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression resolvedLocale(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression rgb(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression rgb(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression rgb(double red, double green, double blue);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression rgba(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression rgba(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression rgba(double red, double green, double blue, double alpha);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression round(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression round(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression round(double value);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression sin(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression sin(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression sin(double value);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression skyRadialProgress();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression slice(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression slice(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression sqrt(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression sqrt(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression sqrt(double value);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression step(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression step(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression string(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression string(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression subtract(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression subtract(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression subtract(double first, double second);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression subtract(double value);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression sum(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression sum(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression sum(double... double);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression switchCase(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression switchCase(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression tan(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression tan(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression tan(double value);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression toBoolean(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression toBoolean(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression toColor(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression toColor(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression toNumber(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression toNumber(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression toRgba(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression toRgba(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression toString(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression toString(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression typeofExpression(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression typeofExpression(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression upcase(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression upcase(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression upcase(String value);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression varExpression(com.mapbox.maps.extension.style.expressions.generated.Expression... expressions);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression varExpression(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression varExpression(String value);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression within(com.mapbox.geojson.Geometry geometry);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression zoom();
  }

  @com.mapbox.maps.extension.style.types.ExpressionDsl public static class Expression.ExpressionBuilder extends com.mapbox.maps.extension.style.expressions.generated.Expression.Builder {
    ctor public Expression.ExpressionBuilder(String operator);
    method public final void abs(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void abs(double value);
    method public final void accumulated();
    method public final void acos(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void acos(double value);
    method public final com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder addArgument(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public final void all(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void any(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void array(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void asin(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void asin(double value);
    method public final void at(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void at(double index, com.mapbox.maps.extension.style.expressions.generated.Expression array);
    method public final void atan(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void atan(double value);
    method public final void boolean(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void ceil(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void ceil(double value);
    method public final void coalesce(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void collator(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.CollatorBuilder,kotlin.Unit> block);
    method public final void color(@ColorInt int intColor);
    method public final void concat(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void concat(java.lang.String... values);
    method public final void cos(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void cos(double value);
    method public final void distance(com.mapbox.geojson.GeoJson geojson);
    method public final void division(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void division(double first, double second);
    method public final void downcase(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void downcase(String value);
    method public final void e();
    method public final void eq(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void featureState(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void floor(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void floor(double value);
    method public final void format(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.FormatBuilder,kotlin.Unit> block);
    method public final void geometryType();
    method public final void get(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void get(String key);
    method public final void get(String key, com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public final void gt(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void gte(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void has(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void has(String string, com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public final void has(String string);
    method public final void heatmapDensity();
    method public final void id();
    method public final void image(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void inExpression(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void inExpression(String needle, com.mapbox.maps.extension.style.expressions.generated.Expression haystack);
    method public final void inExpression(double needle, com.mapbox.maps.extension.style.expressions.generated.Expression haystack);
    method public final void indexOf(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void interpolate(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.InterpolatorBuilder,kotlin.Unit> block);
    method public final void isSupportedScript(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void isSupportedScript(String script);
    method public final void length(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void length(String string);
    method public final void letExpression(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void lineProgress();
    method public final void literal(double value);
    method public final void literal(long value);
    method public final void literal(boolean value);
    method public final void literal(String value);
    method public final void literal(java.util.HashMap<java.lang.String,java.lang.Object> value);
    method public final void literal(java.util.List<?> value);
    method public final void ln(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void ln(double value);
    method public final void ln2();
    method public final void log10(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void log10(double value);
    method public final void log2(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void log2(double value);
    method public final void lt(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void lte(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void match(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void max(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void max(double... values);
    method public final void min(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void min(double... values);
    method public final void mod(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void mod(double first, double second);
    method public final void neq(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void not(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void not(boolean bool);
    method public final void number(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void numberFormat(com.mapbox.maps.extension.style.expressions.generated.Expression input, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.NumberFormatBuilder,kotlin.Unit> block);
    method public final void numberFormat(double value, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.NumberFormatBuilder,kotlin.Unit> block);
    method public final void objectExpression(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void pi();
    method public final void pow(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void pow(double first, double second);
    method public final void product(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void product(double... double);
    method public final void properties();
    method public final void resolvedLocale(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void rgb(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void rgb(double red, double green, double blue);
    method public final void rgba(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void rgba(double red, double green, double blue, double alpha);
    method public final void round(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void round(double value);
    method public final void sin(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void sin(double value);
    method public final void skyRadialProgress();
    method public final void slice(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void sqrt(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void sqrt(double value);
    method public final void step(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void stop(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void stop(double key, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void string(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void subtract(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void subtract(double first, double second);
    method public final void subtract(double value);
    method public final void sum(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void sum(double... double);
    method public final void switchCase(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void tan(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void tan(double value);
    method public final void toBoolean(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void toColor(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void toNumber(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void toRgba(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void toString(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void typeofExpression(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void upcase(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void upcase(String value);
    method public final void varExpression(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public final void varExpression(String value);
    method public final void within(com.mapbox.geojson.Geometry geometry);
    method public final void zoom();
  }

  @com.mapbox.maps.extension.style.types.ExpressionDsl public static final class Expression.FormatBuilder extends com.mapbox.maps.extension.style.expressions.generated.Expression.Builder {
    ctor public Expression.FormatBuilder();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression.FormatBuilder formatSection(com.mapbox.maps.extension.style.expressions.generated.Expression content);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression.FormatBuilder formatSection(com.mapbox.maps.extension.style.expressions.generated.Expression content, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.FormatSectionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression.FormatBuilder formatSection(String text);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression.FormatBuilder formatSection(String text, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.FormatSectionBuilder,kotlin.Unit> block);
  }

  @com.mapbox.maps.extension.style.types.ExpressionDsl public static final class Expression.FormatSectionBuilder {
    ctor public Expression.FormatSectionBuilder(com.mapbox.maps.extension.style.expressions.generated.Expression content);
    method public java.util.List<com.mapbox.maps.extension.style.expressions.generated.Expression> build();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression.FormatSectionBuilder fontScale(double fontScale);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression.FormatSectionBuilder fontScale(com.mapbox.maps.extension.style.expressions.generated.Expression fontScale);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression.FormatSectionBuilder fontScale(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression.FormatSectionBuilder textColor(@ColorInt int textColor);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression.FormatSectionBuilder textColor(String textColor);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression.FormatSectionBuilder textColor(com.mapbox.maps.extension.style.expressions.generated.Expression textColor);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression.FormatSectionBuilder textColor(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression.FormatSectionBuilder textFont(java.util.List<java.lang.String> textFont);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression.FormatSectionBuilder textFont(com.mapbox.maps.extension.style.expressions.generated.Expression textFont);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression.FormatSectionBuilder textFont(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
  }

  @com.mapbox.maps.extension.style.types.ExpressionDsl public static final class Expression.InterpolatorBuilder extends com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder {
    ctor public Expression.InterpolatorBuilder(String operator);
    method public void cubicBezier(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public void exponential(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public void linear();
  }

  @com.mapbox.maps.extension.style.types.ExpressionDsl public static final class Expression.NumberFormatBuilder extends com.mapbox.maps.extension.style.expressions.generated.Expression.Builder {
    ctor public Expression.NumberFormatBuilder(com.mapbox.maps.extension.style.expressions.generated.Expression input);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression.NumberFormatBuilder currency(String currency);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression.NumberFormatBuilder currency(com.mapbox.maps.extension.style.expressions.generated.Expression currency);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression.NumberFormatBuilder currency(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression.NumberFormatBuilder locale(String locale);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression.NumberFormatBuilder locale(com.mapbox.maps.extension.style.expressions.generated.Expression locale);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression.NumberFormatBuilder locale(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression.NumberFormatBuilder maxFractionDigits(int maxFractionDigits);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression.NumberFormatBuilder maxFractionDigits(com.mapbox.maps.extension.style.expressions.generated.Expression maxFractionDigits);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression.NumberFormatBuilder maxFractionDigits(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression.NumberFormatBuilder minFractionDigits(int minFractionDigits);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression.NumberFormatBuilder minFractionDigits(com.mapbox.maps.extension.style.expressions.generated.Expression minFractionDigits);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression.NumberFormatBuilder minFractionDigits(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.expressions.generated.Expression.ExpressionBuilder,kotlin.Unit> block);
  }

}

package com.mapbox.maps.extension.style.expressions.types {

  public final class FormatSection {
    ctor public FormatSection(com.mapbox.maps.extension.style.expressions.generated.Expression content, com.mapbox.maps.extension.style.expressions.generated.Expression? fontScale = null, com.mapbox.maps.extension.style.expressions.generated.Expression? textFont = null, com.mapbox.maps.extension.style.expressions.generated.Expression? textColor = null);
    ctor public FormatSection(com.mapbox.maps.extension.style.expressions.generated.Expression content, com.mapbox.maps.extension.style.expressions.generated.Expression? fontScale = null, com.mapbox.maps.extension.style.expressions.generated.Expression? textFont = null);
    ctor public FormatSection(com.mapbox.maps.extension.style.expressions.generated.Expression content, com.mapbox.maps.extension.style.expressions.generated.Expression? fontScale = null);
    ctor public FormatSection(com.mapbox.maps.extension.style.expressions.generated.Expression content);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression component1();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? component2();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? component3();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? component4();
    method public com.mapbox.maps.extension.style.expressions.types.FormatSection copy(com.mapbox.maps.extension.style.expressions.generated.Expression content, com.mapbox.maps.extension.style.expressions.generated.Expression? fontScale, com.mapbox.maps.extension.style.expressions.generated.Expression? textFont, com.mapbox.maps.extension.style.expressions.generated.Expression? textColor);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression getContent();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getFontScale();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getTextColor();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getTextFont();
    method public void setFontScale(com.mapbox.maps.extension.style.expressions.generated.Expression? fontScale);
    method public void setTextColor(com.mapbox.maps.extension.style.expressions.generated.Expression? textColor);
    method public void setTextFont(com.mapbox.maps.extension.style.expressions.generated.Expression? textFont);
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression content;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? fontScale;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? textColor;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? textFont;
  }

}

package com.mapbox.maps.extension.style.image {

  public final class ImageExtensionImpl implements com.mapbox.maps.extension.style.StyleContract.StyleImageExtension {
    ctor public ImageExtensionImpl(com.mapbox.maps.extension.style.image.ImageExtensionImpl.Builder builder);
    method public void bindTo(com.mapbox.maps.extension.style.StyleInterface delegate);
  }

  public static final class ImageExtensionImpl.Builder {
    ctor public ImageExtensionImpl.Builder(String imageId);
    method public com.mapbox.maps.extension.style.image.ImageExtensionImpl.Builder bitmap(android.graphics.Bitmap bitmap);
    method public com.mapbox.maps.extension.style.image.ImageExtensionImpl build();
    method public com.mapbox.maps.extension.style.image.ImageExtensionImpl.Builder content(com.mapbox.maps.ImageContent content);
    method public String getImageId();
    method public com.mapbox.maps.extension.style.image.ImageExtensionImpl.Builder image(com.mapbox.maps.Image image);
    method public com.mapbox.maps.extension.style.image.ImageExtensionImpl.Builder scale(float scale);
    method public com.mapbox.maps.extension.style.image.ImageExtensionImpl.Builder sdf(boolean sdf = false);
    method public com.mapbox.maps.extension.style.image.ImageExtensionImpl.Builder stretchX(java.util.List<com.mapbox.maps.ImageStretches> stretchX = listOf());
    method public com.mapbox.maps.extension.style.image.ImageExtensionImpl.Builder stretchY(java.util.List<com.mapbox.maps.ImageStretches> stretchY = listOf());
    property public final String imageId;
  }

  public final class ImageNinePatchExtensionImpl implements com.mapbox.maps.extension.style.StyleContract.StyleImageExtension {
    ctor public ImageNinePatchExtensionImpl(com.mapbox.maps.extension.style.image.ImageNinePatchExtensionImpl.Builder builder);
    method public void bindTo(com.mapbox.maps.extension.style.StyleInterface delegate);
  }

  public static final class ImageNinePatchExtensionImpl.Builder {
    ctor public ImageNinePatchExtensionImpl.Builder(String imageId, android.graphics.Bitmap bitmap);
    method public com.mapbox.maps.extension.style.image.ImageNinePatchExtensionImpl build();
    method public android.graphics.Bitmap getBitmap();
    method public String getImageId();
    method public com.mapbox.maps.extension.style.image.ImageNinePatchExtensionImpl.Builder scale(float scale);
    method public com.mapbox.maps.extension.style.image.ImageNinePatchExtensionImpl.Builder sdf(boolean sdf = false);
    property public final android.graphics.Bitmap bitmap;
    property public final String imageId;
  }

  public final class ImageUtils {
    method public static void addImage(com.mapbox.maps.extension.style.StyleInterface, com.mapbox.maps.extension.style.StyleContract.StyleImageExtension image);
    method public static void addImage9Patch(com.mapbox.maps.extension.style.StyleInterface, com.mapbox.maps.extension.style.StyleContract.StyleImageExtension image);
    method public static com.mapbox.maps.extension.style.image.ImageExtensionImpl image(String imageId, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.image.ImageExtensionImpl.Builder,kotlin.Unit> block);
    method public static com.mapbox.maps.extension.style.image.ImageNinePatchExtensionImpl image9Patch(String imageId, android.graphics.Bitmap bitmap, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.image.ImageNinePatchExtensionImpl.Builder,kotlin.Unit>? block = null);
    method public static com.mapbox.maps.extension.style.image.ImageNinePatchExtensionImpl image9Patch(String imageId, android.graphics.Bitmap bitmap);
  }

  public final class NinePatchImage {
    ctor public NinePatchImage(com.mapbox.maps.Image internalImage, java.util.List<com.mapbox.maps.ImageStretches> stretchX, java.util.List<com.mapbox.maps.ImageStretches> stretchY, com.mapbox.maps.ImageContent imageContent);
    method public com.mapbox.maps.Image component1();
    method public java.util.List<com.mapbox.maps.ImageStretches> component2();
    method public java.util.List<com.mapbox.maps.ImageStretches> component3();
    method public com.mapbox.maps.ImageContent component4();
    method public com.mapbox.maps.extension.style.image.NinePatchImage copy(com.mapbox.maps.Image internalImage, java.util.List<com.mapbox.maps.ImageStretches> stretchX, java.util.List<com.mapbox.maps.ImageStretches> stretchY, com.mapbox.maps.ImageContent imageContent);
    method public com.mapbox.maps.ImageContent getImageContent();
    method public com.mapbox.maps.Image getInternalImage();
    method public java.util.List<com.mapbox.maps.ImageStretches> getStretchX();
    method public java.util.List<com.mapbox.maps.ImageStretches> getStretchY();
    property public final com.mapbox.maps.ImageContent imageContent;
    property public final com.mapbox.maps.Image internalImage;
    property public final java.util.List<com.mapbox.maps.ImageStretches> stretchX;
    property public final java.util.List<com.mapbox.maps.ImageStretches> stretchY;
  }

  public final class NinePatchUtils {
    method public static com.mapbox.bindgen.Expected<java.lang.String,com.mapbox.bindgen.None> addImage9Patch(com.mapbox.maps.extension.style.StyleInterface, String imageId, android.graphics.Bitmap bitmap, float scale = pixelRatio, boolean sdf = false);
    method public static com.mapbox.bindgen.Expected<java.lang.String,com.mapbox.bindgen.None> addImage9Patch(com.mapbox.maps.extension.style.StyleInterface, String imageId, android.graphics.Bitmap bitmap, float scale = pixelRatio);
    method public static com.mapbox.bindgen.Expected<java.lang.String,com.mapbox.bindgen.None> addImage9Patch(com.mapbox.maps.extension.style.StyleInterface, String imageId, android.graphics.Bitmap bitmap);
    method public static com.mapbox.maps.extension.style.image.NinePatchImage parse9PatchBitmap(android.graphics.Bitmap);
  }

}

package com.mapbox.maps.extension.style.layers {

  public abstract class Layer implements com.mapbox.maps.extension.style.StyleContract.StyleLayerExtension {
    ctor public Layer();
    method public final void bindTo(com.mapbox.maps.extension.style.StyleInterface delegate);
    method public void bindTo(com.mapbox.maps.extension.style.StyleInterface delegate, com.mapbox.maps.LayerPosition? position);
    method public abstract String getLayerId();
    method public abstract Double? getMaxZoom();
    method public abstract Double? getMinZoom();
    method public abstract com.mapbox.maps.extension.style.layers.properties.generated.Visibility? getVisibility();
    method public abstract com.mapbox.maps.extension.style.layers.Layer maxZoom(double maxZoom);
    method public abstract com.mapbox.maps.extension.style.layers.Layer minZoom(double minZoom);
    method public abstract com.mapbox.maps.extension.style.layers.Layer visibility(com.mapbox.maps.extension.style.layers.properties.generated.Visibility visibility);
    property public abstract String layerId;
    property public abstract Double? maxZoom;
    property public abstract Double? minZoom;
    property public abstract com.mapbox.maps.extension.style.layers.properties.generated.Visibility? visibility;
    field public static final com.mapbox.maps.extension.style.layers.Layer.Companion Companion;
  }

  public static final class Layer.Companion {
  }

  public final class LayerUtils {
    method public static void addLayer(com.mapbox.maps.extension.style.StyleInterface, com.mapbox.maps.extension.style.StyleContract.StyleLayerExtension layer);
    method public static void addLayerAbove(com.mapbox.maps.extension.style.StyleInterface, com.mapbox.maps.extension.style.StyleContract.StyleLayerExtension layer, String? above);
    method public static void addLayerAt(com.mapbox.maps.extension.style.StyleInterface, com.mapbox.maps.extension.style.StyleContract.StyleLayerExtension layer, Integer? index);
    method public static void addLayerBelow(com.mapbox.maps.extension.style.StyleInterface, com.mapbox.maps.extension.style.StyleContract.StyleLayerExtension layer, String? below);
    method public static void addPersistentLayer(com.mapbox.maps.extension.style.StyleInterface, com.mapbox.maps.extension.style.layers.Layer layer, com.mapbox.maps.LayerPosition? position = null);
    method public static void addPersistentLayer(com.mapbox.maps.extension.style.StyleInterface, com.mapbox.maps.extension.style.layers.Layer layer);
    method public static com.mapbox.maps.extension.style.layers.Layer? getLayer(com.mapbox.maps.StyleManagerInterface, String layerId);
    method public static inline <reified T extends com.mapbox.maps.extension.style.layers.Layer> T! getLayerAs(com.mapbox.maps.StyleManagerInterface, String layerId);
    method public static Boolean? isPersistent(com.mapbox.maps.extension.style.layers.Layer);
  }

}

package com.mapbox.maps.extension.style.layers.generated {

  @UiThread public final class BackgroundLayer extends com.mapbox.maps.extension.style.layers.Layer implements com.mapbox.maps.extension.style.layers.generated.BackgroundLayerDsl {
    ctor public BackgroundLayer(String layerId);
    method public com.mapbox.maps.extension.style.layers.generated.BackgroundLayer backgroundColor(String backgroundColor);
    method public com.mapbox.maps.extension.style.layers.generated.BackgroundLayer backgroundColor(com.mapbox.maps.extension.style.expressions.generated.Expression backgroundColor);
    method public com.mapbox.maps.extension.style.layers.generated.BackgroundLayer backgroundColor(@ColorInt int backgroundColor);
    method public com.mapbox.maps.extension.style.layers.generated.BackgroundLayer backgroundColorTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.BackgroundLayer backgroundColorTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.BackgroundLayer backgroundOpacity(double backgroundOpacity);
    method public com.mapbox.maps.extension.style.layers.generated.BackgroundLayer backgroundOpacity(com.mapbox.maps.extension.style.expressions.generated.Expression backgroundOpacity);
    method public com.mapbox.maps.extension.style.layers.generated.BackgroundLayer backgroundOpacityTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.BackgroundLayer backgroundOpacityTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.BackgroundLayer backgroundPattern(String backgroundPattern);
    method public com.mapbox.maps.extension.style.layers.generated.BackgroundLayer backgroundPattern(com.mapbox.maps.extension.style.expressions.generated.Expression backgroundPattern);
    method public com.mapbox.maps.extension.style.layers.generated.BackgroundLayer backgroundPatternTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.BackgroundLayer backgroundPatternTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public String? getBackgroundColor();
    method @ColorInt public Integer? getBackgroundColorAsColorInt();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getBackgroundColorAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getBackgroundColorTransition();
    method public Double? getBackgroundOpacity();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getBackgroundOpacityAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getBackgroundOpacityTransition();
    method public String? getBackgroundPattern();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getBackgroundPatternAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getBackgroundPatternTransition();
    method public String getLayerId();
    method public Double? getMaxZoom();
    method public Double? getMinZoom();
    method public String getType$metalava_module();
    method public com.mapbox.maps.extension.style.layers.properties.generated.Visibility? getVisibility();
    method public com.mapbox.maps.extension.style.layers.generated.BackgroundLayer maxZoom(double maxZoom);
    method public com.mapbox.maps.extension.style.layers.generated.BackgroundLayer minZoom(double minZoom);
    method public com.mapbox.maps.extension.style.layers.generated.BackgroundLayer visibility(com.mapbox.maps.extension.style.layers.properties.generated.Visibility visibility);
    property public final String? backgroundColor;
    property @ColorInt public final Integer? backgroundColorAsColorInt;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? backgroundColorAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? backgroundColorTransition;
    property public final Double? backgroundOpacity;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? backgroundOpacityAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? backgroundOpacityTransition;
    property public final String? backgroundPattern;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? backgroundPatternAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? backgroundPatternTransition;
    property public String layerId;
    property public Double? maxZoom;
    property public Double? minZoom;
    property public com.mapbox.maps.extension.style.layers.properties.generated.Visibility? visibility;
    field public static final com.mapbox.maps.extension.style.layers.generated.BackgroundLayer.Companion Companion;
  }

  public static final class BackgroundLayer.Companion {
    method public String? getDefaultBackgroundColor();
    method @ColorInt public Integer? getDefaultBackgroundColorAsColorInt();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultBackgroundColorAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultBackgroundColorTransition();
    method public Double? getDefaultBackgroundOpacity();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultBackgroundOpacityAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultBackgroundOpacityTransition();
    method public String? getDefaultBackgroundPattern();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultBackgroundPatternAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultBackgroundPatternTransition();
    method public Double? getDefaultMaxZoom();
    method public Double? getDefaultMinZoom();
    method public com.mapbox.maps.extension.style.layers.properties.generated.Visibility? getDefaultVisibility();
    property public final String? defaultBackgroundColor;
    property @ColorInt public final Integer? defaultBackgroundColorAsColorInt;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultBackgroundColorAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultBackgroundColorTransition;
    property public final Double? defaultBackgroundOpacity;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultBackgroundOpacityAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultBackgroundOpacityTransition;
    property public final String? defaultBackgroundPattern;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultBackgroundPatternAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultBackgroundPatternTransition;
    property public final Double? defaultMaxZoom;
    property public final Double? defaultMinZoom;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.Visibility? defaultVisibility;
  }

  @com.mapbox.maps.extension.style.types.LayersDsl public interface BackgroundLayerDsl {
    method public com.mapbox.maps.extension.style.layers.generated.BackgroundLayer backgroundColor(String backgroundColor = "#000000");
    method public com.mapbox.maps.extension.style.layers.generated.BackgroundLayer backgroundColor(com.mapbox.maps.extension.style.expressions.generated.Expression backgroundColor);
    method public com.mapbox.maps.extension.style.layers.generated.BackgroundLayer backgroundColor(@ColorInt int backgroundColor);
    method public com.mapbox.maps.extension.style.layers.generated.BackgroundLayer backgroundColorTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.BackgroundLayer backgroundColorTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.BackgroundLayer backgroundOpacity(double backgroundOpacity = 1.0);
    method public com.mapbox.maps.extension.style.layers.generated.BackgroundLayer backgroundOpacity(com.mapbox.maps.extension.style.expressions.generated.Expression backgroundOpacity);
    method public com.mapbox.maps.extension.style.layers.generated.BackgroundLayer backgroundOpacityTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.BackgroundLayer backgroundOpacityTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.BackgroundLayer backgroundPattern(String backgroundPattern);
    method public com.mapbox.maps.extension.style.layers.generated.BackgroundLayer backgroundPattern(com.mapbox.maps.extension.style.expressions.generated.Expression backgroundPattern);
    method public com.mapbox.maps.extension.style.layers.generated.BackgroundLayer backgroundPatternTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.BackgroundLayer backgroundPatternTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.BackgroundLayer maxZoom(double maxZoom);
    method public com.mapbox.maps.extension.style.layers.generated.BackgroundLayer minZoom(double minZoom);
    method public com.mapbox.maps.extension.style.layers.generated.BackgroundLayer visibility(com.mapbox.maps.extension.style.layers.properties.generated.Visibility visibility);
  }

  public final class BackgroundLayerKt {
    method public static com.mapbox.maps.extension.style.layers.generated.BackgroundLayer backgroundLayer(String layerId, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.layers.generated.BackgroundLayerDsl,kotlin.Unit> block);
  }

  @UiThread public final class CircleLayer extends com.mapbox.maps.extension.style.layers.Layer implements com.mapbox.maps.extension.style.layers.generated.CircleLayerDsl {
    ctor public CircleLayer(String layerId, String sourceId);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleBlur(double circleBlur);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleBlur(com.mapbox.maps.extension.style.expressions.generated.Expression circleBlur);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleBlurTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleBlurTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleColor(String circleColor);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleColor(com.mapbox.maps.extension.style.expressions.generated.Expression circleColor);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleColor(@ColorInt int circleColor);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleColorTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleColorTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleOpacity(double circleOpacity);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleOpacity(com.mapbox.maps.extension.style.expressions.generated.Expression circleOpacity);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleOpacityTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleOpacityTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circlePitchAlignment(com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchAlignment circlePitchAlignment);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circlePitchAlignment(com.mapbox.maps.extension.style.expressions.generated.Expression circlePitchAlignment);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circlePitchScale(com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchScale circlePitchScale);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circlePitchScale(com.mapbox.maps.extension.style.expressions.generated.Expression circlePitchScale);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleRadius(double circleRadius);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleRadius(com.mapbox.maps.extension.style.expressions.generated.Expression circleRadius);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleRadiusTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleRadiusTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleSortKey(double circleSortKey);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleSortKey(com.mapbox.maps.extension.style.expressions.generated.Expression circleSortKey);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleStrokeColor(String circleStrokeColor);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleStrokeColor(com.mapbox.maps.extension.style.expressions.generated.Expression circleStrokeColor);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleStrokeColor(@ColorInt int circleStrokeColor);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleStrokeColorTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleStrokeColorTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleStrokeOpacity(double circleStrokeOpacity);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleStrokeOpacity(com.mapbox.maps.extension.style.expressions.generated.Expression circleStrokeOpacity);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleStrokeOpacityTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleStrokeOpacityTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleStrokeWidth(double circleStrokeWidth);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleStrokeWidth(com.mapbox.maps.extension.style.expressions.generated.Expression circleStrokeWidth);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleStrokeWidthTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleStrokeWidthTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleTranslate(java.util.List<java.lang.Double> circleTranslate);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleTranslate(com.mapbox.maps.extension.style.expressions.generated.Expression circleTranslate);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleTranslateAnchor(com.mapbox.maps.extension.style.layers.properties.generated.CircleTranslateAnchor circleTranslateAnchor);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleTranslateAnchor(com.mapbox.maps.extension.style.expressions.generated.Expression circleTranslateAnchor);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleTranslateTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleTranslateTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer filter(com.mapbox.maps.extension.style.expressions.generated.Expression filter);
    method public Double? getCircleBlur();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getCircleBlurAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getCircleBlurTransition();
    method public String? getCircleColor();
    method @ColorInt public Integer? getCircleColorAsColorInt();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getCircleColorAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getCircleColorTransition();
    method public Double? getCircleOpacity();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getCircleOpacityAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getCircleOpacityTransition();
    method public com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchAlignment? getCirclePitchAlignment();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getCirclePitchAlignmentAsExpression();
    method public com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchScale? getCirclePitchScale();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getCirclePitchScaleAsExpression();
    method public Double? getCircleRadius();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getCircleRadiusAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getCircleRadiusTransition();
    method public Double? getCircleSortKey();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getCircleSortKeyAsExpression();
    method public String? getCircleStrokeColor();
    method @ColorInt public Integer? getCircleStrokeColorAsColorInt();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getCircleStrokeColorAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getCircleStrokeColorTransition();
    method public Double? getCircleStrokeOpacity();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getCircleStrokeOpacityAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getCircleStrokeOpacityTransition();
    method public Double? getCircleStrokeWidth();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getCircleStrokeWidthAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getCircleStrokeWidthTransition();
    method public java.util.List<java.lang.Double>? getCircleTranslate();
    method public com.mapbox.maps.extension.style.layers.properties.generated.CircleTranslateAnchor? getCircleTranslateAnchor();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getCircleTranslateAnchorAsExpression();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getCircleTranslateAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getCircleTranslateTransition();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getFilter();
    method public String getLayerId();
    method public Double? getMaxZoom();
    method public Double? getMinZoom();
    method public String getSourceId();
    method public String? getSourceLayer();
    method public String getType$metalava_module();
    method public com.mapbox.maps.extension.style.layers.properties.generated.Visibility? getVisibility();
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer maxZoom(double maxZoom);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer minZoom(double minZoom);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer sourceLayer(String sourceLayer);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer visibility(com.mapbox.maps.extension.style.layers.properties.generated.Visibility visibility);
    property public final Double? circleBlur;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? circleBlurAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? circleBlurTransition;
    property public final String? circleColor;
    property @ColorInt public final Integer? circleColorAsColorInt;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? circleColorAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? circleColorTransition;
    property public final Double? circleOpacity;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? circleOpacityAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? circleOpacityTransition;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchAlignment? circlePitchAlignment;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? circlePitchAlignmentAsExpression;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchScale? circlePitchScale;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? circlePitchScaleAsExpression;
    property public final Double? circleRadius;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? circleRadiusAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? circleRadiusTransition;
    property public final Double? circleSortKey;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? circleSortKeyAsExpression;
    property public final String? circleStrokeColor;
    property @ColorInt public final Integer? circleStrokeColorAsColorInt;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? circleStrokeColorAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? circleStrokeColorTransition;
    property public final Double? circleStrokeOpacity;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? circleStrokeOpacityAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? circleStrokeOpacityTransition;
    property public final Double? circleStrokeWidth;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? circleStrokeWidthAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? circleStrokeWidthTransition;
    property public final java.util.List<java.lang.Double>? circleTranslate;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.CircleTranslateAnchor? circleTranslateAnchor;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? circleTranslateAnchorAsExpression;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? circleTranslateAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? circleTranslateTransition;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? filter;
    property public String layerId;
    property public Double? maxZoom;
    property public Double? minZoom;
    property public final String sourceId;
    property public final String? sourceLayer;
    property public com.mapbox.maps.extension.style.layers.properties.generated.Visibility? visibility;
    field public static final com.mapbox.maps.extension.style.layers.generated.CircleLayer.Companion Companion;
  }

  public static final class CircleLayer.Companion {
    method public Double? getDefaultCircleBlur();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultCircleBlurAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultCircleBlurTransition();
    method public String? getDefaultCircleColor();
    method @ColorInt public Integer? getDefaultCircleColorAsColorInt();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultCircleColorAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultCircleColorTransition();
    method public Double? getDefaultCircleOpacity();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultCircleOpacityAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultCircleOpacityTransition();
    method public com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchAlignment? getDefaultCirclePitchAlignment();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultCirclePitchAlignmentAsExpression();
    method public com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchScale? getDefaultCirclePitchScale();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultCirclePitchScaleAsExpression();
    method public Double? getDefaultCircleRadius();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultCircleRadiusAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultCircleRadiusTransition();
    method public Double? getDefaultCircleSortKey();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultCircleSortKeyAsExpression();
    method public String? getDefaultCircleStrokeColor();
    method @ColorInt public Integer? getDefaultCircleStrokeColorAsColorInt();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultCircleStrokeColorAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultCircleStrokeColorTransition();
    method public Double? getDefaultCircleStrokeOpacity();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultCircleStrokeOpacityAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultCircleStrokeOpacityTransition();
    method public Double? getDefaultCircleStrokeWidth();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultCircleStrokeWidthAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultCircleStrokeWidthTransition();
    method public java.util.List<java.lang.Double>? getDefaultCircleTranslate();
    method public com.mapbox.maps.extension.style.layers.properties.generated.CircleTranslateAnchor? getDefaultCircleTranslateAnchor();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultCircleTranslateAnchorAsExpression();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultCircleTranslateAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultCircleTranslateTransition();
    method public Double? getDefaultMaxZoom();
    method public Double? getDefaultMinZoom();
    method public com.mapbox.maps.extension.style.layers.properties.generated.Visibility? getDefaultVisibility();
    property public final Double? defaultCircleBlur;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultCircleBlurAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultCircleBlurTransition;
    property public final String? defaultCircleColor;
    property @ColorInt public final Integer? defaultCircleColorAsColorInt;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultCircleColorAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultCircleColorTransition;
    property public final Double? defaultCircleOpacity;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultCircleOpacityAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultCircleOpacityTransition;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchAlignment? defaultCirclePitchAlignment;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultCirclePitchAlignmentAsExpression;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchScale? defaultCirclePitchScale;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultCirclePitchScaleAsExpression;
    property public final Double? defaultCircleRadius;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultCircleRadiusAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultCircleRadiusTransition;
    property public final Double? defaultCircleSortKey;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultCircleSortKeyAsExpression;
    property public final String? defaultCircleStrokeColor;
    property @ColorInt public final Integer? defaultCircleStrokeColorAsColorInt;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultCircleStrokeColorAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultCircleStrokeColorTransition;
    property public final Double? defaultCircleStrokeOpacity;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultCircleStrokeOpacityAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultCircleStrokeOpacityTransition;
    property public final Double? defaultCircleStrokeWidth;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultCircleStrokeWidthAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultCircleStrokeWidthTransition;
    property public final java.util.List<java.lang.Double>? defaultCircleTranslate;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.CircleTranslateAnchor? defaultCircleTranslateAnchor;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultCircleTranslateAnchorAsExpression;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultCircleTranslateAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultCircleTranslateTransition;
    property public final Double? defaultMaxZoom;
    property public final Double? defaultMinZoom;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.Visibility? defaultVisibility;
  }

  @com.mapbox.maps.extension.style.types.LayersDsl public interface CircleLayerDsl {
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleBlur(double circleBlur = 0.0);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleBlur(com.mapbox.maps.extension.style.expressions.generated.Expression circleBlur);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleBlurTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleBlurTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleColor(String circleColor = "#000000");
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleColor(com.mapbox.maps.extension.style.expressions.generated.Expression circleColor);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleColor(@ColorInt int circleColor);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleColorTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleColorTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleOpacity(double circleOpacity = 1.0);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleOpacity(com.mapbox.maps.extension.style.expressions.generated.Expression circleOpacity);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleOpacityTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleOpacityTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circlePitchAlignment(com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchAlignment circlePitchAlignment = com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchAlignment.VIEWPORT);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circlePitchAlignment(com.mapbox.maps.extension.style.expressions.generated.Expression circlePitchAlignment);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circlePitchScale(com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchScale circlePitchScale = com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchScale.MAP);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circlePitchScale(com.mapbox.maps.extension.style.expressions.generated.Expression circlePitchScale);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleRadius(double circleRadius = 5.0);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleRadius(com.mapbox.maps.extension.style.expressions.generated.Expression circleRadius);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleRadiusTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleRadiusTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleSortKey(double circleSortKey);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleSortKey(com.mapbox.maps.extension.style.expressions.generated.Expression circleSortKey);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleStrokeColor(String circleStrokeColor = "#000000");
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleStrokeColor(com.mapbox.maps.extension.style.expressions.generated.Expression circleStrokeColor);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleStrokeColor(@ColorInt int circleStrokeColor);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleStrokeColorTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleStrokeColorTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleStrokeOpacity(double circleStrokeOpacity = 1.0);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleStrokeOpacity(com.mapbox.maps.extension.style.expressions.generated.Expression circleStrokeOpacity);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleStrokeOpacityTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleStrokeOpacityTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleStrokeWidth(double circleStrokeWidth = 0.0);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleStrokeWidth(com.mapbox.maps.extension.style.expressions.generated.Expression circleStrokeWidth);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleStrokeWidthTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleStrokeWidthTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleTranslate(java.util.List<java.lang.Double> circleTranslate = listOf(0.0, 0.0));
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleTranslate(com.mapbox.maps.extension.style.expressions.generated.Expression circleTranslate);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleTranslateAnchor(com.mapbox.maps.extension.style.layers.properties.generated.CircleTranslateAnchor circleTranslateAnchor = com.mapbox.maps.extension.style.layers.properties.generated.CircleTranslateAnchor.MAP);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleTranslateAnchor(com.mapbox.maps.extension.style.expressions.generated.Expression circleTranslateAnchor);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleTranslateTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer circleTranslateTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer filter(com.mapbox.maps.extension.style.expressions.generated.Expression filter);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer maxZoom(double maxZoom);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer minZoom(double minZoom);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer sourceLayer(String sourceLayer);
    method public com.mapbox.maps.extension.style.layers.generated.CircleLayer visibility(com.mapbox.maps.extension.style.layers.properties.generated.Visibility visibility);
  }

  public final class CircleLayerKt {
    method public static com.mapbox.maps.extension.style.layers.generated.CircleLayer circleLayer(String layerId, String sourceId, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.layers.generated.CircleLayerDsl,kotlin.Unit> block);
  }

  @UiThread public final class FillExtrusionLayer extends com.mapbox.maps.extension.style.layers.Layer implements com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayerDsl {
    ctor public FillExtrusionLayer(String layerId, String sourceId);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionBase(double fillExtrusionBase);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionBase(com.mapbox.maps.extension.style.expressions.generated.Expression fillExtrusionBase);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionBaseTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionBaseTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionColor(String fillExtrusionColor);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionColor(com.mapbox.maps.extension.style.expressions.generated.Expression fillExtrusionColor);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionColor(@ColorInt int fillExtrusionColor);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionColorTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionColorTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionHeight(double fillExtrusionHeight);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionHeight(com.mapbox.maps.extension.style.expressions.generated.Expression fillExtrusionHeight);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionHeightTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionHeightTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionOpacity(double fillExtrusionOpacity);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionOpacity(com.mapbox.maps.extension.style.expressions.generated.Expression fillExtrusionOpacity);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionOpacityTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionOpacityTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionPattern(String fillExtrusionPattern);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionPattern(com.mapbox.maps.extension.style.expressions.generated.Expression fillExtrusionPattern);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionPatternTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionPatternTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionTranslate(java.util.List<java.lang.Double> fillExtrusionTranslate);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionTranslate(com.mapbox.maps.extension.style.expressions.generated.Expression fillExtrusionTranslate);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionTranslateAnchor(com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionTranslateAnchor fillExtrusionTranslateAnchor);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionTranslateAnchor(com.mapbox.maps.extension.style.expressions.generated.Expression fillExtrusionTranslateAnchor);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionTranslateTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionTranslateTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionVerticalGradient(boolean fillExtrusionVerticalGradient);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionVerticalGradient(com.mapbox.maps.extension.style.expressions.generated.Expression fillExtrusionVerticalGradient);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer filter(com.mapbox.maps.extension.style.expressions.generated.Expression filter);
    method public Double? getFillExtrusionBase();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getFillExtrusionBaseAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getFillExtrusionBaseTransition();
    method public String? getFillExtrusionColor();
    method @ColorInt public Integer? getFillExtrusionColorAsColorInt();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getFillExtrusionColorAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getFillExtrusionColorTransition();
    method public Double? getFillExtrusionHeight();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getFillExtrusionHeightAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getFillExtrusionHeightTransition();
    method public Double? getFillExtrusionOpacity();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getFillExtrusionOpacityAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getFillExtrusionOpacityTransition();
    method public String? getFillExtrusionPattern();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getFillExtrusionPatternAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getFillExtrusionPatternTransition();
    method public java.util.List<java.lang.Double>? getFillExtrusionTranslate();
    method public com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionTranslateAnchor? getFillExtrusionTranslateAnchor();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getFillExtrusionTranslateAnchorAsExpression();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getFillExtrusionTranslateAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getFillExtrusionTranslateTransition();
    method public Boolean? getFillExtrusionVerticalGradient();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getFillExtrusionVerticalGradientAsExpression();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getFilter();
    method public String getLayerId();
    method public Double? getMaxZoom();
    method public Double? getMinZoom();
    method public String getSourceId();
    method public String? getSourceLayer();
    method public String getType$metalava_module();
    method public com.mapbox.maps.extension.style.layers.properties.generated.Visibility? getVisibility();
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer maxZoom(double maxZoom);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer minZoom(double minZoom);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer sourceLayer(String sourceLayer);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer visibility(com.mapbox.maps.extension.style.layers.properties.generated.Visibility visibility);
    property public final Double? fillExtrusionBase;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? fillExtrusionBaseAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? fillExtrusionBaseTransition;
    property public final String? fillExtrusionColor;
    property @ColorInt public final Integer? fillExtrusionColorAsColorInt;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? fillExtrusionColorAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? fillExtrusionColorTransition;
    property public final Double? fillExtrusionHeight;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? fillExtrusionHeightAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? fillExtrusionHeightTransition;
    property public final Double? fillExtrusionOpacity;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? fillExtrusionOpacityAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? fillExtrusionOpacityTransition;
    property public final String? fillExtrusionPattern;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? fillExtrusionPatternAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? fillExtrusionPatternTransition;
    property public final java.util.List<java.lang.Double>? fillExtrusionTranslate;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionTranslateAnchor? fillExtrusionTranslateAnchor;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? fillExtrusionTranslateAnchorAsExpression;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? fillExtrusionTranslateAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? fillExtrusionTranslateTransition;
    property public final Boolean? fillExtrusionVerticalGradient;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? fillExtrusionVerticalGradientAsExpression;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? filter;
    property public String layerId;
    property public Double? maxZoom;
    property public Double? minZoom;
    property public final String sourceId;
    property public final String? sourceLayer;
    property public com.mapbox.maps.extension.style.layers.properties.generated.Visibility? visibility;
    field public static final com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer.Companion Companion;
  }

  public static final class FillExtrusionLayer.Companion {
    method public Double? getDefaultFillExtrusionBase();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultFillExtrusionBaseAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultFillExtrusionBaseTransition();
    method public String? getDefaultFillExtrusionColor();
    method @ColorInt public Integer? getDefaultFillExtrusionColorAsColorInt();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultFillExtrusionColorAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultFillExtrusionColorTransition();
    method public Double? getDefaultFillExtrusionHeight();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultFillExtrusionHeightAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultFillExtrusionHeightTransition();
    method public Double? getDefaultFillExtrusionOpacity();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultFillExtrusionOpacityAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultFillExtrusionOpacityTransition();
    method public String? getDefaultFillExtrusionPattern();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultFillExtrusionPatternAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultFillExtrusionPatternTransition();
    method public java.util.List<java.lang.Double>? getDefaultFillExtrusionTranslate();
    method public com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionTranslateAnchor? getDefaultFillExtrusionTranslateAnchor();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultFillExtrusionTranslateAnchorAsExpression();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultFillExtrusionTranslateAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultFillExtrusionTranslateTransition();
    method public Boolean? getDefaultFillExtrusionVerticalGradient();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultFillExtrusionVerticalGradientAsExpression();
    method public Double? getDefaultMaxZoom();
    method public Double? getDefaultMinZoom();
    method public com.mapbox.maps.extension.style.layers.properties.generated.Visibility? getDefaultVisibility();
    property public final Double? defaultFillExtrusionBase;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultFillExtrusionBaseAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultFillExtrusionBaseTransition;
    property public final String? defaultFillExtrusionColor;
    property @ColorInt public final Integer? defaultFillExtrusionColorAsColorInt;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultFillExtrusionColorAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultFillExtrusionColorTransition;
    property public final Double? defaultFillExtrusionHeight;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultFillExtrusionHeightAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultFillExtrusionHeightTransition;
    property public final Double? defaultFillExtrusionOpacity;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultFillExtrusionOpacityAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultFillExtrusionOpacityTransition;
    property public final String? defaultFillExtrusionPattern;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultFillExtrusionPatternAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultFillExtrusionPatternTransition;
    property public final java.util.List<java.lang.Double>? defaultFillExtrusionTranslate;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionTranslateAnchor? defaultFillExtrusionTranslateAnchor;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultFillExtrusionTranslateAnchorAsExpression;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultFillExtrusionTranslateAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultFillExtrusionTranslateTransition;
    property public final Boolean? defaultFillExtrusionVerticalGradient;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultFillExtrusionVerticalGradientAsExpression;
    property public final Double? defaultMaxZoom;
    property public final Double? defaultMinZoom;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.Visibility? defaultVisibility;
  }

  @com.mapbox.maps.extension.style.types.LayersDsl public interface FillExtrusionLayerDsl {
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionBase(double fillExtrusionBase = 0.0);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionBase(com.mapbox.maps.extension.style.expressions.generated.Expression fillExtrusionBase);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionBaseTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionBaseTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionColor(String fillExtrusionColor = "#000000");
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionColor(com.mapbox.maps.extension.style.expressions.generated.Expression fillExtrusionColor);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionColor(@ColorInt int fillExtrusionColor);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionColorTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionColorTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionHeight(double fillExtrusionHeight = 0.0);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionHeight(com.mapbox.maps.extension.style.expressions.generated.Expression fillExtrusionHeight);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionHeightTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionHeightTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionOpacity(double fillExtrusionOpacity = 1.0);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionOpacity(com.mapbox.maps.extension.style.expressions.generated.Expression fillExtrusionOpacity);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionOpacityTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionOpacityTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionPattern(String fillExtrusionPattern);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionPattern(com.mapbox.maps.extension.style.expressions.generated.Expression fillExtrusionPattern);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionPatternTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionPatternTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionTranslate(java.util.List<java.lang.Double> fillExtrusionTranslate = listOf(0.0, 0.0));
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionTranslate(com.mapbox.maps.extension.style.expressions.generated.Expression fillExtrusionTranslate);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionTranslateAnchor(com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionTranslateAnchor fillExtrusionTranslateAnchor = com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionTranslateAnchor.MAP);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionTranslateAnchor(com.mapbox.maps.extension.style.expressions.generated.Expression fillExtrusionTranslateAnchor);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionTranslateTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionTranslateTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionVerticalGradient(boolean fillExtrusionVerticalGradient = true);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionVerticalGradient(com.mapbox.maps.extension.style.expressions.generated.Expression fillExtrusionVerticalGradient);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer filter(com.mapbox.maps.extension.style.expressions.generated.Expression filter);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer maxZoom(double maxZoom);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer minZoom(double minZoom);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer sourceLayer(String sourceLayer);
    method public com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer visibility(com.mapbox.maps.extension.style.layers.properties.generated.Visibility visibility);
  }

  public final class FillExtrusionLayerKt {
    method public static com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer fillExtrusionLayer(String layerId, String sourceId, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayerDsl,kotlin.Unit> block);
  }

  @UiThread public final class FillLayer extends com.mapbox.maps.extension.style.layers.Layer implements com.mapbox.maps.extension.style.layers.generated.FillLayerDsl {
    ctor public FillLayer(String layerId, String sourceId);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillAntialias(boolean fillAntialias);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillAntialias(com.mapbox.maps.extension.style.expressions.generated.Expression fillAntialias);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillColor(String fillColor);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillColor(com.mapbox.maps.extension.style.expressions.generated.Expression fillColor);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillColor(@ColorInt int fillColor);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillColorTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillColorTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillOpacity(double fillOpacity);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillOpacity(com.mapbox.maps.extension.style.expressions.generated.Expression fillOpacity);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillOpacityTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillOpacityTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillOutlineColor(String fillOutlineColor);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillOutlineColor(com.mapbox.maps.extension.style.expressions.generated.Expression fillOutlineColor);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillOutlineColor(@ColorInt int fillOutlineColor);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillOutlineColorTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillOutlineColorTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillPattern(String fillPattern);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillPattern(com.mapbox.maps.extension.style.expressions.generated.Expression fillPattern);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillPatternTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillPatternTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillSortKey(double fillSortKey);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillSortKey(com.mapbox.maps.extension.style.expressions.generated.Expression fillSortKey);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillTranslate(java.util.List<java.lang.Double> fillTranslate);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillTranslate(com.mapbox.maps.extension.style.expressions.generated.Expression fillTranslate);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillTranslateAnchor(com.mapbox.maps.extension.style.layers.properties.generated.FillTranslateAnchor fillTranslateAnchor);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillTranslateAnchor(com.mapbox.maps.extension.style.expressions.generated.Expression fillTranslateAnchor);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillTranslateTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillTranslateTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer filter(com.mapbox.maps.extension.style.expressions.generated.Expression filter);
    method public Boolean? getFillAntialias();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getFillAntialiasAsExpression();
    method public String? getFillColor();
    method @ColorInt public Integer? getFillColorAsColorInt();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getFillColorAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getFillColorTransition();
    method public Double? getFillOpacity();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getFillOpacityAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getFillOpacityTransition();
    method public String? getFillOutlineColor();
    method @ColorInt public Integer? getFillOutlineColorAsColorInt();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getFillOutlineColorAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getFillOutlineColorTransition();
    method public String? getFillPattern();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getFillPatternAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getFillPatternTransition();
    method public Double? getFillSortKey();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getFillSortKeyAsExpression();
    method public java.util.List<java.lang.Double>? getFillTranslate();
    method public com.mapbox.maps.extension.style.layers.properties.generated.FillTranslateAnchor? getFillTranslateAnchor();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getFillTranslateAnchorAsExpression();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getFillTranslateAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getFillTranslateTransition();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getFilter();
    method public String getLayerId();
    method public Double? getMaxZoom();
    method public Double? getMinZoom();
    method public String getSourceId();
    method public String? getSourceLayer();
    method public String getType$metalava_module();
    method public com.mapbox.maps.extension.style.layers.properties.generated.Visibility? getVisibility();
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer maxZoom(double maxZoom);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer minZoom(double minZoom);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer sourceLayer(String sourceLayer);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer visibility(com.mapbox.maps.extension.style.layers.properties.generated.Visibility visibility);
    property public final Boolean? fillAntialias;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? fillAntialiasAsExpression;
    property public final String? fillColor;
    property @ColorInt public final Integer? fillColorAsColorInt;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? fillColorAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? fillColorTransition;
    property public final Double? fillOpacity;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? fillOpacityAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? fillOpacityTransition;
    property public final String? fillOutlineColor;
    property @ColorInt public final Integer? fillOutlineColorAsColorInt;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? fillOutlineColorAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? fillOutlineColorTransition;
    property public final String? fillPattern;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? fillPatternAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? fillPatternTransition;
    property public final Double? fillSortKey;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? fillSortKeyAsExpression;
    property public final java.util.List<java.lang.Double>? fillTranslate;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.FillTranslateAnchor? fillTranslateAnchor;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? fillTranslateAnchorAsExpression;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? fillTranslateAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? fillTranslateTransition;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? filter;
    property public String layerId;
    property public Double? maxZoom;
    property public Double? minZoom;
    property public final String sourceId;
    property public final String? sourceLayer;
    property public com.mapbox.maps.extension.style.layers.properties.generated.Visibility? visibility;
    field public static final com.mapbox.maps.extension.style.layers.generated.FillLayer.Companion Companion;
  }

  public static final class FillLayer.Companion {
    method public Boolean? getDefaultFillAntialias();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultFillAntialiasAsExpression();
    method public String? getDefaultFillColor();
    method @ColorInt public Integer? getDefaultFillColorAsColorInt();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultFillColorAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultFillColorTransition();
    method public Double? getDefaultFillOpacity();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultFillOpacityAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultFillOpacityTransition();
    method public String? getDefaultFillOutlineColor();
    method @ColorInt public Integer? getDefaultFillOutlineColorAsColorInt();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultFillOutlineColorAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultFillOutlineColorTransition();
    method public String? getDefaultFillPattern();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultFillPatternAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultFillPatternTransition();
    method public Double? getDefaultFillSortKey();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultFillSortKeyAsExpression();
    method public java.util.List<java.lang.Double>? getDefaultFillTranslate();
    method public com.mapbox.maps.extension.style.layers.properties.generated.FillTranslateAnchor? getDefaultFillTranslateAnchor();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultFillTranslateAnchorAsExpression();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultFillTranslateAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultFillTranslateTransition();
    method public Double? getDefaultMaxZoom();
    method public Double? getDefaultMinZoom();
    method public com.mapbox.maps.extension.style.layers.properties.generated.Visibility? getDefaultVisibility();
    property public final Boolean? defaultFillAntialias;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultFillAntialiasAsExpression;
    property public final String? defaultFillColor;
    property @ColorInt public final Integer? defaultFillColorAsColorInt;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultFillColorAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultFillColorTransition;
    property public final Double? defaultFillOpacity;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultFillOpacityAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultFillOpacityTransition;
    property public final String? defaultFillOutlineColor;
    property @ColorInt public final Integer? defaultFillOutlineColorAsColorInt;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultFillOutlineColorAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultFillOutlineColorTransition;
    property public final String? defaultFillPattern;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultFillPatternAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultFillPatternTransition;
    property public final Double? defaultFillSortKey;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultFillSortKeyAsExpression;
    property public final java.util.List<java.lang.Double>? defaultFillTranslate;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.FillTranslateAnchor? defaultFillTranslateAnchor;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultFillTranslateAnchorAsExpression;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultFillTranslateAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultFillTranslateTransition;
    property public final Double? defaultMaxZoom;
    property public final Double? defaultMinZoom;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.Visibility? defaultVisibility;
  }

  @com.mapbox.maps.extension.style.types.LayersDsl public interface FillLayerDsl {
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillAntialias(boolean fillAntialias = true);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillAntialias(com.mapbox.maps.extension.style.expressions.generated.Expression fillAntialias);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillColor(String fillColor = "#000000");
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillColor(com.mapbox.maps.extension.style.expressions.generated.Expression fillColor);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillColor(@ColorInt int fillColor);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillColorTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillColorTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillOpacity(double fillOpacity = 1.0);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillOpacity(com.mapbox.maps.extension.style.expressions.generated.Expression fillOpacity);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillOpacityTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillOpacityTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillOutlineColor(String fillOutlineColor);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillOutlineColor(com.mapbox.maps.extension.style.expressions.generated.Expression fillOutlineColor);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillOutlineColor(@ColorInt int fillOutlineColor);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillOutlineColorTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillOutlineColorTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillPattern(String fillPattern);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillPattern(com.mapbox.maps.extension.style.expressions.generated.Expression fillPattern);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillPatternTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillPatternTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillSortKey(double fillSortKey);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillSortKey(com.mapbox.maps.extension.style.expressions.generated.Expression fillSortKey);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillTranslate(java.util.List<java.lang.Double> fillTranslate = listOf(0.0, 0.0));
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillTranslate(com.mapbox.maps.extension.style.expressions.generated.Expression fillTranslate);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillTranslateAnchor(com.mapbox.maps.extension.style.layers.properties.generated.FillTranslateAnchor fillTranslateAnchor = com.mapbox.maps.extension.style.layers.properties.generated.FillTranslateAnchor.MAP);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillTranslateAnchor(com.mapbox.maps.extension.style.expressions.generated.Expression fillTranslateAnchor);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillTranslateTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer fillTranslateTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer filter(com.mapbox.maps.extension.style.expressions.generated.Expression filter);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer maxZoom(double maxZoom);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer minZoom(double minZoom);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer sourceLayer(String sourceLayer);
    method public com.mapbox.maps.extension.style.layers.generated.FillLayer visibility(com.mapbox.maps.extension.style.layers.properties.generated.Visibility visibility);
  }

  public final class FillLayerKt {
    method public static com.mapbox.maps.extension.style.layers.generated.FillLayer fillLayer(String layerId, String sourceId, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.layers.generated.FillLayerDsl,kotlin.Unit> block);
  }

  @UiThread public final class HeatmapLayer extends com.mapbox.maps.extension.style.layers.Layer implements com.mapbox.maps.extension.style.layers.generated.HeatmapLayerDsl {
    ctor public HeatmapLayer(String layerId, String sourceId);
    method public com.mapbox.maps.extension.style.layers.generated.HeatmapLayer filter(com.mapbox.maps.extension.style.expressions.generated.Expression filter);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getFilter();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getHeatmapColor();
    method public Double? getHeatmapIntensity();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getHeatmapIntensityAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getHeatmapIntensityTransition();
    method public Double? getHeatmapOpacity();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getHeatmapOpacityAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getHeatmapOpacityTransition();
    method public Double? getHeatmapRadius();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getHeatmapRadiusAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getHeatmapRadiusTransition();
    method public Double? getHeatmapWeight();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getHeatmapWeightAsExpression();
    method public String getLayerId();
    method public Double? getMaxZoom();
    method public Double? getMinZoom();
    method public String getSourceId();
    method public String? getSourceLayer();
    method public String getType$metalava_module();
    method public com.mapbox.maps.extension.style.layers.properties.generated.Visibility? getVisibility();
    method public com.mapbox.maps.extension.style.layers.generated.HeatmapLayer heatmapColor(com.mapbox.maps.extension.style.expressions.generated.Expression heatmapColor);
    method public com.mapbox.maps.extension.style.layers.generated.HeatmapLayer heatmapIntensity(double heatmapIntensity);
    method public com.mapbox.maps.extension.style.layers.generated.HeatmapLayer heatmapIntensity(com.mapbox.maps.extension.style.expressions.generated.Expression heatmapIntensity);
    method public com.mapbox.maps.extension.style.layers.generated.HeatmapLayer heatmapIntensityTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.HeatmapLayer heatmapIntensityTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.HeatmapLayer heatmapOpacity(double heatmapOpacity);
    method public com.mapbox.maps.extension.style.layers.generated.HeatmapLayer heatmapOpacity(com.mapbox.maps.extension.style.expressions.generated.Expression heatmapOpacity);
    method public com.mapbox.maps.extension.style.layers.generated.HeatmapLayer heatmapOpacityTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.HeatmapLayer heatmapOpacityTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.HeatmapLayer heatmapRadius(double heatmapRadius);
    method public com.mapbox.maps.extension.style.layers.generated.HeatmapLayer heatmapRadius(com.mapbox.maps.extension.style.expressions.generated.Expression heatmapRadius);
    method public com.mapbox.maps.extension.style.layers.generated.HeatmapLayer heatmapRadiusTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.HeatmapLayer heatmapRadiusTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.HeatmapLayer heatmapWeight(double heatmapWeight);
    method public com.mapbox.maps.extension.style.layers.generated.HeatmapLayer heatmapWeight(com.mapbox.maps.extension.style.expressions.generated.Expression heatmapWeight);
    method public com.mapbox.maps.extension.style.layers.generated.HeatmapLayer maxZoom(double maxZoom);
    method public com.mapbox.maps.extension.style.layers.generated.HeatmapLayer minZoom(double minZoom);
    method public com.mapbox.maps.extension.style.layers.generated.HeatmapLayer sourceLayer(String sourceLayer);
    method public com.mapbox.maps.extension.style.layers.generated.HeatmapLayer visibility(com.mapbox.maps.extension.style.layers.properties.generated.Visibility visibility);
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? filter;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? heatmapColor;
    property public final Double? heatmapIntensity;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? heatmapIntensityAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? heatmapIntensityTransition;
    property public final Double? heatmapOpacity;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? heatmapOpacityAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? heatmapOpacityTransition;
    property public final Double? heatmapRadius;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? heatmapRadiusAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? heatmapRadiusTransition;
    property public final Double? heatmapWeight;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? heatmapWeightAsExpression;
    property public String layerId;
    property public Double? maxZoom;
    property public Double? minZoom;
    property public final String sourceId;
    property public final String? sourceLayer;
    property public com.mapbox.maps.extension.style.layers.properties.generated.Visibility? visibility;
    field public static final com.mapbox.maps.extension.style.layers.generated.HeatmapLayer.Companion Companion;
  }

  public static final class HeatmapLayer.Companion {
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultHeatmapColor();
    method public Double? getDefaultHeatmapIntensity();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultHeatmapIntensityAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultHeatmapIntensityTransition();
    method public Double? getDefaultHeatmapOpacity();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultHeatmapOpacityAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultHeatmapOpacityTransition();
    method public Double? getDefaultHeatmapRadius();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultHeatmapRadiusAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultHeatmapRadiusTransition();
    method public Double? getDefaultHeatmapWeight();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultHeatmapWeightAsExpression();
    method public Double? getDefaultMaxZoom();
    method public Double? getDefaultMinZoom();
    method public com.mapbox.maps.extension.style.layers.properties.generated.Visibility? getDefaultVisibility();
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultHeatmapColor;
    property public final Double? defaultHeatmapIntensity;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultHeatmapIntensityAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultHeatmapIntensityTransition;
    property public final Double? defaultHeatmapOpacity;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultHeatmapOpacityAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultHeatmapOpacityTransition;
    property public final Double? defaultHeatmapRadius;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultHeatmapRadiusAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultHeatmapRadiusTransition;
    property public final Double? defaultHeatmapWeight;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultHeatmapWeightAsExpression;
    property public final Double? defaultMaxZoom;
    property public final Double? defaultMinZoom;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.Visibility? defaultVisibility;
  }

  @com.mapbox.maps.extension.style.types.LayersDsl public interface HeatmapLayerDsl {
    method public com.mapbox.maps.extension.style.layers.generated.HeatmapLayer filter(com.mapbox.maps.extension.style.expressions.generated.Expression filter);
    method public com.mapbox.maps.extension.style.layers.generated.HeatmapLayer heatmapColor(com.mapbox.maps.extension.style.expressions.generated.Expression heatmapColor);
    method public com.mapbox.maps.extension.style.layers.generated.HeatmapLayer heatmapIntensity(double heatmapIntensity = 1.0);
    method public com.mapbox.maps.extension.style.layers.generated.HeatmapLayer heatmapIntensity(com.mapbox.maps.extension.style.expressions.generated.Expression heatmapIntensity);
    method public com.mapbox.maps.extension.style.layers.generated.HeatmapLayer heatmapIntensityTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.HeatmapLayer heatmapIntensityTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.HeatmapLayer heatmapOpacity(double heatmapOpacity = 1.0);
    method public com.mapbox.maps.extension.style.layers.generated.HeatmapLayer heatmapOpacity(com.mapbox.maps.extension.style.expressions.generated.Expression heatmapOpacity);
    method public com.mapbox.maps.extension.style.layers.generated.HeatmapLayer heatmapOpacityTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.HeatmapLayer heatmapOpacityTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.HeatmapLayer heatmapRadius(double heatmapRadius = 30.0);
    method public com.mapbox.maps.extension.style.layers.generated.HeatmapLayer heatmapRadius(com.mapbox.maps.extension.style.expressions.generated.Expression heatmapRadius);
    method public com.mapbox.maps.extension.style.layers.generated.HeatmapLayer heatmapRadiusTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.HeatmapLayer heatmapRadiusTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.HeatmapLayer heatmapWeight(double heatmapWeight = 1.0);
    method public com.mapbox.maps.extension.style.layers.generated.HeatmapLayer heatmapWeight(com.mapbox.maps.extension.style.expressions.generated.Expression heatmapWeight);
    method public com.mapbox.maps.extension.style.layers.generated.HeatmapLayer maxZoom(double maxZoom);
    method public com.mapbox.maps.extension.style.layers.generated.HeatmapLayer minZoom(double minZoom);
    method public com.mapbox.maps.extension.style.layers.generated.HeatmapLayer sourceLayer(String sourceLayer);
    method public com.mapbox.maps.extension.style.layers.generated.HeatmapLayer visibility(com.mapbox.maps.extension.style.layers.properties.generated.Visibility visibility);
  }

  public final class HeatmapLayerKt {
    method public static com.mapbox.maps.extension.style.layers.generated.HeatmapLayer heatmapLayer(String layerId, String sourceId, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.layers.generated.HeatmapLayerDsl,kotlin.Unit> block);
  }

  @UiThread public final class HillshadeLayer extends com.mapbox.maps.extension.style.layers.Layer implements com.mapbox.maps.extension.style.layers.generated.HillshadeLayerDsl {
    ctor public HillshadeLayer(String layerId, String sourceId);
    method public String? getHillshadeAccentColor();
    method @ColorInt public Integer? getHillshadeAccentColorAsColorInt();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getHillshadeAccentColorAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getHillshadeAccentColorTransition();
    method public Double? getHillshadeExaggeration();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getHillshadeExaggerationAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getHillshadeExaggerationTransition();
    method public String? getHillshadeHighlightColor();
    method @ColorInt public Integer? getHillshadeHighlightColorAsColorInt();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getHillshadeHighlightColorAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getHillshadeHighlightColorTransition();
    method public com.mapbox.maps.extension.style.layers.properties.generated.HillshadeIlluminationAnchor? getHillshadeIlluminationAnchor();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getHillshadeIlluminationAnchorAsExpression();
    method public Double? getHillshadeIlluminationDirection();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getHillshadeIlluminationDirectionAsExpression();
    method public String? getHillshadeShadowColor();
    method @ColorInt public Integer? getHillshadeShadowColorAsColorInt();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getHillshadeShadowColorAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getHillshadeShadowColorTransition();
    method public String getLayerId();
    method public Double? getMaxZoom();
    method public Double? getMinZoom();
    method public String getSourceId();
    method public String? getSourceLayer();
    method public String getType$metalava_module();
    method public com.mapbox.maps.extension.style.layers.properties.generated.Visibility? getVisibility();
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeAccentColor(String hillshadeAccentColor);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeAccentColor(com.mapbox.maps.extension.style.expressions.generated.Expression hillshadeAccentColor);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeAccentColor(@ColorInt int hillshadeAccentColor);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeAccentColorTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeAccentColorTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeExaggeration(double hillshadeExaggeration);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeExaggeration(com.mapbox.maps.extension.style.expressions.generated.Expression hillshadeExaggeration);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeExaggerationTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeExaggerationTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeHighlightColor(String hillshadeHighlightColor);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeHighlightColor(com.mapbox.maps.extension.style.expressions.generated.Expression hillshadeHighlightColor);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeHighlightColor(@ColorInt int hillshadeHighlightColor);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeHighlightColorTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeHighlightColorTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeIlluminationAnchor(com.mapbox.maps.extension.style.layers.properties.generated.HillshadeIlluminationAnchor hillshadeIlluminationAnchor);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeIlluminationAnchor(com.mapbox.maps.extension.style.expressions.generated.Expression hillshadeIlluminationAnchor);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeIlluminationDirection(double hillshadeIlluminationDirection);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeIlluminationDirection(com.mapbox.maps.extension.style.expressions.generated.Expression hillshadeIlluminationDirection);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeShadowColor(String hillshadeShadowColor);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeShadowColor(com.mapbox.maps.extension.style.expressions.generated.Expression hillshadeShadowColor);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeShadowColor(@ColorInt int hillshadeShadowColor);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeShadowColorTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeShadowColorTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer maxZoom(double maxZoom);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer minZoom(double minZoom);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer sourceLayer(String sourceLayer);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer visibility(com.mapbox.maps.extension.style.layers.properties.generated.Visibility visibility);
    property public final String? hillshadeAccentColor;
    property @ColorInt public final Integer? hillshadeAccentColorAsColorInt;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? hillshadeAccentColorAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? hillshadeAccentColorTransition;
    property public final Double? hillshadeExaggeration;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? hillshadeExaggerationAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? hillshadeExaggerationTransition;
    property public final String? hillshadeHighlightColor;
    property @ColorInt public final Integer? hillshadeHighlightColorAsColorInt;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? hillshadeHighlightColorAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? hillshadeHighlightColorTransition;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.HillshadeIlluminationAnchor? hillshadeIlluminationAnchor;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? hillshadeIlluminationAnchorAsExpression;
    property public final Double? hillshadeIlluminationDirection;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? hillshadeIlluminationDirectionAsExpression;
    property public final String? hillshadeShadowColor;
    property @ColorInt public final Integer? hillshadeShadowColorAsColorInt;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? hillshadeShadowColorAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? hillshadeShadowColorTransition;
    property public String layerId;
    property public Double? maxZoom;
    property public Double? minZoom;
    property public final String sourceId;
    property public final String? sourceLayer;
    property public com.mapbox.maps.extension.style.layers.properties.generated.Visibility? visibility;
    field public static final com.mapbox.maps.extension.style.layers.generated.HillshadeLayer.Companion Companion;
  }

  public static final class HillshadeLayer.Companion {
    method public String? getDefaultHillshadeAccentColor();
    method @ColorInt public Integer? getDefaultHillshadeAccentColorAsColorInt();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultHillshadeAccentColorAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultHillshadeAccentColorTransition();
    method public Double? getDefaultHillshadeExaggeration();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultHillshadeExaggerationAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultHillshadeExaggerationTransition();
    method public String? getDefaultHillshadeHighlightColor();
    method @ColorInt public Integer? getDefaultHillshadeHighlightColorAsColorInt();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultHillshadeHighlightColorAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultHillshadeHighlightColorTransition();
    method public com.mapbox.maps.extension.style.layers.properties.generated.HillshadeIlluminationAnchor? getDefaultHillshadeIlluminationAnchor();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultHillshadeIlluminationAnchorAsExpression();
    method public Double? getDefaultHillshadeIlluminationDirection();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultHillshadeIlluminationDirectionAsExpression();
    method public String? getDefaultHillshadeShadowColor();
    method @ColorInt public Integer? getDefaultHillshadeShadowColorAsColorInt();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultHillshadeShadowColorAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultHillshadeShadowColorTransition();
    method public Double? getDefaultMaxZoom();
    method public Double? getDefaultMinZoom();
    method public com.mapbox.maps.extension.style.layers.properties.generated.Visibility? getDefaultVisibility();
    property public final String? defaultHillshadeAccentColor;
    property @ColorInt public final Integer? defaultHillshadeAccentColorAsColorInt;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultHillshadeAccentColorAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultHillshadeAccentColorTransition;
    property public final Double? defaultHillshadeExaggeration;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultHillshadeExaggerationAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultHillshadeExaggerationTransition;
    property public final String? defaultHillshadeHighlightColor;
    property @ColorInt public final Integer? defaultHillshadeHighlightColorAsColorInt;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultHillshadeHighlightColorAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultHillshadeHighlightColorTransition;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.HillshadeIlluminationAnchor? defaultHillshadeIlluminationAnchor;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultHillshadeIlluminationAnchorAsExpression;
    property public final Double? defaultHillshadeIlluminationDirection;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultHillshadeIlluminationDirectionAsExpression;
    property public final String? defaultHillshadeShadowColor;
    property @ColorInt public final Integer? defaultHillshadeShadowColorAsColorInt;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultHillshadeShadowColorAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultHillshadeShadowColorTransition;
    property public final Double? defaultMaxZoom;
    property public final Double? defaultMinZoom;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.Visibility? defaultVisibility;
  }

  @com.mapbox.maps.extension.style.types.LayersDsl public interface HillshadeLayerDsl {
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeAccentColor(String hillshadeAccentColor = "#000000");
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeAccentColor(com.mapbox.maps.extension.style.expressions.generated.Expression hillshadeAccentColor);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeAccentColor(@ColorInt int hillshadeAccentColor);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeAccentColorTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeAccentColorTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeExaggeration(double hillshadeExaggeration = 0.5);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeExaggeration(com.mapbox.maps.extension.style.expressions.generated.Expression hillshadeExaggeration);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeExaggerationTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeExaggerationTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeHighlightColor(String hillshadeHighlightColor = "#FFFFFF");
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeHighlightColor(com.mapbox.maps.extension.style.expressions.generated.Expression hillshadeHighlightColor);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeHighlightColor(@ColorInt int hillshadeHighlightColor);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeHighlightColorTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeHighlightColorTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeIlluminationAnchor(com.mapbox.maps.extension.style.layers.properties.generated.HillshadeIlluminationAnchor hillshadeIlluminationAnchor = com.mapbox.maps.extension.style.layers.properties.generated.HillshadeIlluminationAnchor.VIEWPORT);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeIlluminationAnchor(com.mapbox.maps.extension.style.expressions.generated.Expression hillshadeIlluminationAnchor);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeIlluminationDirection(double hillshadeIlluminationDirection = 335.0);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeIlluminationDirection(com.mapbox.maps.extension.style.expressions.generated.Expression hillshadeIlluminationDirection);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeShadowColor(String hillshadeShadowColor = "#000000");
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeShadowColor(com.mapbox.maps.extension.style.expressions.generated.Expression hillshadeShadowColor);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeShadowColor(@ColorInt int hillshadeShadowColor);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeShadowColorTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeShadowColorTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer maxZoom(double maxZoom);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer minZoom(double minZoom);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer sourceLayer(String sourceLayer);
    method public com.mapbox.maps.extension.style.layers.generated.HillshadeLayer visibility(com.mapbox.maps.extension.style.layers.properties.generated.Visibility visibility);
  }

  public final class HillshadeLayerKt {
    method public static com.mapbox.maps.extension.style.layers.generated.HillshadeLayer hillshadeLayer(String layerId, String sourceId, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.layers.generated.HillshadeLayerDsl,kotlin.Unit> block);
  }

  @UiThread public final class LineLayer extends com.mapbox.maps.extension.style.layers.Layer implements com.mapbox.maps.extension.style.layers.generated.LineLayerDsl {
    ctor public LineLayer(String layerId, String sourceId);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer filter(com.mapbox.maps.extension.style.expressions.generated.Expression filter);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getFilter();
    method public String getLayerId();
    method public Double? getLineBlur();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getLineBlurAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getLineBlurTransition();
    method public com.mapbox.maps.extension.style.layers.properties.generated.LineCap? getLineCap();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getLineCapAsExpression();
    method public String? getLineColor();
    method @ColorInt public Integer? getLineColorAsColorInt();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getLineColorAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getLineColorTransition();
    method public java.util.List<java.lang.Double>? getLineDasharray();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getLineDasharrayAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getLineDasharrayTransition();
    method public Double? getLineGapWidth();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getLineGapWidthAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getLineGapWidthTransition();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getLineGradient();
    method public com.mapbox.maps.extension.style.layers.properties.generated.LineJoin? getLineJoin();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getLineJoinAsExpression();
    method public Double? getLineMiterLimit();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getLineMiterLimitAsExpression();
    method public Double? getLineOffset();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getLineOffsetAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getLineOffsetTransition();
    method public Double? getLineOpacity();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getLineOpacityAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getLineOpacityTransition();
    method public String? getLinePattern();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getLinePatternAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getLinePatternTransition();
    method public Double? getLineRoundLimit();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getLineRoundLimitAsExpression();
    method public Double? getLineSortKey();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getLineSortKeyAsExpression();
    method public java.util.List<java.lang.Double>? getLineTranslate();
    method public com.mapbox.maps.extension.style.layers.properties.generated.LineTranslateAnchor? getLineTranslateAnchor();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getLineTranslateAnchorAsExpression();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getLineTranslateAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getLineTranslateTransition();
    method public Double? getLineWidth();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getLineWidthAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getLineWidthTransition();
    method public Double? getMaxZoom();
    method public Double? getMinZoom();
    method public String getSourceId();
    method public String? getSourceLayer();
    method public String getType$metalava_module();
    method public com.mapbox.maps.extension.style.layers.properties.generated.Visibility? getVisibility();
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineBlur(double lineBlur);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineBlur(com.mapbox.maps.extension.style.expressions.generated.Expression lineBlur);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineBlurTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineBlurTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineCap(com.mapbox.maps.extension.style.layers.properties.generated.LineCap lineCap);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineCap(com.mapbox.maps.extension.style.expressions.generated.Expression lineCap);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineColor(String lineColor);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineColor(com.mapbox.maps.extension.style.expressions.generated.Expression lineColor);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineColor(@ColorInt int lineColor);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineColorTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineColorTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineDasharray(java.util.List<java.lang.Double> lineDasharray);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineDasharray(com.mapbox.maps.extension.style.expressions.generated.Expression lineDasharray);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineDasharrayTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineDasharrayTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineGapWidth(double lineGapWidth);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineGapWidth(com.mapbox.maps.extension.style.expressions.generated.Expression lineGapWidth);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineGapWidthTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineGapWidthTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineGradient(com.mapbox.maps.extension.style.expressions.generated.Expression lineGradient);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineJoin(com.mapbox.maps.extension.style.layers.properties.generated.LineJoin lineJoin);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineJoin(com.mapbox.maps.extension.style.expressions.generated.Expression lineJoin);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineMiterLimit(double lineMiterLimit);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineMiterLimit(com.mapbox.maps.extension.style.expressions.generated.Expression lineMiterLimit);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineOffset(double lineOffset);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineOffset(com.mapbox.maps.extension.style.expressions.generated.Expression lineOffset);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineOffsetTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineOffsetTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineOpacity(double lineOpacity);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineOpacity(com.mapbox.maps.extension.style.expressions.generated.Expression lineOpacity);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineOpacityTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineOpacityTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer linePattern(String linePattern);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer linePattern(com.mapbox.maps.extension.style.expressions.generated.Expression linePattern);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer linePatternTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer linePatternTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineRoundLimit(double lineRoundLimit);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineRoundLimit(com.mapbox.maps.extension.style.expressions.generated.Expression lineRoundLimit);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineSortKey(double lineSortKey);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineSortKey(com.mapbox.maps.extension.style.expressions.generated.Expression lineSortKey);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineTranslate(java.util.List<java.lang.Double> lineTranslate);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineTranslate(com.mapbox.maps.extension.style.expressions.generated.Expression lineTranslate);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineTranslateAnchor(com.mapbox.maps.extension.style.layers.properties.generated.LineTranslateAnchor lineTranslateAnchor);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineTranslateAnchor(com.mapbox.maps.extension.style.expressions.generated.Expression lineTranslateAnchor);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineTranslateTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineTranslateTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineWidth(double lineWidth);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineWidth(com.mapbox.maps.extension.style.expressions.generated.Expression lineWidth);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineWidthTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineWidthTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer maxZoom(double maxZoom);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer minZoom(double minZoom);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer sourceLayer(String sourceLayer);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer visibility(com.mapbox.maps.extension.style.layers.properties.generated.Visibility visibility);
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? filter;
    property public String layerId;
    property public final Double? lineBlur;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? lineBlurAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? lineBlurTransition;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.LineCap? lineCap;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? lineCapAsExpression;
    property public final String? lineColor;
    property @ColorInt public final Integer? lineColorAsColorInt;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? lineColorAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? lineColorTransition;
    property public final java.util.List<java.lang.Double>? lineDasharray;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? lineDasharrayAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? lineDasharrayTransition;
    property public final Double? lineGapWidth;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? lineGapWidthAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? lineGapWidthTransition;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? lineGradient;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.LineJoin? lineJoin;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? lineJoinAsExpression;
    property public final Double? lineMiterLimit;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? lineMiterLimitAsExpression;
    property public final Double? lineOffset;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? lineOffsetAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? lineOffsetTransition;
    property public final Double? lineOpacity;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? lineOpacityAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? lineOpacityTransition;
    property public final String? linePattern;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? linePatternAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? linePatternTransition;
    property public final Double? lineRoundLimit;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? lineRoundLimitAsExpression;
    property public final Double? lineSortKey;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? lineSortKeyAsExpression;
    property public final java.util.List<java.lang.Double>? lineTranslate;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.LineTranslateAnchor? lineTranslateAnchor;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? lineTranslateAnchorAsExpression;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? lineTranslateAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? lineTranslateTransition;
    property public final Double? lineWidth;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? lineWidthAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? lineWidthTransition;
    property public Double? maxZoom;
    property public Double? minZoom;
    property public final String sourceId;
    property public final String? sourceLayer;
    property public com.mapbox.maps.extension.style.layers.properties.generated.Visibility? visibility;
    field public static final com.mapbox.maps.extension.style.layers.generated.LineLayer.Companion Companion;
  }

  public static final class LineLayer.Companion {
    method public Double? getDefaultLineBlur();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultLineBlurAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultLineBlurTransition();
    method public com.mapbox.maps.extension.style.layers.properties.generated.LineCap? getDefaultLineCap();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultLineCapAsExpression();
    method public String? getDefaultLineColor();
    method @ColorInt public Integer? getDefaultLineColorAsColorInt();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultLineColorAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultLineColorTransition();
    method public java.util.List<java.lang.Double>? getDefaultLineDasharray();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultLineDasharrayAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultLineDasharrayTransition();
    method public Double? getDefaultLineGapWidth();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultLineGapWidthAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultLineGapWidthTransition();
    method public com.mapbox.maps.extension.style.layers.properties.generated.LineJoin? getDefaultLineJoin();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultLineJoinAsExpression();
    method public Double? getDefaultLineMiterLimit();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultLineMiterLimitAsExpression();
    method public Double? getDefaultLineOffset();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultLineOffsetAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultLineOffsetTransition();
    method public Double? getDefaultLineOpacity();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultLineOpacityAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultLineOpacityTransition();
    method public String? getDefaultLinePattern();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultLinePatternAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultLinePatternTransition();
    method public Double? getDefaultLineRoundLimit();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultLineRoundLimitAsExpression();
    method public Double? getDefaultLineSortKey();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultLineSortKeyAsExpression();
    method public java.util.List<java.lang.Double>? getDefaultLineTranslate();
    method public com.mapbox.maps.extension.style.layers.properties.generated.LineTranslateAnchor? getDefaultLineTranslateAnchor();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultLineTranslateAnchorAsExpression();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultLineTranslateAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultLineTranslateTransition();
    method public Double? getDefaultLineWidth();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultLineWidthAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultLineWidthTransition();
    method public Double? getDefaultMaxZoom();
    method public Double? getDefaultMinZoom();
    method public com.mapbox.maps.extension.style.layers.properties.generated.Visibility? getDefaultVisibility();
    property public final Double? defaultLineBlur;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultLineBlurAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultLineBlurTransition;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.LineCap? defaultLineCap;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultLineCapAsExpression;
    property public final String? defaultLineColor;
    property @ColorInt public final Integer? defaultLineColorAsColorInt;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultLineColorAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultLineColorTransition;
    property public final java.util.List<java.lang.Double>? defaultLineDasharray;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultLineDasharrayAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultLineDasharrayTransition;
    property public final Double? defaultLineGapWidth;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultLineGapWidthAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultLineGapWidthTransition;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.LineJoin? defaultLineJoin;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultLineJoinAsExpression;
    property public final Double? defaultLineMiterLimit;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultLineMiterLimitAsExpression;
    property public final Double? defaultLineOffset;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultLineOffsetAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultLineOffsetTransition;
    property public final Double? defaultLineOpacity;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultLineOpacityAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultLineOpacityTransition;
    property public final String? defaultLinePattern;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultLinePatternAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultLinePatternTransition;
    property public final Double? defaultLineRoundLimit;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultLineRoundLimitAsExpression;
    property public final Double? defaultLineSortKey;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultLineSortKeyAsExpression;
    property public final java.util.List<java.lang.Double>? defaultLineTranslate;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.LineTranslateAnchor? defaultLineTranslateAnchor;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultLineTranslateAnchorAsExpression;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultLineTranslateAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultLineTranslateTransition;
    property public final Double? defaultLineWidth;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultLineWidthAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultLineWidthTransition;
    property public final Double? defaultMaxZoom;
    property public final Double? defaultMinZoom;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.Visibility? defaultVisibility;
  }

  @com.mapbox.maps.extension.style.types.LayersDsl public interface LineLayerDsl {
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer filter(com.mapbox.maps.extension.style.expressions.generated.Expression filter);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineBlur(double lineBlur = 0.0);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineBlur(com.mapbox.maps.extension.style.expressions.generated.Expression lineBlur);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineBlurTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineBlurTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineCap(com.mapbox.maps.extension.style.layers.properties.generated.LineCap lineCap = com.mapbox.maps.extension.style.layers.properties.generated.LineCap.BUTT);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineCap(com.mapbox.maps.extension.style.expressions.generated.Expression lineCap);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineColor(String lineColor = "#000000");
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineColor(com.mapbox.maps.extension.style.expressions.generated.Expression lineColor);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineColor(@ColorInt int lineColor);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineColorTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineColorTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineDasharray(java.util.List<java.lang.Double> lineDasharray);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineDasharray(com.mapbox.maps.extension.style.expressions.generated.Expression lineDasharray);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineDasharrayTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineDasharrayTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineGapWidth(double lineGapWidth = 0.0);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineGapWidth(com.mapbox.maps.extension.style.expressions.generated.Expression lineGapWidth);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineGapWidthTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineGapWidthTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineGradient(com.mapbox.maps.extension.style.expressions.generated.Expression lineGradient);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineJoin(com.mapbox.maps.extension.style.layers.properties.generated.LineJoin lineJoin = com.mapbox.maps.extension.style.layers.properties.generated.LineJoin.MITER);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineJoin(com.mapbox.maps.extension.style.expressions.generated.Expression lineJoin);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineMiterLimit(double lineMiterLimit = 2.0);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineMiterLimit(com.mapbox.maps.extension.style.expressions.generated.Expression lineMiterLimit);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineOffset(double lineOffset = 0.0);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineOffset(com.mapbox.maps.extension.style.expressions.generated.Expression lineOffset);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineOffsetTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineOffsetTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineOpacity(double lineOpacity = 1.0);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineOpacity(com.mapbox.maps.extension.style.expressions.generated.Expression lineOpacity);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineOpacityTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineOpacityTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer linePattern(String linePattern);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer linePattern(com.mapbox.maps.extension.style.expressions.generated.Expression linePattern);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer linePatternTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer linePatternTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineRoundLimit(double lineRoundLimit = 1.05);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineRoundLimit(com.mapbox.maps.extension.style.expressions.generated.Expression lineRoundLimit);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineSortKey(double lineSortKey);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineSortKey(com.mapbox.maps.extension.style.expressions.generated.Expression lineSortKey);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineTranslate(java.util.List<java.lang.Double> lineTranslate = listOf(0.0, 0.0));
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineTranslate(com.mapbox.maps.extension.style.expressions.generated.Expression lineTranslate);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineTranslateAnchor(com.mapbox.maps.extension.style.layers.properties.generated.LineTranslateAnchor lineTranslateAnchor = com.mapbox.maps.extension.style.layers.properties.generated.LineTranslateAnchor.MAP);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineTranslateAnchor(com.mapbox.maps.extension.style.expressions.generated.Expression lineTranslateAnchor);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineTranslateTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineTranslateTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineWidth(double lineWidth = 1.0);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineWidth(com.mapbox.maps.extension.style.expressions.generated.Expression lineWidth);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineWidthTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer lineWidthTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer maxZoom(double maxZoom);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer minZoom(double minZoom);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer sourceLayer(String sourceLayer);
    method public com.mapbox.maps.extension.style.layers.generated.LineLayer visibility(com.mapbox.maps.extension.style.layers.properties.generated.Visibility visibility);
  }

  public final class LineLayerKt {
    method public static com.mapbox.maps.extension.style.layers.generated.LineLayer lineLayer(String layerId, String sourceId, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.layers.generated.LineLayerDsl,kotlin.Unit> block);
  }

  @UiThread public final class LocationIndicatorLayer extends com.mapbox.maps.extension.style.layers.Layer implements com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayerDsl {
    ctor public LocationIndicatorLayer(String layerId);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer accuracyRadius(double accuracyRadius);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer accuracyRadius(com.mapbox.maps.extension.style.expressions.generated.Expression accuracyRadius);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer accuracyRadiusBorderColor(String accuracyRadiusBorderColor);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer accuracyRadiusBorderColor(com.mapbox.maps.extension.style.expressions.generated.Expression accuracyRadiusBorderColor);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer accuracyRadiusBorderColor(@ColorInt int accuracyRadiusBorderColor);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer accuracyRadiusBorderColorTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer accuracyRadiusBorderColorTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer accuracyRadiusColor(String accuracyRadiusColor);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer accuracyRadiusColor(com.mapbox.maps.extension.style.expressions.generated.Expression accuracyRadiusColor);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer accuracyRadiusColor(@ColorInt int accuracyRadiusColor);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer accuracyRadiusColorTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer accuracyRadiusColorTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer accuracyRadiusTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer accuracyRadiusTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer bearing(double bearing);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer bearing(com.mapbox.maps.extension.style.expressions.generated.Expression bearing);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer bearingImage(String bearingImage);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer bearingImage(com.mapbox.maps.extension.style.expressions.generated.Expression bearingImage);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer bearingImageSize(double bearingImageSize);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer bearingImageSize(com.mapbox.maps.extension.style.expressions.generated.Expression bearingImageSize);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer bearingImageSizeTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer bearingImageSizeTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer emphasisCircleColor(String emphasisCircleColor);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer emphasisCircleColor(com.mapbox.maps.extension.style.expressions.generated.Expression emphasisCircleColor);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer emphasisCircleColor(@ColorInt int emphasisCircleColor);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer emphasisCircleColorTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer emphasisCircleColorTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer emphasisCircleRadius(double emphasisCircleRadius);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer emphasisCircleRadius(com.mapbox.maps.extension.style.expressions.generated.Expression emphasisCircleRadius);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer emphasisCircleRadiusTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer emphasisCircleRadiusTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public Double? getAccuracyRadius();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getAccuracyRadiusAsExpression();
    method public String? getAccuracyRadiusBorderColor();
    method @ColorInt public Integer? getAccuracyRadiusBorderColorAsColorInt();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getAccuracyRadiusBorderColorAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getAccuracyRadiusBorderColorTransition();
    method public String? getAccuracyRadiusColor();
    method @ColorInt public Integer? getAccuracyRadiusColorAsColorInt();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getAccuracyRadiusColorAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getAccuracyRadiusColorTransition();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getAccuracyRadiusTransition();
    method public Double? getBearing();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getBearingAsExpression();
    method public String? getBearingImage();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getBearingImageAsExpression();
    method public Double? getBearingImageSize();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getBearingImageSizeAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getBearingImageSizeTransition();
    method public String? getEmphasisCircleColor();
    method @ColorInt public Integer? getEmphasisCircleColorAsColorInt();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getEmphasisCircleColorAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getEmphasisCircleColorTransition();
    method public Double? getEmphasisCircleRadius();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getEmphasisCircleRadiusAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getEmphasisCircleRadiusTransition();
    method public Double? getImagePitchDisplacement();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getImagePitchDisplacementAsExpression();
    method public String getLayerId();
    method public java.util.List<java.lang.Double>? getLocation();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getLocationAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getLocationTransition();
    method public Double? getMaxZoom();
    method public Double? getMinZoom();
    method public Double? getPerspectiveCompensation();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getPerspectiveCompensationAsExpression();
    method public String? getShadowImage();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getShadowImageAsExpression();
    method public Double? getShadowImageSize();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getShadowImageSizeAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getShadowImageSizeTransition();
    method public String? getTopImage();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getTopImageAsExpression();
    method public Double? getTopImageSize();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getTopImageSizeAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getTopImageSizeTransition();
    method public String getType$metalava_module();
    method public com.mapbox.maps.extension.style.layers.properties.generated.Visibility? getVisibility();
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer imagePitchDisplacement(double imagePitchDisplacement);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer imagePitchDisplacement(com.mapbox.maps.extension.style.expressions.generated.Expression imagePitchDisplacement);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer location(java.util.List<java.lang.Double> location);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer location(com.mapbox.maps.extension.style.expressions.generated.Expression location);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer locationTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer locationTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer maxZoom(double maxZoom);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer minZoom(double minZoom);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer perspectiveCompensation(double perspectiveCompensation);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer perspectiveCompensation(com.mapbox.maps.extension.style.expressions.generated.Expression perspectiveCompensation);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer shadowImage(String shadowImage);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer shadowImage(com.mapbox.maps.extension.style.expressions.generated.Expression shadowImage);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer shadowImageSize(double shadowImageSize);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer shadowImageSize(com.mapbox.maps.extension.style.expressions.generated.Expression shadowImageSize);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer shadowImageSizeTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer shadowImageSizeTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer topImage(String topImage);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer topImage(com.mapbox.maps.extension.style.expressions.generated.Expression topImage);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer topImageSize(double topImageSize);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer topImageSize(com.mapbox.maps.extension.style.expressions.generated.Expression topImageSize);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer topImageSizeTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer topImageSizeTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer visibility(com.mapbox.maps.extension.style.layers.properties.generated.Visibility visibility);
    property public final Double? accuracyRadius;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? accuracyRadiusAsExpression;
    property public final String? accuracyRadiusBorderColor;
    property @ColorInt public final Integer? accuracyRadiusBorderColorAsColorInt;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? accuracyRadiusBorderColorAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? accuracyRadiusBorderColorTransition;
    property public final String? accuracyRadiusColor;
    property @ColorInt public final Integer? accuracyRadiusColorAsColorInt;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? accuracyRadiusColorAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? accuracyRadiusColorTransition;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? accuracyRadiusTransition;
    property public final Double? bearing;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? bearingAsExpression;
    property public final String? bearingImage;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? bearingImageAsExpression;
    property public final Double? bearingImageSize;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? bearingImageSizeAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? bearingImageSizeTransition;
    property public final String? emphasisCircleColor;
    property @ColorInt public final Integer? emphasisCircleColorAsColorInt;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? emphasisCircleColorAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? emphasisCircleColorTransition;
    property public final Double? emphasisCircleRadius;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? emphasisCircleRadiusAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? emphasisCircleRadiusTransition;
    property public final Double? imagePitchDisplacement;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? imagePitchDisplacementAsExpression;
    property public String layerId;
    property public final java.util.List<java.lang.Double>? location;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? locationAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? locationTransition;
    property public Double? maxZoom;
    property public Double? minZoom;
    property public final Double? perspectiveCompensation;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? perspectiveCompensationAsExpression;
    property public final String? shadowImage;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? shadowImageAsExpression;
    property public final Double? shadowImageSize;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? shadowImageSizeAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? shadowImageSizeTransition;
    property public final String? topImage;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? topImageAsExpression;
    property public final Double? topImageSize;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? topImageSizeAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? topImageSizeTransition;
    property public com.mapbox.maps.extension.style.layers.properties.generated.Visibility? visibility;
    field public static final com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer.Companion Companion;
  }

  public static final class LocationIndicatorLayer.Companion {
    method public Double? getDefaultAccuracyRadius();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultAccuracyRadiusAsExpression();
    method public String? getDefaultAccuracyRadiusBorderColor();
    method @ColorInt public Integer? getDefaultAccuracyRadiusBorderColorAsColorInt();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultAccuracyRadiusBorderColorAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultAccuracyRadiusBorderColorTransition();
    method public String? getDefaultAccuracyRadiusColor();
    method @ColorInt public Integer? getDefaultAccuracyRadiusColorAsColorInt();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultAccuracyRadiusColorAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultAccuracyRadiusColorTransition();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultAccuracyRadiusTransition();
    method public Double? getDefaultBearing();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultBearingAsExpression();
    method public String? getDefaultBearingImage();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultBearingImageAsExpression();
    method public Double? getDefaultBearingImageSize();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultBearingImageSizeAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultBearingImageSizeTransition();
    method public String? getDefaultEmphasisCircleColor();
    method @ColorInt public Integer? getDefaultEmphasisCircleColorAsColorInt();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultEmphasisCircleColorAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultEmphasisCircleColorTransition();
    method public Double? getDefaultEmphasisCircleRadius();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultEmphasisCircleRadiusAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultEmphasisCircleRadiusTransition();
    method public Double? getDefaultImagePitchDisplacement();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultImagePitchDisplacementAsExpression();
    method public java.util.List<java.lang.Double>? getDefaultLocation();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultLocationAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultLocationTransition();
    method public Double? getDefaultMaxZoom();
    method public Double? getDefaultMinZoom();
    method public Double? getDefaultPerspectiveCompensation();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultPerspectiveCompensationAsExpression();
    method public String? getDefaultShadowImage();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultShadowImageAsExpression();
    method public Double? getDefaultShadowImageSize();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultShadowImageSizeAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultShadowImageSizeTransition();
    method public String? getDefaultTopImage();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultTopImageAsExpression();
    method public Double? getDefaultTopImageSize();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultTopImageSizeAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultTopImageSizeTransition();
    method public com.mapbox.maps.extension.style.layers.properties.generated.Visibility? getDefaultVisibility();
    property public final Double? defaultAccuracyRadius;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultAccuracyRadiusAsExpression;
    property public final String? defaultAccuracyRadiusBorderColor;
    property @ColorInt public final Integer? defaultAccuracyRadiusBorderColorAsColorInt;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultAccuracyRadiusBorderColorAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultAccuracyRadiusBorderColorTransition;
    property public final String? defaultAccuracyRadiusColor;
    property @ColorInt public final Integer? defaultAccuracyRadiusColorAsColorInt;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultAccuracyRadiusColorAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultAccuracyRadiusColorTransition;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultAccuracyRadiusTransition;
    property public final Double? defaultBearing;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultBearingAsExpression;
    property public final String? defaultBearingImage;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultBearingImageAsExpression;
    property public final Double? defaultBearingImageSize;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultBearingImageSizeAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultBearingImageSizeTransition;
    property public final String? defaultEmphasisCircleColor;
    property @ColorInt public final Integer? defaultEmphasisCircleColorAsColorInt;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultEmphasisCircleColorAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultEmphasisCircleColorTransition;
    property public final Double? defaultEmphasisCircleRadius;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultEmphasisCircleRadiusAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultEmphasisCircleRadiusTransition;
    property public final Double? defaultImagePitchDisplacement;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultImagePitchDisplacementAsExpression;
    property public final java.util.List<java.lang.Double>? defaultLocation;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultLocationAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultLocationTransition;
    property public final Double? defaultMaxZoom;
    property public final Double? defaultMinZoom;
    property public final Double? defaultPerspectiveCompensation;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultPerspectiveCompensationAsExpression;
    property public final String? defaultShadowImage;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultShadowImageAsExpression;
    property public final Double? defaultShadowImageSize;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultShadowImageSizeAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultShadowImageSizeTransition;
    property public final String? defaultTopImage;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultTopImageAsExpression;
    property public final Double? defaultTopImageSize;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultTopImageSizeAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultTopImageSizeTransition;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.Visibility? defaultVisibility;
  }

  @com.mapbox.maps.extension.style.types.LayersDsl public interface LocationIndicatorLayerDsl {
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer accuracyRadius(double accuracyRadius = 0.0);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer accuracyRadius(com.mapbox.maps.extension.style.expressions.generated.Expression accuracyRadius);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer accuracyRadiusBorderColor(String accuracyRadiusBorderColor = "#ffffff");
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer accuracyRadiusBorderColor(com.mapbox.maps.extension.style.expressions.generated.Expression accuracyRadiusBorderColor);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer accuracyRadiusBorderColor(@ColorInt int accuracyRadiusBorderColor);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer accuracyRadiusBorderColorTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer accuracyRadiusBorderColorTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer accuracyRadiusColor(String accuracyRadiusColor = "#ffffff");
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer accuracyRadiusColor(com.mapbox.maps.extension.style.expressions.generated.Expression accuracyRadiusColor);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer accuracyRadiusColor(@ColorInt int accuracyRadiusColor);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer accuracyRadiusColorTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer accuracyRadiusColorTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer accuracyRadiusTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer accuracyRadiusTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer bearing(double bearing = 0.0);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer bearing(com.mapbox.maps.extension.style.expressions.generated.Expression bearing);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer bearingImage(String bearingImage);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer bearingImage(com.mapbox.maps.extension.style.expressions.generated.Expression bearingImage);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer bearingImageSize(double bearingImageSize = 1.0);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer bearingImageSize(com.mapbox.maps.extension.style.expressions.generated.Expression bearingImageSize);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer bearingImageSizeTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer bearingImageSizeTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer emphasisCircleColor(String emphasisCircleColor = "#ffffff");
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer emphasisCircleColor(com.mapbox.maps.extension.style.expressions.generated.Expression emphasisCircleColor);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer emphasisCircleColor(@ColorInt int emphasisCircleColor);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer emphasisCircleColorTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer emphasisCircleColorTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer emphasisCircleRadius(double emphasisCircleRadius = 0.0);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer emphasisCircleRadius(com.mapbox.maps.extension.style.expressions.generated.Expression emphasisCircleRadius);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer emphasisCircleRadiusTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer emphasisCircleRadiusTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer imagePitchDisplacement(double imagePitchDisplacement = 0.0);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer imagePitchDisplacement(com.mapbox.maps.extension.style.expressions.generated.Expression imagePitchDisplacement);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer location(java.util.List<java.lang.Double> location = listOf(0.0, 0.0, 0.0));
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer location(com.mapbox.maps.extension.style.expressions.generated.Expression location);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer locationTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer locationTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer maxZoom(double maxZoom);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer minZoom(double minZoom);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer perspectiveCompensation(double perspectiveCompensation = 0.85);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer perspectiveCompensation(com.mapbox.maps.extension.style.expressions.generated.Expression perspectiveCompensation);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer shadowImage(String shadowImage);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer shadowImage(com.mapbox.maps.extension.style.expressions.generated.Expression shadowImage);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer shadowImageSize(double shadowImageSize = 1.0);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer shadowImageSize(com.mapbox.maps.extension.style.expressions.generated.Expression shadowImageSize);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer shadowImageSizeTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer shadowImageSizeTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer topImage(String topImage);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer topImage(com.mapbox.maps.extension.style.expressions.generated.Expression topImage);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer topImageSize(double topImageSize = 1.0);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer topImageSize(com.mapbox.maps.extension.style.expressions.generated.Expression topImageSize);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer topImageSizeTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer topImageSizeTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer visibility(com.mapbox.maps.extension.style.layers.properties.generated.Visibility visibility);
  }

  public final class LocationIndicatorLayerKt {
    method public static com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayer locationIndicatorLayer(String layerId, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.layers.generated.LocationIndicatorLayerDsl,kotlin.Unit> block);
  }

  @UiThread public final class RasterLayer extends com.mapbox.maps.extension.style.layers.Layer implements com.mapbox.maps.extension.style.layers.generated.RasterLayerDsl {
    ctor public RasterLayer(String layerId, String sourceId);
    method public String getLayerId();
    method public Double? getMaxZoom();
    method public Double? getMinZoom();
    method public Double? getRasterBrightnessMax();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getRasterBrightnessMaxAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getRasterBrightnessMaxTransition();
    method public Double? getRasterBrightnessMin();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getRasterBrightnessMinAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getRasterBrightnessMinTransition();
    method public Double? getRasterContrast();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getRasterContrastAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getRasterContrastTransition();
    method public Double? getRasterFadeDuration();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getRasterFadeDurationAsExpression();
    method public Double? getRasterHueRotate();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getRasterHueRotateAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getRasterHueRotateTransition();
    method public Double? getRasterOpacity();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getRasterOpacityAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getRasterOpacityTransition();
    method public com.mapbox.maps.extension.style.layers.properties.generated.RasterResampling? getRasterResampling();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getRasterResamplingAsExpression();
    method public Double? getRasterSaturation();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getRasterSaturationAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getRasterSaturationTransition();
    method public String getSourceId();
    method public String? getSourceLayer();
    method public String getType$metalava_module();
    method public com.mapbox.maps.extension.style.layers.properties.generated.Visibility? getVisibility();
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer maxZoom(double maxZoom);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer minZoom(double minZoom);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterBrightnessMax(double rasterBrightnessMax);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterBrightnessMax(com.mapbox.maps.extension.style.expressions.generated.Expression rasterBrightnessMax);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterBrightnessMaxTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterBrightnessMaxTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterBrightnessMin(double rasterBrightnessMin);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterBrightnessMin(com.mapbox.maps.extension.style.expressions.generated.Expression rasterBrightnessMin);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterBrightnessMinTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterBrightnessMinTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterContrast(double rasterContrast);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterContrast(com.mapbox.maps.extension.style.expressions.generated.Expression rasterContrast);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterContrastTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterContrastTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterFadeDuration(double rasterFadeDuration);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterFadeDuration(com.mapbox.maps.extension.style.expressions.generated.Expression rasterFadeDuration);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterHueRotate(double rasterHueRotate);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterHueRotate(com.mapbox.maps.extension.style.expressions.generated.Expression rasterHueRotate);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterHueRotateTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterHueRotateTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterOpacity(double rasterOpacity);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterOpacity(com.mapbox.maps.extension.style.expressions.generated.Expression rasterOpacity);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterOpacityTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterOpacityTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterResampling(com.mapbox.maps.extension.style.layers.properties.generated.RasterResampling rasterResampling);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterResampling(com.mapbox.maps.extension.style.expressions.generated.Expression rasterResampling);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterSaturation(double rasterSaturation);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterSaturation(com.mapbox.maps.extension.style.expressions.generated.Expression rasterSaturation);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterSaturationTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterSaturationTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer sourceLayer(String sourceLayer);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer visibility(com.mapbox.maps.extension.style.layers.properties.generated.Visibility visibility);
    property public String layerId;
    property public Double? maxZoom;
    property public Double? minZoom;
    property public final Double? rasterBrightnessMax;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? rasterBrightnessMaxAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? rasterBrightnessMaxTransition;
    property public final Double? rasterBrightnessMin;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? rasterBrightnessMinAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? rasterBrightnessMinTransition;
    property public final Double? rasterContrast;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? rasterContrastAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? rasterContrastTransition;
    property public final Double? rasterFadeDuration;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? rasterFadeDurationAsExpression;
    property public final Double? rasterHueRotate;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? rasterHueRotateAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? rasterHueRotateTransition;
    property public final Double? rasterOpacity;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? rasterOpacityAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? rasterOpacityTransition;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.RasterResampling? rasterResampling;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? rasterResamplingAsExpression;
    property public final Double? rasterSaturation;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? rasterSaturationAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? rasterSaturationTransition;
    property public final String sourceId;
    property public final String? sourceLayer;
    property public com.mapbox.maps.extension.style.layers.properties.generated.Visibility? visibility;
    field public static final com.mapbox.maps.extension.style.layers.generated.RasterLayer.Companion Companion;
  }

  public static final class RasterLayer.Companion {
    method public Double? getDefaultMaxZoom();
    method public Double? getDefaultMinZoom();
    method public Double? getDefaultRasterBrightnessMax();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultRasterBrightnessMaxAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultRasterBrightnessMaxTransition();
    method public Double? getDefaultRasterBrightnessMin();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultRasterBrightnessMinAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultRasterBrightnessMinTransition();
    method public Double? getDefaultRasterContrast();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultRasterContrastAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultRasterContrastTransition();
    method public Double? getDefaultRasterFadeDuration();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultRasterFadeDurationAsExpression();
    method public Double? getDefaultRasterHueRotate();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultRasterHueRotateAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultRasterHueRotateTransition();
    method public Double? getDefaultRasterOpacity();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultRasterOpacityAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultRasterOpacityTransition();
    method public com.mapbox.maps.extension.style.layers.properties.generated.RasterResampling? getDefaultRasterResampling();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultRasterResamplingAsExpression();
    method public Double? getDefaultRasterSaturation();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultRasterSaturationAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultRasterSaturationTransition();
    method public com.mapbox.maps.extension.style.layers.properties.generated.Visibility? getDefaultVisibility();
    property public final Double? defaultMaxZoom;
    property public final Double? defaultMinZoom;
    property public final Double? defaultRasterBrightnessMax;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultRasterBrightnessMaxAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultRasterBrightnessMaxTransition;
    property public final Double? defaultRasterBrightnessMin;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultRasterBrightnessMinAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultRasterBrightnessMinTransition;
    property public final Double? defaultRasterContrast;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultRasterContrastAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultRasterContrastTransition;
    property public final Double? defaultRasterFadeDuration;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultRasterFadeDurationAsExpression;
    property public final Double? defaultRasterHueRotate;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultRasterHueRotateAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultRasterHueRotateTransition;
    property public final Double? defaultRasterOpacity;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultRasterOpacityAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultRasterOpacityTransition;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.RasterResampling? defaultRasterResampling;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultRasterResamplingAsExpression;
    property public final Double? defaultRasterSaturation;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultRasterSaturationAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultRasterSaturationTransition;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.Visibility? defaultVisibility;
  }

  @com.mapbox.maps.extension.style.types.LayersDsl public interface RasterLayerDsl {
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer maxZoom(double maxZoom);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer minZoom(double minZoom);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterBrightnessMax(double rasterBrightnessMax = 1.0);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterBrightnessMax(com.mapbox.maps.extension.style.expressions.generated.Expression rasterBrightnessMax);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterBrightnessMaxTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterBrightnessMaxTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterBrightnessMin(double rasterBrightnessMin = 0.0);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterBrightnessMin(com.mapbox.maps.extension.style.expressions.generated.Expression rasterBrightnessMin);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterBrightnessMinTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterBrightnessMinTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterContrast(double rasterContrast = 0.0);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterContrast(com.mapbox.maps.extension.style.expressions.generated.Expression rasterContrast);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterContrastTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterContrastTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterFadeDuration(double rasterFadeDuration = 300.0);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterFadeDuration(com.mapbox.maps.extension.style.expressions.generated.Expression rasterFadeDuration);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterHueRotate(double rasterHueRotate = 0.0);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterHueRotate(com.mapbox.maps.extension.style.expressions.generated.Expression rasterHueRotate);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterHueRotateTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterHueRotateTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterOpacity(double rasterOpacity = 1.0);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterOpacity(com.mapbox.maps.extension.style.expressions.generated.Expression rasterOpacity);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterOpacityTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterOpacityTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterResampling(com.mapbox.maps.extension.style.layers.properties.generated.RasterResampling rasterResampling = com.mapbox.maps.extension.style.layers.properties.generated.RasterResampling.LINEAR);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterResampling(com.mapbox.maps.extension.style.expressions.generated.Expression rasterResampling);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterSaturation(double rasterSaturation = 0.0);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterSaturation(com.mapbox.maps.extension.style.expressions.generated.Expression rasterSaturation);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterSaturationTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterSaturationTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer sourceLayer(String sourceLayer);
    method public com.mapbox.maps.extension.style.layers.generated.RasterLayer visibility(com.mapbox.maps.extension.style.layers.properties.generated.Visibility visibility);
  }

  public final class RasterLayerKt {
    method public static com.mapbox.maps.extension.style.layers.generated.RasterLayer rasterLayer(String layerId, String sourceId, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.layers.generated.RasterLayerDsl,kotlin.Unit> block);
  }

  @UiThread public final class SkyLayer extends com.mapbox.maps.extension.style.layers.Layer implements com.mapbox.maps.extension.style.layers.generated.SkyLayerDsl {
    ctor public SkyLayer(String layerId);
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer filter(com.mapbox.maps.extension.style.expressions.generated.Expression filter);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getFilter();
    method public String getLayerId();
    method public Double? getMaxZoom();
    method public Double? getMinZoom();
    method public String? getSkyAtmosphereColor();
    method @ColorInt public Integer? getSkyAtmosphereColorAsColorInt();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getSkyAtmosphereColorAsExpression();
    method public String? getSkyAtmosphereHaloColor();
    method @ColorInt public Integer? getSkyAtmosphereHaloColorAsColorInt();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getSkyAtmosphereHaloColorAsExpression();
    method public java.util.List<java.lang.Double>? getSkyAtmosphereSun();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getSkyAtmosphereSunAsExpression();
    method public Double? getSkyAtmosphereSunIntensity();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getSkyAtmosphereSunIntensityAsExpression();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getSkyGradient();
    method public java.util.List<java.lang.Double>? getSkyGradientCenter();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getSkyGradientCenterAsExpression();
    method public Double? getSkyGradientRadius();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getSkyGradientRadiusAsExpression();
    method public Double? getSkyOpacity();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getSkyOpacityAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getSkyOpacityTransition();
    method public com.mapbox.maps.extension.style.layers.properties.generated.SkyType? getSkyType();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getSkyTypeAsExpression();
    method public String getType$metalava_module();
    method public com.mapbox.maps.extension.style.layers.properties.generated.Visibility? getVisibility();
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer maxZoom(double maxZoom);
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer minZoom(double minZoom);
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer skyAtmosphereColor(String skyAtmosphereColor);
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer skyAtmosphereColor(com.mapbox.maps.extension.style.expressions.generated.Expression skyAtmosphereColor);
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer skyAtmosphereColor(@ColorInt int skyAtmosphereColor);
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer skyAtmosphereHaloColor(String skyAtmosphereHaloColor);
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer skyAtmosphereHaloColor(com.mapbox.maps.extension.style.expressions.generated.Expression skyAtmosphereHaloColor);
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer skyAtmosphereHaloColor(@ColorInt int skyAtmosphereHaloColor);
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer skyAtmosphereSun(java.util.List<java.lang.Double> skyAtmosphereSun);
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer skyAtmosphereSun(com.mapbox.maps.extension.style.expressions.generated.Expression skyAtmosphereSun);
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer skyAtmosphereSunIntensity(double skyAtmosphereSunIntensity);
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer skyAtmosphereSunIntensity(com.mapbox.maps.extension.style.expressions.generated.Expression skyAtmosphereSunIntensity);
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer skyGradient(com.mapbox.maps.extension.style.expressions.generated.Expression skyGradient);
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer skyGradientCenter(java.util.List<java.lang.Double> skyGradientCenter);
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer skyGradientCenter(com.mapbox.maps.extension.style.expressions.generated.Expression skyGradientCenter);
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer skyGradientRadius(double skyGradientRadius);
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer skyGradientRadius(com.mapbox.maps.extension.style.expressions.generated.Expression skyGradientRadius);
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer skyOpacity(double skyOpacity);
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer skyOpacity(com.mapbox.maps.extension.style.expressions.generated.Expression skyOpacity);
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer skyOpacityTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer skyOpacityTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer skyType(com.mapbox.maps.extension.style.layers.properties.generated.SkyType skyType);
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer skyType(com.mapbox.maps.extension.style.expressions.generated.Expression skyType);
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer visibility(com.mapbox.maps.extension.style.layers.properties.generated.Visibility visibility);
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? filter;
    property public String layerId;
    property public Double? maxZoom;
    property public Double? minZoom;
    property public final String? skyAtmosphereColor;
    property @ColorInt public final Integer? skyAtmosphereColorAsColorInt;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? skyAtmosphereColorAsExpression;
    property public final String? skyAtmosphereHaloColor;
    property @ColorInt public final Integer? skyAtmosphereHaloColorAsColorInt;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? skyAtmosphereHaloColorAsExpression;
    property public final java.util.List<java.lang.Double>? skyAtmosphereSun;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? skyAtmosphereSunAsExpression;
    property public final Double? skyAtmosphereSunIntensity;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? skyAtmosphereSunIntensityAsExpression;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? skyGradient;
    property public final java.util.List<java.lang.Double>? skyGradientCenter;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? skyGradientCenterAsExpression;
    property public final Double? skyGradientRadius;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? skyGradientRadiusAsExpression;
    property public final Double? skyOpacity;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? skyOpacityAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? skyOpacityTransition;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.SkyType? skyType;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? skyTypeAsExpression;
    property public com.mapbox.maps.extension.style.layers.properties.generated.Visibility? visibility;
    field public static final com.mapbox.maps.extension.style.layers.generated.SkyLayer.Companion Companion;
  }

  public static final class SkyLayer.Companion {
    method public Double? getDefaultMaxZoom();
    method public Double? getDefaultMinZoom();
    method public String? getDefaultSkyAtmosphereColor();
    method @ColorInt public Integer? getDefaultSkyAtmosphereColorAsColorInt();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultSkyAtmosphereColorAsExpression();
    method public String? getDefaultSkyAtmosphereHaloColor();
    method @ColorInt public Integer? getDefaultSkyAtmosphereHaloColorAsColorInt();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultSkyAtmosphereHaloColorAsExpression();
    method public java.util.List<java.lang.Double>? getDefaultSkyAtmosphereSun();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultSkyAtmosphereSunAsExpression();
    method public Double? getDefaultSkyAtmosphereSunIntensity();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultSkyAtmosphereSunIntensityAsExpression();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultSkyGradient();
    method public java.util.List<java.lang.Double>? getDefaultSkyGradientCenter();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultSkyGradientCenterAsExpression();
    method public Double? getDefaultSkyGradientRadius();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultSkyGradientRadiusAsExpression();
    method public Double? getDefaultSkyOpacity();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultSkyOpacityAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultSkyOpacityTransition();
    method public com.mapbox.maps.extension.style.layers.properties.generated.SkyType? getDefaultSkyType();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultSkyTypeAsExpression();
    method public com.mapbox.maps.extension.style.layers.properties.generated.Visibility? getDefaultVisibility();
    property public final Double? defaultMaxZoom;
    property public final Double? defaultMinZoom;
    property public final String? defaultSkyAtmosphereColor;
    property @ColorInt public final Integer? defaultSkyAtmosphereColorAsColorInt;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultSkyAtmosphereColorAsExpression;
    property public final String? defaultSkyAtmosphereHaloColor;
    property @ColorInt public final Integer? defaultSkyAtmosphereHaloColorAsColorInt;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultSkyAtmosphereHaloColorAsExpression;
    property public final java.util.List<java.lang.Double>? defaultSkyAtmosphereSun;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultSkyAtmosphereSunAsExpression;
    property public final Double? defaultSkyAtmosphereSunIntensity;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultSkyAtmosphereSunIntensityAsExpression;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultSkyGradient;
    property public final java.util.List<java.lang.Double>? defaultSkyGradientCenter;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultSkyGradientCenterAsExpression;
    property public final Double? defaultSkyGradientRadius;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultSkyGradientRadiusAsExpression;
    property public final Double? defaultSkyOpacity;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultSkyOpacityAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultSkyOpacityTransition;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.SkyType? defaultSkyType;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultSkyTypeAsExpression;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.Visibility? defaultVisibility;
  }

  @com.mapbox.maps.extension.style.types.LayersDsl public interface SkyLayerDsl {
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer filter(com.mapbox.maps.extension.style.expressions.generated.Expression filter);
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer maxZoom(double maxZoom);
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer minZoom(double minZoom);
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer skyAtmosphereColor(String skyAtmosphereColor = "white");
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer skyAtmosphereColor(com.mapbox.maps.extension.style.expressions.generated.Expression skyAtmosphereColor);
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer skyAtmosphereColor(@ColorInt int skyAtmosphereColor);
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer skyAtmosphereHaloColor(String skyAtmosphereHaloColor = "white");
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer skyAtmosphereHaloColor(com.mapbox.maps.extension.style.expressions.generated.Expression skyAtmosphereHaloColor);
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer skyAtmosphereHaloColor(@ColorInt int skyAtmosphereHaloColor);
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer skyAtmosphereSun(java.util.List<java.lang.Double> skyAtmosphereSun);
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer skyAtmosphereSun(com.mapbox.maps.extension.style.expressions.generated.Expression skyAtmosphereSun);
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer skyAtmosphereSunIntensity(double skyAtmosphereSunIntensity = 10.0);
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer skyAtmosphereSunIntensity(com.mapbox.maps.extension.style.expressions.generated.Expression skyAtmosphereSunIntensity);
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer skyGradient(com.mapbox.maps.extension.style.expressions.generated.Expression skyGradient);
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer skyGradientCenter(java.util.List<java.lang.Double> skyGradientCenter = listOf(0.0, 0.0));
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer skyGradientCenter(com.mapbox.maps.extension.style.expressions.generated.Expression skyGradientCenter);
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer skyGradientRadius(double skyGradientRadius = 90.0);
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer skyGradientRadius(com.mapbox.maps.extension.style.expressions.generated.Expression skyGradientRadius);
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer skyOpacity(double skyOpacity = 1.0);
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer skyOpacity(com.mapbox.maps.extension.style.expressions.generated.Expression skyOpacity);
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer skyOpacityTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer skyOpacityTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer skyType(com.mapbox.maps.extension.style.layers.properties.generated.SkyType skyType = com.mapbox.maps.extension.style.layers.properties.generated.SkyType.ATMOSPHERE);
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer skyType(com.mapbox.maps.extension.style.expressions.generated.Expression skyType);
    method public com.mapbox.maps.extension.style.layers.generated.SkyLayer visibility(com.mapbox.maps.extension.style.layers.properties.generated.Visibility visibility);
  }

  public final class SkyLayerKt {
    method public static com.mapbox.maps.extension.style.layers.generated.SkyLayer skyLayer(String layerId, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.layers.generated.SkyLayerDsl,kotlin.Unit> block);
  }

  @UiThread public final class SymbolLayer extends com.mapbox.maps.extension.style.layers.Layer implements com.mapbox.maps.extension.style.layers.generated.SymbolLayerDsl {
    ctor public SymbolLayer(String layerId, String sourceId);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer filter(com.mapbox.maps.extension.style.expressions.generated.Expression filter);
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getFilter();
    method public Boolean? getIconAllowOverlap();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getIconAllowOverlapAsExpression();
    method public com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor? getIconAnchor();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getIconAnchorAsExpression();
    method public String? getIconColor();
    method @ColorInt public Integer? getIconColorAsColorInt();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getIconColorAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getIconColorTransition();
    method public Double? getIconHaloBlur();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getIconHaloBlurAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getIconHaloBlurTransition();
    method public String? getIconHaloColor();
    method @ColorInt public Integer? getIconHaloColorAsColorInt();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getIconHaloColorAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getIconHaloColorTransition();
    method public Double? getIconHaloWidth();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getIconHaloWidthAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getIconHaloWidthTransition();
    method public Boolean? getIconIgnorePlacement();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getIconIgnorePlacementAsExpression();
    method public String? getIconImage();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getIconImageAsExpression();
    method public Boolean? getIconKeepUpright();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getIconKeepUprightAsExpression();
    method public java.util.List<java.lang.Double>? getIconOffset();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getIconOffsetAsExpression();
    method public Double? getIconOpacity();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getIconOpacityAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getIconOpacityTransition();
    method public Boolean? getIconOptional();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getIconOptionalAsExpression();
    method public Double? getIconPadding();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getIconPaddingAsExpression();
    method public com.mapbox.maps.extension.style.layers.properties.generated.IconPitchAlignment? getIconPitchAlignment();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getIconPitchAlignmentAsExpression();
    method public Double? getIconRotate();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getIconRotateAsExpression();
    method public com.mapbox.maps.extension.style.layers.properties.generated.IconRotationAlignment? getIconRotationAlignment();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getIconRotationAlignmentAsExpression();
    method public Double? getIconSize();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getIconSizeAsExpression();
    method public com.mapbox.maps.extension.style.layers.properties.generated.IconTextFit? getIconTextFit();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getIconTextFitAsExpression();
    method public java.util.List<java.lang.Double>? getIconTextFitPadding();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getIconTextFitPaddingAsExpression();
    method public java.util.List<java.lang.Double>? getIconTranslate();
    method public com.mapbox.maps.extension.style.layers.properties.generated.IconTranslateAnchor? getIconTranslateAnchor();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getIconTranslateAnchorAsExpression();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getIconTranslateAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getIconTranslateTransition();
    method public String getLayerId();
    method public Double? getMaxZoom();
    method public Double? getMinZoom();
    method public String getSourceId();
    method public String? getSourceLayer();
    method public Boolean? getSymbolAvoidEdges();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getSymbolAvoidEdgesAsExpression();
    method public com.mapbox.maps.extension.style.layers.properties.generated.SymbolPlacement? getSymbolPlacement();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getSymbolPlacementAsExpression();
    method public Double? getSymbolSortKey();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getSymbolSortKeyAsExpression();
    method public Double? getSymbolSpacing();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getSymbolSpacingAsExpression();
    method public com.mapbox.maps.extension.style.layers.properties.generated.SymbolZOrder? getSymbolZOrder();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getSymbolZOrderAsExpression();
    method public Boolean? getTextAllowOverlap();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getTextAllowOverlapAsExpression();
    method public com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor? getTextAnchor();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getTextAnchorAsExpression();
    method public String? getTextColor();
    method @ColorInt public Integer? getTextColorAsColorInt();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getTextColorAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getTextColorTransition();
    method public com.mapbox.maps.extension.style.types.Formatted? getTextField();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getTextFieldAsExpression();
    method public String? getTextFieldAsString();
    method public java.util.List<java.lang.String>? getTextFont();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getTextFontAsExpression();
    method public Double? getTextHaloBlur();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getTextHaloBlurAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getTextHaloBlurTransition();
    method public String? getTextHaloColor();
    method @ColorInt public Integer? getTextHaloColorAsColorInt();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getTextHaloColorAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getTextHaloColorTransition();
    method public Double? getTextHaloWidth();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getTextHaloWidthAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getTextHaloWidthTransition();
    method public Boolean? getTextIgnorePlacement();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getTextIgnorePlacementAsExpression();
    method public com.mapbox.maps.extension.style.layers.properties.generated.TextJustify? getTextJustify();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getTextJustifyAsExpression();
    method public Boolean? getTextKeepUpright();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getTextKeepUprightAsExpression();
    method public Double? getTextLetterSpacing();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getTextLetterSpacingAsExpression();
    method public Double? getTextLineHeight();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getTextLineHeightAsExpression();
    method public Double? getTextMaxAngle();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getTextMaxAngleAsExpression();
    method public Double? getTextMaxWidth();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getTextMaxWidthAsExpression();
    method public java.util.List<java.lang.Double>? getTextOffset();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getTextOffsetAsExpression();
    method public Double? getTextOpacity();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getTextOpacityAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getTextOpacityTransition();
    method public Boolean? getTextOptional();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getTextOptionalAsExpression();
    method public Double? getTextPadding();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getTextPaddingAsExpression();
    method public com.mapbox.maps.extension.style.layers.properties.generated.TextPitchAlignment? getTextPitchAlignment();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getTextPitchAlignmentAsExpression();
    method public Double? getTextRadialOffset();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getTextRadialOffsetAsExpression();
    method public Double? getTextRotate();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getTextRotateAsExpression();
    method public com.mapbox.maps.extension.style.layers.properties.generated.TextRotationAlignment? getTextRotationAlignment();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getTextRotationAlignmentAsExpression();
    method public Double? getTextSize();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getTextSizeAsExpression();
    method public com.mapbox.maps.extension.style.layers.properties.generated.TextTransform? getTextTransform();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getTextTransformAsExpression();
    method public java.util.List<java.lang.Double>? getTextTranslate();
    method public com.mapbox.maps.extension.style.layers.properties.generated.TextTranslateAnchor? getTextTranslateAnchor();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getTextTranslateAnchorAsExpression();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getTextTranslateAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getTextTranslateTransition();
    method public java.util.List<java.lang.String>? getTextVariableAnchor();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getTextVariableAnchorAsExpression();
    method public java.util.List<java.lang.String>? getTextWritingMode();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getTextWritingModeAsExpression();
    method public String getType$metalava_module();
    method public com.mapbox.maps.extension.style.layers.properties.generated.Visibility? getVisibility();
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconAllowOverlap(boolean iconAllowOverlap);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconAllowOverlap(com.mapbox.maps.extension.style.expressions.generated.Expression iconAllowOverlap);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconAnchor(com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor iconAnchor);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconAnchor(com.mapbox.maps.extension.style.expressions.generated.Expression iconAnchor);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconColor(String iconColor);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconColor(com.mapbox.maps.extension.style.expressions.generated.Expression iconColor);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconColor(@ColorInt int iconColor);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconColorTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconColorTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconHaloBlur(double iconHaloBlur);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconHaloBlur(com.mapbox.maps.extension.style.expressions.generated.Expression iconHaloBlur);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconHaloBlurTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconHaloBlurTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconHaloColor(String iconHaloColor);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconHaloColor(com.mapbox.maps.extension.style.expressions.generated.Expression iconHaloColor);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconHaloColor(@ColorInt int iconHaloColor);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconHaloColorTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconHaloColorTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconHaloWidth(double iconHaloWidth);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconHaloWidth(com.mapbox.maps.extension.style.expressions.generated.Expression iconHaloWidth);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconHaloWidthTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconHaloWidthTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconIgnorePlacement(boolean iconIgnorePlacement);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconIgnorePlacement(com.mapbox.maps.extension.style.expressions.generated.Expression iconIgnorePlacement);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconImage(String iconImage);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconImage(com.mapbox.maps.extension.style.expressions.generated.Expression iconImage);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconKeepUpright(boolean iconKeepUpright);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconKeepUpright(com.mapbox.maps.extension.style.expressions.generated.Expression iconKeepUpright);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconOffset(java.util.List<java.lang.Double> iconOffset);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconOffset(com.mapbox.maps.extension.style.expressions.generated.Expression iconOffset);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconOpacity(double iconOpacity);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconOpacity(com.mapbox.maps.extension.style.expressions.generated.Expression iconOpacity);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconOpacityTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconOpacityTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconOptional(boolean iconOptional);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconOptional(com.mapbox.maps.extension.style.expressions.generated.Expression iconOptional);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconPadding(double iconPadding);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconPadding(com.mapbox.maps.extension.style.expressions.generated.Expression iconPadding);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconPitchAlignment(com.mapbox.maps.extension.style.layers.properties.generated.IconPitchAlignment iconPitchAlignment);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconPitchAlignment(com.mapbox.maps.extension.style.expressions.generated.Expression iconPitchAlignment);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconRotate(double iconRotate);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconRotate(com.mapbox.maps.extension.style.expressions.generated.Expression iconRotate);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconRotationAlignment(com.mapbox.maps.extension.style.layers.properties.generated.IconRotationAlignment iconRotationAlignment);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconRotationAlignment(com.mapbox.maps.extension.style.expressions.generated.Expression iconRotationAlignment);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconSize(double iconSize);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconSize(com.mapbox.maps.extension.style.expressions.generated.Expression iconSize);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconTextFit(com.mapbox.maps.extension.style.layers.properties.generated.IconTextFit iconTextFit);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconTextFit(com.mapbox.maps.extension.style.expressions.generated.Expression iconTextFit);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconTextFitPadding(java.util.List<java.lang.Double> iconTextFitPadding);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconTextFitPadding(com.mapbox.maps.extension.style.expressions.generated.Expression iconTextFitPadding);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconTranslate(java.util.List<java.lang.Double> iconTranslate);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconTranslate(com.mapbox.maps.extension.style.expressions.generated.Expression iconTranslate);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconTranslateAnchor(com.mapbox.maps.extension.style.layers.properties.generated.IconTranslateAnchor iconTranslateAnchor);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconTranslateAnchor(com.mapbox.maps.extension.style.expressions.generated.Expression iconTranslateAnchor);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconTranslateTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconTranslateTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer maxZoom(double maxZoom);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer minZoom(double minZoom);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer sourceLayer(String sourceLayer);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer symbolAvoidEdges(boolean symbolAvoidEdges);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer symbolAvoidEdges(com.mapbox.maps.extension.style.expressions.generated.Expression symbolAvoidEdges);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer symbolPlacement(com.mapbox.maps.extension.style.layers.properties.generated.SymbolPlacement symbolPlacement);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer symbolPlacement(com.mapbox.maps.extension.style.expressions.generated.Expression symbolPlacement);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer symbolSortKey(double symbolSortKey);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer symbolSortKey(com.mapbox.maps.extension.style.expressions.generated.Expression symbolSortKey);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer symbolSpacing(double symbolSpacing);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer symbolSpacing(com.mapbox.maps.extension.style.expressions.generated.Expression symbolSpacing);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer symbolZOrder(com.mapbox.maps.extension.style.layers.properties.generated.SymbolZOrder symbolZOrder);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer symbolZOrder(com.mapbox.maps.extension.style.expressions.generated.Expression symbolZOrder);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textAllowOverlap(boolean textAllowOverlap);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textAllowOverlap(com.mapbox.maps.extension.style.expressions.generated.Expression textAllowOverlap);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textAnchor(com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor textAnchor);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textAnchor(com.mapbox.maps.extension.style.expressions.generated.Expression textAnchor);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textColor(String textColor);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textColor(com.mapbox.maps.extension.style.expressions.generated.Expression textColor);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textColor(@ColorInt int textColor);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textColorTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textColorTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textField(com.mapbox.maps.extension.style.types.Formatted textField);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textField(com.mapbox.maps.extension.style.expressions.generated.Expression textField);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textField(String textField);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textField(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.Formatted,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textFont(java.util.List<java.lang.String> textFont);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textFont(com.mapbox.maps.extension.style.expressions.generated.Expression textFont);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textHaloBlur(double textHaloBlur);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textHaloBlur(com.mapbox.maps.extension.style.expressions.generated.Expression textHaloBlur);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textHaloBlurTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textHaloBlurTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textHaloColor(String textHaloColor);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textHaloColor(com.mapbox.maps.extension.style.expressions.generated.Expression textHaloColor);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textHaloColor(@ColorInt int textHaloColor);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textHaloColorTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textHaloColorTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textHaloWidth(double textHaloWidth);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textHaloWidth(com.mapbox.maps.extension.style.expressions.generated.Expression textHaloWidth);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textHaloWidthTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textHaloWidthTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textIgnorePlacement(boolean textIgnorePlacement);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textIgnorePlacement(com.mapbox.maps.extension.style.expressions.generated.Expression textIgnorePlacement);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textJustify(com.mapbox.maps.extension.style.layers.properties.generated.TextJustify textJustify);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textJustify(com.mapbox.maps.extension.style.expressions.generated.Expression textJustify);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textKeepUpright(boolean textKeepUpright);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textKeepUpright(com.mapbox.maps.extension.style.expressions.generated.Expression textKeepUpright);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textLetterSpacing(double textLetterSpacing);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textLetterSpacing(com.mapbox.maps.extension.style.expressions.generated.Expression textLetterSpacing);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textLineHeight(double textLineHeight);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textLineHeight(com.mapbox.maps.extension.style.expressions.generated.Expression textLineHeight);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textMaxAngle(double textMaxAngle);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textMaxAngle(com.mapbox.maps.extension.style.expressions.generated.Expression textMaxAngle);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textMaxWidth(double textMaxWidth);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textMaxWidth(com.mapbox.maps.extension.style.expressions.generated.Expression textMaxWidth);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textOffset(java.util.List<java.lang.Double> textOffset);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textOffset(com.mapbox.maps.extension.style.expressions.generated.Expression textOffset);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textOpacity(double textOpacity);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textOpacity(com.mapbox.maps.extension.style.expressions.generated.Expression textOpacity);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textOpacityTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textOpacityTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textOptional(boolean textOptional);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textOptional(com.mapbox.maps.extension.style.expressions.generated.Expression textOptional);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textPadding(double textPadding);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textPadding(com.mapbox.maps.extension.style.expressions.generated.Expression textPadding);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textPitchAlignment(com.mapbox.maps.extension.style.layers.properties.generated.TextPitchAlignment textPitchAlignment);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textPitchAlignment(com.mapbox.maps.extension.style.expressions.generated.Expression textPitchAlignment);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textRadialOffset(double textRadialOffset);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textRadialOffset(com.mapbox.maps.extension.style.expressions.generated.Expression textRadialOffset);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textRotate(double textRotate);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textRotate(com.mapbox.maps.extension.style.expressions.generated.Expression textRotate);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textRotationAlignment(com.mapbox.maps.extension.style.layers.properties.generated.TextRotationAlignment textRotationAlignment);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textRotationAlignment(com.mapbox.maps.extension.style.expressions.generated.Expression textRotationAlignment);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textSize(double textSize);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textSize(com.mapbox.maps.extension.style.expressions.generated.Expression textSize);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textTransform(com.mapbox.maps.extension.style.layers.properties.generated.TextTransform textTransform);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textTransform(com.mapbox.maps.extension.style.expressions.generated.Expression textTransform);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textTranslate(java.util.List<java.lang.Double> textTranslate);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textTranslate(com.mapbox.maps.extension.style.expressions.generated.Expression textTranslate);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textTranslateAnchor(com.mapbox.maps.extension.style.layers.properties.generated.TextTranslateAnchor textTranslateAnchor);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textTranslateAnchor(com.mapbox.maps.extension.style.expressions.generated.Expression textTranslateAnchor);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textTranslateTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textTranslateTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textVariableAnchor(java.util.List<java.lang.String> textVariableAnchor);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textVariableAnchor(com.mapbox.maps.extension.style.expressions.generated.Expression textVariableAnchor);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textWritingMode(java.util.List<java.lang.String> textWritingMode);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textWritingMode(com.mapbox.maps.extension.style.expressions.generated.Expression textWritingMode);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer visibility(com.mapbox.maps.extension.style.layers.properties.generated.Visibility visibility);
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? filter;
    property public final Boolean? iconAllowOverlap;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? iconAllowOverlapAsExpression;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor? iconAnchor;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? iconAnchorAsExpression;
    property public final String? iconColor;
    property @ColorInt public final Integer? iconColorAsColorInt;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? iconColorAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? iconColorTransition;
    property public final Double? iconHaloBlur;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? iconHaloBlurAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? iconHaloBlurTransition;
    property public final String? iconHaloColor;
    property @ColorInt public final Integer? iconHaloColorAsColorInt;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? iconHaloColorAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? iconHaloColorTransition;
    property public final Double? iconHaloWidth;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? iconHaloWidthAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? iconHaloWidthTransition;
    property public final Boolean? iconIgnorePlacement;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? iconIgnorePlacementAsExpression;
    property public final String? iconImage;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? iconImageAsExpression;
    property public final Boolean? iconKeepUpright;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? iconKeepUprightAsExpression;
    property public final java.util.List<java.lang.Double>? iconOffset;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? iconOffsetAsExpression;
    property public final Double? iconOpacity;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? iconOpacityAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? iconOpacityTransition;
    property public final Boolean? iconOptional;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? iconOptionalAsExpression;
    property public final Double? iconPadding;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? iconPaddingAsExpression;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.IconPitchAlignment? iconPitchAlignment;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? iconPitchAlignmentAsExpression;
    property public final Double? iconRotate;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? iconRotateAsExpression;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.IconRotationAlignment? iconRotationAlignment;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? iconRotationAlignmentAsExpression;
    property public final Double? iconSize;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? iconSizeAsExpression;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.IconTextFit? iconTextFit;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? iconTextFitAsExpression;
    property public final java.util.List<java.lang.Double>? iconTextFitPadding;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? iconTextFitPaddingAsExpression;
    property public final java.util.List<java.lang.Double>? iconTranslate;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.IconTranslateAnchor? iconTranslateAnchor;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? iconTranslateAnchorAsExpression;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? iconTranslateAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? iconTranslateTransition;
    property public String layerId;
    property public Double? maxZoom;
    property public Double? minZoom;
    property public final String sourceId;
    property public final String? sourceLayer;
    property public final Boolean? symbolAvoidEdges;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? symbolAvoidEdgesAsExpression;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.SymbolPlacement? symbolPlacement;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? symbolPlacementAsExpression;
    property public final Double? symbolSortKey;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? symbolSortKeyAsExpression;
    property public final Double? symbolSpacing;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? symbolSpacingAsExpression;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.SymbolZOrder? symbolZOrder;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? symbolZOrderAsExpression;
    property public final Boolean? textAllowOverlap;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? textAllowOverlapAsExpression;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor? textAnchor;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? textAnchorAsExpression;
    property public final String? textColor;
    property @ColorInt public final Integer? textColorAsColorInt;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? textColorAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? textColorTransition;
    property public final com.mapbox.maps.extension.style.types.Formatted? textField;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? textFieldAsExpression;
    property public final String? textFieldAsString;
    property public final java.util.List<java.lang.String>? textFont;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? textFontAsExpression;
    property public final Double? textHaloBlur;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? textHaloBlurAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? textHaloBlurTransition;
    property public final String? textHaloColor;
    property @ColorInt public final Integer? textHaloColorAsColorInt;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? textHaloColorAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? textHaloColorTransition;
    property public final Double? textHaloWidth;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? textHaloWidthAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? textHaloWidthTransition;
    property public final Boolean? textIgnorePlacement;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? textIgnorePlacementAsExpression;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.TextJustify? textJustify;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? textJustifyAsExpression;
    property public final Boolean? textKeepUpright;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? textKeepUprightAsExpression;
    property public final Double? textLetterSpacing;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? textLetterSpacingAsExpression;
    property public final Double? textLineHeight;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? textLineHeightAsExpression;
    property public final Double? textMaxAngle;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? textMaxAngleAsExpression;
    property public final Double? textMaxWidth;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? textMaxWidthAsExpression;
    property public final java.util.List<java.lang.Double>? textOffset;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? textOffsetAsExpression;
    property public final Double? textOpacity;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? textOpacityAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? textOpacityTransition;
    property public final Boolean? textOptional;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? textOptionalAsExpression;
    property public final Double? textPadding;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? textPaddingAsExpression;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.TextPitchAlignment? textPitchAlignment;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? textPitchAlignmentAsExpression;
    property public final Double? textRadialOffset;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? textRadialOffsetAsExpression;
    property public final Double? textRotate;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? textRotateAsExpression;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.TextRotationAlignment? textRotationAlignment;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? textRotationAlignmentAsExpression;
    property public final Double? textSize;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? textSizeAsExpression;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.TextTransform? textTransform;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? textTransformAsExpression;
    property public final java.util.List<java.lang.Double>? textTranslate;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.TextTranslateAnchor? textTranslateAnchor;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? textTranslateAnchorAsExpression;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? textTranslateAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? textTranslateTransition;
    property public final java.util.List<java.lang.String>? textVariableAnchor;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? textVariableAnchorAsExpression;
    property public final java.util.List<java.lang.String>? textWritingMode;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? textWritingModeAsExpression;
    property public com.mapbox.maps.extension.style.layers.properties.generated.Visibility? visibility;
    field public static final com.mapbox.maps.extension.style.layers.generated.SymbolLayer.Companion Companion;
  }

  public static final class SymbolLayer.Companion {
    method public Boolean? getDefaultIconAllowOverlap();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultIconAllowOverlapAsExpression();
    method public com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor? getDefaultIconAnchor();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultIconAnchorAsExpression();
    method public String? getDefaultIconColor();
    method @ColorInt public Integer? getDefaultIconColorAsColorInt();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultIconColorAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultIconColorTransition();
    method public Double? getDefaultIconHaloBlur();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultIconHaloBlurAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultIconHaloBlurTransition();
    method public String? getDefaultIconHaloColor();
    method @ColorInt public Integer? getDefaultIconHaloColorAsColorInt();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultIconHaloColorAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultIconHaloColorTransition();
    method public Double? getDefaultIconHaloWidth();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultIconHaloWidthAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultIconHaloWidthTransition();
    method public Boolean? getDefaultIconIgnorePlacement();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultIconIgnorePlacementAsExpression();
    method public String? getDefaultIconImage();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultIconImageAsExpression();
    method public Boolean? getDefaultIconKeepUpright();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultIconKeepUprightAsExpression();
    method public java.util.List<java.lang.Double>? getDefaultIconOffset();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultIconOffsetAsExpression();
    method public Double? getDefaultIconOpacity();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultIconOpacityAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultIconOpacityTransition();
    method public Boolean? getDefaultIconOptional();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultIconOptionalAsExpression();
    method public Double? getDefaultIconPadding();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultIconPaddingAsExpression();
    method public com.mapbox.maps.extension.style.layers.properties.generated.IconPitchAlignment? getDefaultIconPitchAlignment();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultIconPitchAlignmentAsExpression();
    method public Double? getDefaultIconRotate();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultIconRotateAsExpression();
    method public com.mapbox.maps.extension.style.layers.properties.generated.IconRotationAlignment? getDefaultIconRotationAlignment();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultIconRotationAlignmentAsExpression();
    method public Double? getDefaultIconSize();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultIconSizeAsExpression();
    method public com.mapbox.maps.extension.style.layers.properties.generated.IconTextFit? getDefaultIconTextFit();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultIconTextFitAsExpression();
    method public java.util.List<java.lang.Double>? getDefaultIconTextFitPadding();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultIconTextFitPaddingAsExpression();
    method public java.util.List<java.lang.Double>? getDefaultIconTranslate();
    method public com.mapbox.maps.extension.style.layers.properties.generated.IconTranslateAnchor? getDefaultIconTranslateAnchor();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultIconTranslateAnchorAsExpression();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultIconTranslateAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultIconTranslateTransition();
    method public Double? getDefaultMaxZoom();
    method public Double? getDefaultMinZoom();
    method public Boolean? getDefaultSymbolAvoidEdges();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultSymbolAvoidEdgesAsExpression();
    method public com.mapbox.maps.extension.style.layers.properties.generated.SymbolPlacement? getDefaultSymbolPlacement();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultSymbolPlacementAsExpression();
    method public Double? getDefaultSymbolSortKey();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultSymbolSortKeyAsExpression();
    method public Double? getDefaultSymbolSpacing();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultSymbolSpacingAsExpression();
    method public com.mapbox.maps.extension.style.layers.properties.generated.SymbolZOrder? getDefaultSymbolZOrder();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultSymbolZOrderAsExpression();
    method public Boolean? getDefaultTextAllowOverlap();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultTextAllowOverlapAsExpression();
    method public com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor? getDefaultTextAnchor();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultTextAnchorAsExpression();
    method public String? getDefaultTextColor();
    method @ColorInt public Integer? getDefaultTextColorAsColorInt();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultTextColorAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultTextColorTransition();
    method public com.mapbox.maps.extension.style.types.Formatted? getDefaultTextField();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultTextFieldAsExpression();
    method public String? getDefaultTextFieldAsString();
    method public java.util.List<java.lang.String>? getDefaultTextFont();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultTextFontAsExpression();
    method public Double? getDefaultTextHaloBlur();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultTextHaloBlurAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultTextHaloBlurTransition();
    method public String? getDefaultTextHaloColor();
    method @ColorInt public Integer? getDefaultTextHaloColorAsColorInt();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultTextHaloColorAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultTextHaloColorTransition();
    method public Double? getDefaultTextHaloWidth();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultTextHaloWidthAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultTextHaloWidthTransition();
    method public Boolean? getDefaultTextIgnorePlacement();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultTextIgnorePlacementAsExpression();
    method public com.mapbox.maps.extension.style.layers.properties.generated.TextJustify? getDefaultTextJustify();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultTextJustifyAsExpression();
    method public Boolean? getDefaultTextKeepUpright();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultTextKeepUprightAsExpression();
    method public Double? getDefaultTextLetterSpacing();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultTextLetterSpacingAsExpression();
    method public Double? getDefaultTextLineHeight();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultTextLineHeightAsExpression();
    method public Double? getDefaultTextMaxAngle();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultTextMaxAngleAsExpression();
    method public Double? getDefaultTextMaxWidth();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultTextMaxWidthAsExpression();
    method public java.util.List<java.lang.Double>? getDefaultTextOffset();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultTextOffsetAsExpression();
    method public Double? getDefaultTextOpacity();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultTextOpacityAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultTextOpacityTransition();
    method public Boolean? getDefaultTextOptional();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultTextOptionalAsExpression();
    method public Double? getDefaultTextPadding();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultTextPaddingAsExpression();
    method public com.mapbox.maps.extension.style.layers.properties.generated.TextPitchAlignment? getDefaultTextPitchAlignment();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultTextPitchAlignmentAsExpression();
    method public Double? getDefaultTextRadialOffset();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultTextRadialOffsetAsExpression();
    method public Double? getDefaultTextRotate();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultTextRotateAsExpression();
    method public com.mapbox.maps.extension.style.layers.properties.generated.TextRotationAlignment? getDefaultTextRotationAlignment();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultTextRotationAlignmentAsExpression();
    method public Double? getDefaultTextSize();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultTextSizeAsExpression();
    method public com.mapbox.maps.extension.style.layers.properties.generated.TextTransform? getDefaultTextTransform();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultTextTransformAsExpression();
    method public java.util.List<java.lang.Double>? getDefaultTextTranslate();
    method public com.mapbox.maps.extension.style.layers.properties.generated.TextTranslateAnchor? getDefaultTextTranslateAnchor();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultTextTranslateAnchorAsExpression();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultTextTranslateAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getDefaultTextTranslateTransition();
    method public java.util.List<java.lang.String>? getDefaultTextVariableAnchor();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultTextVariableAnchorAsExpression();
    method public java.util.List<java.lang.String>? getDefaultTextWritingMode();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getDefaultTextWritingModeAsExpression();
    method public com.mapbox.maps.extension.style.layers.properties.generated.Visibility? getDefaultVisibility();
    property public final Boolean? defaultIconAllowOverlap;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultIconAllowOverlapAsExpression;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor? defaultIconAnchor;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultIconAnchorAsExpression;
    property public final String? defaultIconColor;
    property @ColorInt public final Integer? defaultIconColorAsColorInt;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultIconColorAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultIconColorTransition;
    property public final Double? defaultIconHaloBlur;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultIconHaloBlurAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultIconHaloBlurTransition;
    property public final String? defaultIconHaloColor;
    property @ColorInt public final Integer? defaultIconHaloColorAsColorInt;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultIconHaloColorAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultIconHaloColorTransition;
    property public final Double? defaultIconHaloWidth;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultIconHaloWidthAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultIconHaloWidthTransition;
    property public final Boolean? defaultIconIgnorePlacement;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultIconIgnorePlacementAsExpression;
    property public final String? defaultIconImage;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultIconImageAsExpression;
    property public final Boolean? defaultIconKeepUpright;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultIconKeepUprightAsExpression;
    property public final java.util.List<java.lang.Double>? defaultIconOffset;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultIconOffsetAsExpression;
    property public final Double? defaultIconOpacity;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultIconOpacityAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultIconOpacityTransition;
    property public final Boolean? defaultIconOptional;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultIconOptionalAsExpression;
    property public final Double? defaultIconPadding;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultIconPaddingAsExpression;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.IconPitchAlignment? defaultIconPitchAlignment;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultIconPitchAlignmentAsExpression;
    property public final Double? defaultIconRotate;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultIconRotateAsExpression;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.IconRotationAlignment? defaultIconRotationAlignment;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultIconRotationAlignmentAsExpression;
    property public final Double? defaultIconSize;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultIconSizeAsExpression;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.IconTextFit? defaultIconTextFit;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultIconTextFitAsExpression;
    property public final java.util.List<java.lang.Double>? defaultIconTextFitPadding;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultIconTextFitPaddingAsExpression;
    property public final java.util.List<java.lang.Double>? defaultIconTranslate;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.IconTranslateAnchor? defaultIconTranslateAnchor;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultIconTranslateAnchorAsExpression;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultIconTranslateAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultIconTranslateTransition;
    property public final Double? defaultMaxZoom;
    property public final Double? defaultMinZoom;
    property public final Boolean? defaultSymbolAvoidEdges;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultSymbolAvoidEdgesAsExpression;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.SymbolPlacement? defaultSymbolPlacement;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultSymbolPlacementAsExpression;
    property public final Double? defaultSymbolSortKey;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultSymbolSortKeyAsExpression;
    property public final Double? defaultSymbolSpacing;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultSymbolSpacingAsExpression;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.SymbolZOrder? defaultSymbolZOrder;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultSymbolZOrderAsExpression;
    property public final Boolean? defaultTextAllowOverlap;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultTextAllowOverlapAsExpression;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor? defaultTextAnchor;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultTextAnchorAsExpression;
    property public final String? defaultTextColor;
    property @ColorInt public final Integer? defaultTextColorAsColorInt;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultTextColorAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultTextColorTransition;
    property public final com.mapbox.maps.extension.style.types.Formatted? defaultTextField;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultTextFieldAsExpression;
    property public final String? defaultTextFieldAsString;
    property public final java.util.List<java.lang.String>? defaultTextFont;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultTextFontAsExpression;
    property public final Double? defaultTextHaloBlur;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultTextHaloBlurAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultTextHaloBlurTransition;
    property public final String? defaultTextHaloColor;
    property @ColorInt public final Integer? defaultTextHaloColorAsColorInt;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultTextHaloColorAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultTextHaloColorTransition;
    property public final Double? defaultTextHaloWidth;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultTextHaloWidthAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultTextHaloWidthTransition;
    property public final Boolean? defaultTextIgnorePlacement;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultTextIgnorePlacementAsExpression;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.TextJustify? defaultTextJustify;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultTextJustifyAsExpression;
    property public final Boolean? defaultTextKeepUpright;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultTextKeepUprightAsExpression;
    property public final Double? defaultTextLetterSpacing;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultTextLetterSpacingAsExpression;
    property public final Double? defaultTextLineHeight;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultTextLineHeightAsExpression;
    property public final Double? defaultTextMaxAngle;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultTextMaxAngleAsExpression;
    property public final Double? defaultTextMaxWidth;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultTextMaxWidthAsExpression;
    property public final java.util.List<java.lang.Double>? defaultTextOffset;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultTextOffsetAsExpression;
    property public final Double? defaultTextOpacity;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultTextOpacityAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultTextOpacityTransition;
    property public final Boolean? defaultTextOptional;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultTextOptionalAsExpression;
    property public final Double? defaultTextPadding;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultTextPaddingAsExpression;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.TextPitchAlignment? defaultTextPitchAlignment;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultTextPitchAlignmentAsExpression;
    property public final Double? defaultTextRadialOffset;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultTextRadialOffsetAsExpression;
    property public final Double? defaultTextRotate;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultTextRotateAsExpression;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.TextRotationAlignment? defaultTextRotationAlignment;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultTextRotationAlignmentAsExpression;
    property public final Double? defaultTextSize;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultTextSizeAsExpression;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.TextTransform? defaultTextTransform;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultTextTransformAsExpression;
    property public final java.util.List<java.lang.Double>? defaultTextTranslate;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.TextTranslateAnchor? defaultTextTranslateAnchor;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultTextTranslateAnchorAsExpression;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultTextTranslateAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? defaultTextTranslateTransition;
    property public final java.util.List<java.lang.String>? defaultTextVariableAnchor;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultTextVariableAnchorAsExpression;
    property public final java.util.List<java.lang.String>? defaultTextWritingMode;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? defaultTextWritingModeAsExpression;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.Visibility? defaultVisibility;
  }

  @com.mapbox.maps.extension.style.types.LayersDsl public interface SymbolLayerDsl {
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer filter(com.mapbox.maps.extension.style.expressions.generated.Expression filter);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconAllowOverlap(boolean iconAllowOverlap = false);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconAllowOverlap(com.mapbox.maps.extension.style.expressions.generated.Expression iconAllowOverlap);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconAnchor(com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor iconAnchor = com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor.CENTER);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconAnchor(com.mapbox.maps.extension.style.expressions.generated.Expression iconAnchor);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconColor(String iconColor = "#000000");
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconColor(com.mapbox.maps.extension.style.expressions.generated.Expression iconColor);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconColor(@ColorInt int iconColor);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconColorTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconColorTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconHaloBlur(double iconHaloBlur = 0.0);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconHaloBlur(com.mapbox.maps.extension.style.expressions.generated.Expression iconHaloBlur);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconHaloBlurTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconHaloBlurTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconHaloColor(String iconHaloColor = "rgba(0, 0, 0, 0)");
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconHaloColor(com.mapbox.maps.extension.style.expressions.generated.Expression iconHaloColor);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconHaloColor(@ColorInt int iconHaloColor);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconHaloColorTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconHaloColorTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconHaloWidth(double iconHaloWidth = 0.0);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconHaloWidth(com.mapbox.maps.extension.style.expressions.generated.Expression iconHaloWidth);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconHaloWidthTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconHaloWidthTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconIgnorePlacement(boolean iconIgnorePlacement = false);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconIgnorePlacement(com.mapbox.maps.extension.style.expressions.generated.Expression iconIgnorePlacement);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconImage(String iconImage);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconImage(com.mapbox.maps.extension.style.expressions.generated.Expression iconImage);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconKeepUpright(boolean iconKeepUpright = false);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconKeepUpright(com.mapbox.maps.extension.style.expressions.generated.Expression iconKeepUpright);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconOffset(java.util.List<java.lang.Double> iconOffset = listOf(0.0, 0.0));
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconOffset(com.mapbox.maps.extension.style.expressions.generated.Expression iconOffset);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconOpacity(double iconOpacity = 1.0);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconOpacity(com.mapbox.maps.extension.style.expressions.generated.Expression iconOpacity);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconOpacityTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconOpacityTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconOptional(boolean iconOptional = false);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconOptional(com.mapbox.maps.extension.style.expressions.generated.Expression iconOptional);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconPadding(double iconPadding = 2.0);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconPadding(com.mapbox.maps.extension.style.expressions.generated.Expression iconPadding);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconPitchAlignment(com.mapbox.maps.extension.style.layers.properties.generated.IconPitchAlignment iconPitchAlignment = com.mapbox.maps.extension.style.layers.properties.generated.IconPitchAlignment.AUTO);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconPitchAlignment(com.mapbox.maps.extension.style.expressions.generated.Expression iconPitchAlignment);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconRotate(double iconRotate = 0.0);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconRotate(com.mapbox.maps.extension.style.expressions.generated.Expression iconRotate);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconRotationAlignment(com.mapbox.maps.extension.style.layers.properties.generated.IconRotationAlignment iconRotationAlignment = com.mapbox.maps.extension.style.layers.properties.generated.IconRotationAlignment.AUTO);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconRotationAlignment(com.mapbox.maps.extension.style.expressions.generated.Expression iconRotationAlignment);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconSize(double iconSize = 1.0);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconSize(com.mapbox.maps.extension.style.expressions.generated.Expression iconSize);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconTextFit(com.mapbox.maps.extension.style.layers.properties.generated.IconTextFit iconTextFit = com.mapbox.maps.extension.style.layers.properties.generated.IconTextFit.NONE);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconTextFit(com.mapbox.maps.extension.style.expressions.generated.Expression iconTextFit);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconTextFitPadding(java.util.List<java.lang.Double> iconTextFitPadding = listOf(0.0, 0.0, 0.0, 0.0));
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconTextFitPadding(com.mapbox.maps.extension.style.expressions.generated.Expression iconTextFitPadding);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconTranslate(java.util.List<java.lang.Double> iconTranslate = listOf(0.0, 0.0));
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconTranslate(com.mapbox.maps.extension.style.expressions.generated.Expression iconTranslate);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconTranslateAnchor(com.mapbox.maps.extension.style.layers.properties.generated.IconTranslateAnchor iconTranslateAnchor = com.mapbox.maps.extension.style.layers.properties.generated.IconTranslateAnchor.MAP);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconTranslateAnchor(com.mapbox.maps.extension.style.expressions.generated.Expression iconTranslateAnchor);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconTranslateTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer iconTranslateTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer maxZoom(double maxZoom);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer minZoom(double minZoom);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer sourceLayer(String sourceLayer);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer symbolAvoidEdges(boolean symbolAvoidEdges = false);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer symbolAvoidEdges(com.mapbox.maps.extension.style.expressions.generated.Expression symbolAvoidEdges);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer symbolPlacement(com.mapbox.maps.extension.style.layers.properties.generated.SymbolPlacement symbolPlacement = com.mapbox.maps.extension.style.layers.properties.generated.SymbolPlacement.POINT);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer symbolPlacement(com.mapbox.maps.extension.style.expressions.generated.Expression symbolPlacement);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer symbolSortKey(double symbolSortKey);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer symbolSortKey(com.mapbox.maps.extension.style.expressions.generated.Expression symbolSortKey);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer symbolSpacing(double symbolSpacing = 250.0);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer symbolSpacing(com.mapbox.maps.extension.style.expressions.generated.Expression symbolSpacing);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer symbolZOrder(com.mapbox.maps.extension.style.layers.properties.generated.SymbolZOrder symbolZOrder = com.mapbox.maps.extension.style.layers.properties.generated.SymbolZOrder.AUTO);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer symbolZOrder(com.mapbox.maps.extension.style.expressions.generated.Expression symbolZOrder);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textAllowOverlap(boolean textAllowOverlap = false);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textAllowOverlap(com.mapbox.maps.extension.style.expressions.generated.Expression textAllowOverlap);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textAnchor(com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor textAnchor = com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor.CENTER);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textAnchor(com.mapbox.maps.extension.style.expressions.generated.Expression textAnchor);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textColor(String textColor = "#000000");
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textColor(com.mapbox.maps.extension.style.expressions.generated.Expression textColor);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textColor(@ColorInt int textColor);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textColorTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textColorTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textField(com.mapbox.maps.extension.style.types.Formatted textField);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textField(com.mapbox.maps.extension.style.expressions.generated.Expression textField);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textField(String textField);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textField(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.Formatted,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textFont(java.util.List<java.lang.String> textFont = listOf("Open Sans Regular", "Arial Unicode MS Regular"));
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textFont(com.mapbox.maps.extension.style.expressions.generated.Expression textFont);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textHaloBlur(double textHaloBlur = 0.0);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textHaloBlur(com.mapbox.maps.extension.style.expressions.generated.Expression textHaloBlur);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textHaloBlurTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textHaloBlurTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textHaloColor(String textHaloColor = "rgba(0, 0, 0, 0)");
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textHaloColor(com.mapbox.maps.extension.style.expressions.generated.Expression textHaloColor);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textHaloColor(@ColorInt int textHaloColor);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textHaloColorTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textHaloColorTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textHaloWidth(double textHaloWidth = 0.0);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textHaloWidth(com.mapbox.maps.extension.style.expressions.generated.Expression textHaloWidth);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textHaloWidthTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textHaloWidthTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textIgnorePlacement(boolean textIgnorePlacement = false);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textIgnorePlacement(com.mapbox.maps.extension.style.expressions.generated.Expression textIgnorePlacement);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textJustify(com.mapbox.maps.extension.style.layers.properties.generated.TextJustify textJustify = com.mapbox.maps.extension.style.layers.properties.generated.TextJustify.CENTER);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textJustify(com.mapbox.maps.extension.style.expressions.generated.Expression textJustify);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textKeepUpright(boolean textKeepUpright = true);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textKeepUpright(com.mapbox.maps.extension.style.expressions.generated.Expression textKeepUpright);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textLetterSpacing(double textLetterSpacing = 0.0);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textLetterSpacing(com.mapbox.maps.extension.style.expressions.generated.Expression textLetterSpacing);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textLineHeight(double textLineHeight = 1.2);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textLineHeight(com.mapbox.maps.extension.style.expressions.generated.Expression textLineHeight);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textMaxAngle(double textMaxAngle = 45.0);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textMaxAngle(com.mapbox.maps.extension.style.expressions.generated.Expression textMaxAngle);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textMaxWidth(double textMaxWidth = 10.0);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textMaxWidth(com.mapbox.maps.extension.style.expressions.generated.Expression textMaxWidth);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textOffset(java.util.List<java.lang.Double> textOffset = listOf(0.0, 0.0));
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textOffset(com.mapbox.maps.extension.style.expressions.generated.Expression textOffset);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textOpacity(double textOpacity = 1.0);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textOpacity(com.mapbox.maps.extension.style.expressions.generated.Expression textOpacity);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textOpacityTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textOpacityTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textOptional(boolean textOptional = false);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textOptional(com.mapbox.maps.extension.style.expressions.generated.Expression textOptional);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textPadding(double textPadding = 2.0);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textPadding(com.mapbox.maps.extension.style.expressions.generated.Expression textPadding);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textPitchAlignment(com.mapbox.maps.extension.style.layers.properties.generated.TextPitchAlignment textPitchAlignment = com.mapbox.maps.extension.style.layers.properties.generated.TextPitchAlignment.AUTO);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textPitchAlignment(com.mapbox.maps.extension.style.expressions.generated.Expression textPitchAlignment);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textRadialOffset(double textRadialOffset = 0.0);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textRadialOffset(com.mapbox.maps.extension.style.expressions.generated.Expression textRadialOffset);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textRotate(double textRotate = 0.0);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textRotate(com.mapbox.maps.extension.style.expressions.generated.Expression textRotate);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textRotationAlignment(com.mapbox.maps.extension.style.layers.properties.generated.TextRotationAlignment textRotationAlignment = com.mapbox.maps.extension.style.layers.properties.generated.TextRotationAlignment.AUTO);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textRotationAlignment(com.mapbox.maps.extension.style.expressions.generated.Expression textRotationAlignment);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textSize(double textSize = 16.0);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textSize(com.mapbox.maps.extension.style.expressions.generated.Expression textSize);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textTransform(com.mapbox.maps.extension.style.layers.properties.generated.TextTransform textTransform = com.mapbox.maps.extension.style.layers.properties.generated.TextTransform.NONE);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textTransform(com.mapbox.maps.extension.style.expressions.generated.Expression textTransform);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textTranslate(java.util.List<java.lang.Double> textTranslate = listOf(0.0, 0.0));
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textTranslate(com.mapbox.maps.extension.style.expressions.generated.Expression textTranslate);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textTranslateAnchor(com.mapbox.maps.extension.style.layers.properties.generated.TextTranslateAnchor textTranslateAnchor = com.mapbox.maps.extension.style.layers.properties.generated.TextTranslateAnchor.MAP);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textTranslateAnchor(com.mapbox.maps.extension.style.expressions.generated.Expression textTranslateAnchor);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textTranslateTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textTranslateTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textVariableAnchor(java.util.List<java.lang.String> textVariableAnchor);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textVariableAnchor(com.mapbox.maps.extension.style.expressions.generated.Expression textVariableAnchor);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textWritingMode(java.util.List<java.lang.String> textWritingMode);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer textWritingMode(com.mapbox.maps.extension.style.expressions.generated.Expression textWritingMode);
    method public com.mapbox.maps.extension.style.layers.generated.SymbolLayer visibility(com.mapbox.maps.extension.style.layers.properties.generated.Visibility visibility);
  }

  public final class SymbolLayerKt {
    method public static com.mapbox.maps.extension.style.layers.generated.SymbolLayer symbolLayer(String layerId, String sourceId, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.layers.generated.SymbolLayerDsl,kotlin.Unit> block);
  }

}

package com.mapbox.maps.extension.style.layers.properties {

  public class PropertyValue<T> {
    method @ColorInt public final Integer? getColorInt();
    method public final String getPropertyName();
    method public final T! getPropertyValue();
    method public final com.mapbox.bindgen.Value getValue();
    method public final T? getValue();
    method public final boolean isExpression();
    method public final boolean isTransition();
    method public final boolean isValue();
    property @ColorInt public final Integer? colorInt;
    property public final boolean isExpression;
    property public final boolean isTransition;
    property public final boolean isValue;
    property public final String propertyName;
    property public final T! propertyValue;
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.style.layers.properties.PropertyValue.Companion Companion;
  }

  public static final class PropertyValue.Companion {
  }

}

package com.mapbox.maps.extension.style.layers.properties.generated {

  public enum Anchor {
    method public String! getValue();
    property public String! value;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.Anchor MAP;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.Anchor VIEWPORT;
  }

  public enum CirclePitchAlignment {
    method public String! getValue();
    property public String! value;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchAlignment MAP;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchAlignment VIEWPORT;
  }

  public enum CirclePitchScale {
    method public String! getValue();
    property public String! value;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchScale MAP;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchScale VIEWPORT;
  }

  public enum CircleTranslateAnchor {
    method public String! getValue();
    property public String! value;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.CircleTranslateAnchor MAP;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.CircleTranslateAnchor VIEWPORT;
  }

  public enum FillExtrusionTranslateAnchor {
    method public String! getValue();
    property public String! value;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionTranslateAnchor MAP;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.FillExtrusionTranslateAnchor VIEWPORT;
  }

  public enum FillTranslateAnchor {
    method public String! getValue();
    property public String! value;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.FillTranslateAnchor MAP;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.FillTranslateAnchor VIEWPORT;
  }

  public enum HillshadeIlluminationAnchor {
    method public String! getValue();
    property public String! value;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.HillshadeIlluminationAnchor MAP;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.HillshadeIlluminationAnchor VIEWPORT;
  }

  public enum IconAnchor {
    method public String! getValue();
    property public String! value;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor BOTTOM;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor BOTTOM_LEFT;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor BOTTOM_RIGHT;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor CENTER;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor LEFT;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor RIGHT;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor TOP;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor TOP_LEFT;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor TOP_RIGHT;
  }

  public enum IconPitchAlignment {
    method public String! getValue();
    property public String! value;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.IconPitchAlignment AUTO;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.IconPitchAlignment MAP;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.IconPitchAlignment VIEWPORT;
  }

  public enum IconRotationAlignment {
    method public String! getValue();
    property public String! value;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.IconRotationAlignment AUTO;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.IconRotationAlignment MAP;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.IconRotationAlignment VIEWPORT;
  }

  public enum IconTextFit {
    method public String! getValue();
    property public String! value;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.IconTextFit BOTH;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.IconTextFit HEIGHT;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.IconTextFit NONE;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.IconTextFit WIDTH;
  }

  public enum IconTranslateAnchor {
    method public String! getValue();
    property public String! value;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.IconTranslateAnchor MAP;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.IconTranslateAnchor VIEWPORT;
  }

  public enum LineCap {
    method public String! getValue();
    property public String! value;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.LineCap BUTT;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.LineCap ROUND;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.LineCap SQUARE;
  }

  public enum LineJoin {
    method public String! getValue();
    property public String! value;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.LineJoin BEVEL;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.LineJoin MITER;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.LineJoin ROUND;
  }

  public enum LineTranslateAnchor {
    method public String! getValue();
    property public String! value;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.LineTranslateAnchor MAP;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.LineTranslateAnchor VIEWPORT;
  }

  public enum RasterResampling {
    method public String! getValue();
    property public String! value;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.RasterResampling LINEAR;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.RasterResampling NEAREST;
  }

  public enum SkyType {
    method public String! getValue();
    property public String! value;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.SkyType ATMOSPHERE;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.SkyType GRADIENT;
  }

  public enum SymbolPlacement {
    method public String! getValue();
    property public String! value;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.SymbolPlacement LINE;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.SymbolPlacement LINE_CENTER;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.SymbolPlacement POINT;
  }

  public enum SymbolZOrder {
    method public String! getValue();
    property public String! value;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.SymbolZOrder AUTO;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.SymbolZOrder SOURCE;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.SymbolZOrder VIEWPORT_Y;
  }

  public enum TextAnchor {
    method public String! getValue();
    property public String! value;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor BOTTOM;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor BOTTOM_LEFT;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor BOTTOM_RIGHT;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor CENTER;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor LEFT;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor RIGHT;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor TOP;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor TOP_LEFT;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor TOP_RIGHT;
  }

  public enum TextJustify {
    method public String! getValue();
    property public String! value;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.TextJustify AUTO;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.TextJustify CENTER;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.TextJustify LEFT;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.TextJustify RIGHT;
  }

  public enum TextPitchAlignment {
    method public String! getValue();
    property public String! value;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.TextPitchAlignment AUTO;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.TextPitchAlignment MAP;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.TextPitchAlignment VIEWPORT;
  }

  public enum TextRotationAlignment {
    method public String! getValue();
    property public String! value;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.TextRotationAlignment AUTO;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.TextRotationAlignment MAP;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.TextRotationAlignment VIEWPORT;
  }

  public enum TextTransform {
    method public String! getValue();
    property public String! value;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.TextTransform LOWERCASE;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.TextTransform NONE;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.TextTransform UPPERCASE;
  }

  public enum TextTranslateAnchor {
    method public String! getValue();
    property public String! value;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.TextTranslateAnchor MAP;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.TextTranslateAnchor VIEWPORT;
  }

  public enum TextWritingMode {
    method public String! getValue();
    property public String! value;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.TextWritingMode HORIZONTAL;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.TextWritingMode VERTICAL;
  }

  public enum Visibility {
    method public String! getValue();
    property public String! value;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.Visibility NONE;
    enum_constant public static final com.mapbox.maps.extension.style.layers.properties.generated.Visibility VISIBLE;
  }

}

package com.mapbox.maps.extension.style.light {

  @com.mapbox.maps.extension.style.types.LightDsl public final class LightPosition {
    ctor public LightPosition(double radialCoordinate, double azimuthalAngle, double polarAngle);
    method public com.mapbox.maps.extension.style.light.LightPosition copy(double radialCoordinate, double azimuthalAngle, double polarAngle);
    method public double[] toDoubleArray();
    method public java.util.List<java.lang.Double> toList();
    method public com.mapbox.bindgen.Value toValue();
    field public static final com.mapbox.maps.extension.style.light.LightPosition.Companion Companion;
  }

  public static final class LightPosition.Companion {
    method public com.mapbox.maps.extension.style.light.LightPosition fromArray(double[] positionArray);
    method public com.mapbox.maps.extension.style.light.LightPosition fromList(java.util.List<java.lang.Double> positionList);
  }

}

package com.mapbox.maps.extension.style.light.generated {

  @UiThread public final class Light implements com.mapbox.maps.extension.style.light.generated.LightDslReceiver com.mapbox.maps.extension.style.StyleContract.StyleLightExtension {
    ctor public Light();
    method public com.mapbox.maps.extension.style.light.generated.Light anchor(com.mapbox.maps.extension.style.layers.properties.generated.Anchor anchor);
    method public com.mapbox.maps.extension.style.light.generated.Light anchor(com.mapbox.maps.extension.style.expressions.generated.Expression anchor);
    method public void bindTo(com.mapbox.maps.extension.style.StyleInterface delegate);
    method public com.mapbox.maps.extension.style.light.generated.Light color(@ColorInt int color);
    method public com.mapbox.maps.extension.style.light.generated.Light color(String color);
    method public com.mapbox.maps.extension.style.light.generated.Light color(com.mapbox.maps.extension.style.expressions.generated.Expression color);
    method public com.mapbox.maps.extension.style.light.generated.Light colorTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.light.generated.Light colorTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.layers.properties.generated.Anchor? getAnchor();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getAnchorAsExpression();
    method public String? getColor();
    method @ColorInt public Integer? getColorAsColorInt();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getColorAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getColorTransition();
    method public Double? getIntensity();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getIntensityAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getIntensityTransition();
    method public com.mapbox.maps.extension.style.light.LightPosition? getPosition();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getPositionAsExpression();
    method public com.mapbox.maps.extension.style.types.StyleTransition? getPositionTransition();
    method public com.mapbox.maps.extension.style.light.generated.Light intensity(double intensity);
    method public com.mapbox.maps.extension.style.light.generated.Light intensity(com.mapbox.maps.extension.style.expressions.generated.Expression intensity);
    method public com.mapbox.maps.extension.style.light.generated.Light intensityTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.light.generated.Light intensityTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.light.generated.Light position(double radialCoordinate, double azimuthalAngle, double polarAngle);
    method public com.mapbox.maps.extension.style.light.generated.Light position(com.mapbox.maps.extension.style.light.LightPosition position);
    method public com.mapbox.maps.extension.style.light.generated.Light position(com.mapbox.maps.extension.style.expressions.generated.Expression position);
    method public com.mapbox.maps.extension.style.light.generated.Light positionTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.light.generated.Light positionTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    property public final com.mapbox.maps.extension.style.layers.properties.generated.Anchor? anchor;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? anchorAsExpression;
    property public final String? color;
    property @ColorInt public final Integer? colorAsColorInt;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? colorAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? colorTransition;
    property public final Double? intensity;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? intensityAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? intensityTransition;
    property public final com.mapbox.maps.extension.style.light.LightPosition? position;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? positionAsExpression;
    property public final com.mapbox.maps.extension.style.types.StyleTransition? positionTransition;
    field public static final com.mapbox.maps.extension.style.light.generated.Light.Companion Companion;
  }

  public static final class Light.Companion {
  }

  @com.mapbox.maps.extension.style.types.LightDsl public interface LightDslReceiver {
    method public com.mapbox.maps.extension.style.light.generated.Light anchor(com.mapbox.maps.extension.style.layers.properties.generated.Anchor anchor = com.mapbox.maps.extension.style.layers.properties.generated.Anchor.VIEWPORT);
    method public com.mapbox.maps.extension.style.light.generated.Light anchor(com.mapbox.maps.extension.style.expressions.generated.Expression anchor);
    method public com.mapbox.maps.extension.style.light.generated.Light color(@ColorInt int color);
    method public com.mapbox.maps.extension.style.light.generated.Light color(String color = "#ffffff");
    method public com.mapbox.maps.extension.style.light.generated.Light color(com.mapbox.maps.extension.style.expressions.generated.Expression color);
    method public com.mapbox.maps.extension.style.light.generated.Light colorTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.light.generated.Light colorTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.light.generated.Light intensity(double intensity = 0.5);
    method public com.mapbox.maps.extension.style.light.generated.Light intensity(com.mapbox.maps.extension.style.expressions.generated.Expression intensity);
    method public com.mapbox.maps.extension.style.light.generated.Light intensityTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.light.generated.Light intensityTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.light.generated.Light position(double radialCoordinate, double azimuthalAngle, double polarAngle);
    method public com.mapbox.maps.extension.style.light.generated.Light position(com.mapbox.maps.extension.style.light.LightPosition position = com.mapbox.maps.extension.style.light.LightPosition(1.15, 210.0, 30.0));
    method public com.mapbox.maps.extension.style.light.generated.Light position(com.mapbox.maps.extension.style.expressions.generated.Expression position);
    method public com.mapbox.maps.extension.style.light.generated.Light positionTransition(com.mapbox.maps.extension.style.types.StyleTransition options);
    method public com.mapbox.maps.extension.style.light.generated.Light positionTransition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
  }

  public final class LightKt {
    method public static com.mapbox.maps.extension.style.light.generated.Light light(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.light.generated.LightDslReceiver,kotlin.Unit> block);
  }

  public final class LightUtils {
    method public static com.mapbox.maps.extension.style.light.generated.Light getLight(com.mapbox.maps.extension.style.StyleInterface);
    method public static void setLight(com.mapbox.maps.extension.style.StyleInterface, com.mapbox.maps.extension.style.StyleContract.StyleLightExtension light);
  }

}

package com.mapbox.maps.extension.style.sources {

  public final class CustomGeometrySource implements com.mapbox.maps.extension.style.StyleContract.StyleSourceExtension {
    ctor public CustomGeometrySource(String id, com.mapbox.maps.CustomGeometrySourceOptions options);
    method public void bindTo(com.mapbox.maps.extension.style.StyleInterface delegate);
    method public String getId();
    method public com.mapbox.maps.CustomGeometrySourceOptions getOptions();
    method public void invalidRegion(com.mapbox.maps.CoordinateBounds coordinateBounds);
    method public void invalidTile(com.mapbox.maps.CanonicalTileID tileID);
    method public void setTileData(com.mapbox.maps.CanonicalTileID tileID, java.util.List<com.mapbox.geojson.Feature> featureCollection);
    property public final String id;
    property public final com.mapbox.maps.CustomGeometrySourceOptions options;
  }

  public final class CustomGeometrySourceKt {
    method public static com.mapbox.maps.extension.style.sources.CustomGeometrySource customGeometrySource(String id, kotlin.jvm.functions.Function1<? super com.mapbox.maps.CustomGeometrySourceOptions.Builder,kotlin.Unit> block);
  }

  public final class ImageSourceExtKt {
    method public static void updateImage(com.mapbox.maps.extension.style.sources.generated.ImageSource, com.mapbox.maps.Image image);
  }

  public abstract class Source implements com.mapbox.maps.extension.style.StyleContract.StyleSourceExtension {
    ctor public Source(String sourceId);
    method public void bindTo(com.mapbox.maps.extension.style.StyleInterface delegate);
    method public final String getSourceId();
    property public final String sourceId;
    field public static final com.mapbox.maps.extension.style.sources.Source.Companion Companion;
  }

  public static final class Source.Companion {
  }

  public final class SourceUtils {
    method public static void addSource(com.mapbox.maps.extension.style.StyleInterface, com.mapbox.maps.extension.style.StyleContract.StyleSourceExtension source);
    method public static com.mapbox.maps.extension.style.sources.Source? getSource(com.mapbox.maps.StyleManagerInterface, String sourceId);
    method public static inline <reified T extends com.mapbox.maps.extension.style.sources.Source> T! getSourceAs(com.mapbox.maps.StyleManagerInterface, String sourceId);
  }

  public final class TileSet extends java.util.HashMap<java.lang.String,com.mapbox.bindgen.Value> {
  }

  public static class TileSet.Builder {
    ctor public TileSet.Builder(String tilejson, java.util.List<java.lang.String> tiles);
    method public final com.mapbox.maps.extension.style.sources.TileSet.Builder attribution(String value);
    method public final com.mapbox.maps.extension.style.sources.TileSet.Builder bounds(java.util.List<java.lang.Double> value = listOf(-180.0, -90.0, 180.0, 90.0));
    method public final com.mapbox.maps.extension.style.sources.TileSet build();
    method public final com.mapbox.maps.extension.style.sources.TileSet.Builder center(java.util.List<java.lang.Double> value);
    method public final com.mapbox.maps.extension.style.sources.TileSet.Builder data(java.util.List<java.lang.String> value);
    method public final com.mapbox.maps.extension.style.sources.TileSet.Builder description(String value);
    method public final String getTilejson();
    method public final java.util.List<java.lang.String> getTiles();
    method public final com.mapbox.maps.extension.style.sources.TileSet.Builder grids(java.util.List<java.lang.String> value);
    method public final com.mapbox.maps.extension.style.sources.TileSet.Builder legend(String value);
    method public final com.mapbox.maps.extension.style.sources.TileSet.Builder maxZoom(int value = 30);
    method public final com.mapbox.maps.extension.style.sources.TileSet.Builder minZoom(int value = 0);
    method public final com.mapbox.maps.extension.style.sources.TileSet.Builder name(String value);
    method public final com.mapbox.maps.extension.style.sources.TileSet.Builder scheme(com.mapbox.maps.extension.style.sources.generated.Scheme value);
    method public final com.mapbox.maps.extension.style.sources.TileSet.Builder template(String value);
    method public final com.mapbox.maps.extension.style.sources.TileSet.Builder version(String value = "1.0.0");
    property public final String tilejson;
    property public final java.util.List<java.lang.String> tiles;
  }

  public static final class TileSet.RasterDemBuilder extends com.mapbox.maps.extension.style.sources.TileSet.Builder {
    ctor public TileSet.RasterDemBuilder(String tilejson, java.util.List<java.lang.String> tiles);
    method public com.mapbox.maps.extension.style.sources.TileSet.RasterDemBuilder encoding(com.mapbox.maps.extension.style.sources.generated.Encoding value);
  }

}

package com.mapbox.maps.extension.style.sources.generated {

  public enum Encoding {
    method public final String! getValue();
    property public final String! value;
    enum_constant public static final com.mapbox.maps.extension.style.sources.generated.Encoding MAPBOX;
    enum_constant public static final com.mapbox.maps.extension.style.sources.generated.Encoding TERRARIUM;
  }

  public final class GeoJsonSource extends com.mapbox.maps.extension.style.sources.Source {
    ctor public GeoJsonSource(com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder builder);
    method public com.mapbox.maps.extension.style.sources.generated.GeoJsonSource data(String value);
    method public com.mapbox.maps.extension.style.sources.generated.GeoJsonSource feature(com.mapbox.geojson.Feature value);
    method public com.mapbox.maps.extension.style.sources.generated.GeoJsonSource featureCollection(com.mapbox.geojson.FeatureCollection value);
    method public com.mapbox.maps.extension.style.sources.generated.GeoJsonSource geometry(com.mapbox.geojson.Geometry value);
    method public String? getAttribution();
    method public Long? getBuffer();
    method public Boolean? getCluster();
    method public Long? getClusterMaxZoom();
    method public java.util.HashMap<java.lang.String,java.lang.Object>? getClusterProperties();
    method public Long? getClusterRadius();
    method public String? getData();
    method public Boolean? getGenerateId();
    method public Boolean? getLineMetrics();
    method public Long? getMaxzoom();
    method public Long? getPrefetchZoomDelta();
    method public com.mapbox.maps.extension.style.types.PromoteId? getPromoteId();
    method public Double? getTolerance();
    method public String getType$metalava_module();
    method public com.mapbox.maps.extension.style.sources.generated.GeoJsonSource prefetchZoomDelta(long value = 4L);
    method public com.mapbox.maps.extension.style.sources.generated.GeoJsonSource url(String value);
    property public final String? attribution;
    property public final Long? buffer;
    property public final Boolean? cluster;
    property public final Long? clusterMaxZoom;
    property public final java.util.HashMap<java.lang.String,java.lang.Object>? clusterProperties;
    property public final Long? clusterRadius;
    property public final String? data;
    property public final Boolean? generateId;
    property public final Boolean? lineMetrics;
    property public final Long? maxzoom;
    property public final Long? prefetchZoomDelta;
    property public final com.mapbox.maps.extension.style.types.PromoteId? promoteId;
    property public final Double? tolerance;
    field public static final com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Companion Companion;
  }

  @com.mapbox.maps.extension.style.types.SourceDsl public static final class GeoJsonSource.Builder {
    ctor public GeoJsonSource.Builder(String sourceId);
    method public com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder attribution(String value);
    method public com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder buffer(long value = 128L);
    method public com.mapbox.maps.extension.style.sources.generated.GeoJsonSource build();
    method public com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder cluster(boolean value = false);
    method public com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder clusterMaxZoom(long value);
    method public com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder clusterProperties(java.util.HashMap<java.lang.String,java.lang.Object> value);
    method public com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder clusterProperty(String propertyName, com.mapbox.maps.extension.style.expressions.generated.Expression operatorExpr, com.mapbox.maps.extension.style.expressions.generated.Expression mapExpr);
    method public com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder clusterProperty(String propertyName, com.mapbox.maps.extension.style.expressions.generated.Expression mapExpr);
    method public com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder clusterRadius(long value = 50L);
    method public com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder data(String value);
    method public com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder feature(com.mapbox.geojson.Feature value);
    method public com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder featureCollection(com.mapbox.geojson.FeatureCollection value);
    method public com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder generateId(boolean value = false);
    method public com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder geometry(com.mapbox.geojson.Geometry value);
    method public String getSourceId();
    method public com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder lineMetrics(boolean value = false);
    method public com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder maxzoom(long value = 18L);
    method public com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder prefetchZoomDelta(long value = 4L);
    method public com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder promoteId(com.mapbox.maps.extension.style.types.PromoteId value);
    method public com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder tolerance(double value = 0.375);
    method public com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder url(String value);
    property public final String sourceId;
  }

  public static final class GeoJsonSource.Companion {
    method public Long? getDefaultBuffer();
    method public Boolean? getDefaultCluster();
    method public Long? getDefaultClusterMaxZoom();
    method public Long? getDefaultClusterRadius();
    method public Boolean? getDefaultGenerateId();
    method public Boolean? getDefaultLineMetrics();
    method public Long? getDefaultMaxzoom();
    method public Long? getDefaultPrefetchZoomDelta();
    method public Double? getDefaultTolerance();
    property public final Long? defaultBuffer;
    property public final Boolean? defaultCluster;
    property public final Long? defaultClusterMaxZoom;
    property public final Long? defaultClusterRadius;
    property public final Boolean? defaultGenerateId;
    property public final Boolean? defaultLineMetrics;
    property public final Long? defaultMaxzoom;
    property public final Long? defaultPrefetchZoomDelta;
    property public final Double? defaultTolerance;
  }

  public final class GeoJsonSourceKt {
    method public static com.mapbox.maps.extension.style.sources.generated.GeoJsonSource geoJsonSource(String id);
    method public static com.mapbox.maps.extension.style.sources.generated.GeoJsonSource geoJsonSource(String id, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.sources.generated.GeoJsonSource.Builder,kotlin.Unit> block);
  }

  public final class ImageSource extends com.mapbox.maps.extension.style.sources.Source {
    ctor public ImageSource(com.mapbox.maps.extension.style.sources.generated.ImageSource.Builder builder);
    method public com.mapbox.maps.extension.style.sources.generated.ImageSource coordinates(java.util.List<? extends java.util.List<java.lang.Double>> value);
    method public java.util.List<java.util.List<java.lang.Double>>? getCoordinates();
    method public Long? getPrefetchZoomDelta();
    method public String getType$metalava_module();
    method public String? getUrl();
    method public com.mapbox.maps.extension.style.sources.generated.ImageSource prefetchZoomDelta(long value = 4L);
    method public com.mapbox.maps.extension.style.sources.generated.ImageSource url(String value);
    property public final java.util.List<java.util.List<java.lang.Double>>? coordinates;
    property public final Long? prefetchZoomDelta;
    property public final String? url;
    field public static final com.mapbox.maps.extension.style.sources.generated.ImageSource.Companion Companion;
  }

  @com.mapbox.maps.extension.style.types.SourceDsl public static final class ImageSource.Builder {
    ctor public ImageSource.Builder(String sourceId);
    method public com.mapbox.maps.extension.style.sources.generated.ImageSource build();
    method public com.mapbox.maps.extension.style.sources.generated.ImageSource.Builder coordinates(java.util.List<? extends java.util.List<java.lang.Double>> value);
    method public String getSourceId();
    method public com.mapbox.maps.extension.style.sources.generated.ImageSource.Builder prefetchZoomDelta(long value = 4L);
    method public com.mapbox.maps.extension.style.sources.generated.ImageSource.Builder url(String value);
    property public final String sourceId;
  }

  public static final class ImageSource.Companion {
    method public Long? getDefaultPrefetchZoomDelta();
    property public final Long? defaultPrefetchZoomDelta;
  }

  public final class ImageSourceKt {
    method public static com.mapbox.maps.extension.style.sources.generated.ImageSource imageSource(String id, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.sources.generated.ImageSource.Builder,kotlin.Unit> block);
  }

  public final class RasterDemSource extends com.mapbox.maps.extension.style.sources.Source {
    ctor public RasterDemSource(com.mapbox.maps.extension.style.sources.generated.RasterDemSource.Builder builder);
    method public String? getAttribution();
    method public java.util.List<java.lang.Double>? getBounds();
    method public com.mapbox.maps.extension.style.sources.generated.Encoding? getEncoding();
    method public Long? getMaxOverscaleFactorForParentTiles();
    method public Long? getMaxzoom();
    method public Double? getMinimumTileUpdateInterval();
    method public Long? getMinzoom();
    method public Long? getPrefetchZoomDelta();
    method public Double? getTileNetworkRequestsDelay();
    method public Double? getTileRequestsDelay();
    method public Long? getTileSize();
    method public java.util.List<java.lang.String>? getTiles();
    method public String getType$metalava_module();
    method public String? getUrl();
    method public Boolean? getVolatile();
    method public com.mapbox.maps.extension.style.sources.generated.RasterDemSource maxOverscaleFactorForParentTiles(long value);
    method public com.mapbox.maps.extension.style.sources.generated.RasterDemSource maxzoom(long value = 22L);
    method public com.mapbox.maps.extension.style.sources.generated.RasterDemSource minimumTileUpdateInterval(double value = 0.0);
    method public com.mapbox.maps.extension.style.sources.generated.RasterDemSource minzoom(long value = 0L);
    method public com.mapbox.maps.extension.style.sources.generated.RasterDemSource prefetchZoomDelta(long value = 4L);
    method public com.mapbox.maps.extension.style.sources.generated.RasterDemSource tileNetworkRequestsDelay(double value = 0.0);
    method public com.mapbox.maps.extension.style.sources.generated.RasterDemSource tileRequestsDelay(double value = 0.0);
    method public com.mapbox.maps.extension.style.sources.generated.RasterDemSource tiles(java.util.List<java.lang.String> value);
    method public com.mapbox.maps.extension.style.sources.generated.RasterDemSource url(String value);
    method public com.mapbox.maps.extension.style.sources.generated.RasterDemSource volatile(boolean value = false);
    property public final String? attribution;
    property public final java.util.List<java.lang.Double>? bounds;
    property public final com.mapbox.maps.extension.style.sources.generated.Encoding? encoding;
    property public final Long? maxOverscaleFactorForParentTiles;
    property public final Long? maxzoom;
    property public final Double? minimumTileUpdateInterval;
    property public final Long? minzoom;
    property public final Long? prefetchZoomDelta;
    property public final Double? tileNetworkRequestsDelay;
    property public final Double? tileRequestsDelay;
    property public final Long? tileSize;
    property public final java.util.List<java.lang.String>? tiles;
    property public final String? url;
    property public final Boolean? volatile;
    field public static final com.mapbox.maps.extension.style.sources.generated.RasterDemSource.Companion Companion;
  }

  @com.mapbox.maps.extension.style.types.SourceDsl public static final class RasterDemSource.Builder {
    ctor public RasterDemSource.Builder(String sourceId);
    method public com.mapbox.maps.extension.style.sources.generated.RasterDemSource.Builder attribution(String value);
    method public com.mapbox.maps.extension.style.sources.generated.RasterDemSource.Builder bounds(java.util.List<java.lang.Double> value = listOf(-180.0, -85.051129, 180.0, 85.051129));
    method public com.mapbox.maps.extension.style.sources.generated.RasterDemSource build();
    method public com.mapbox.maps.extension.style.sources.generated.RasterDemSource.Builder encoding(com.mapbox.maps.extension.style.sources.generated.Encoding value = com.mapbox.maps.extension.style.sources.generated.Encoding.MAPBOX);
    method public String getSourceId();
    method public com.mapbox.maps.extension.style.sources.generated.RasterDemSource.Builder maxOverscaleFactorForParentTiles(long value);
    method public com.mapbox.maps.extension.style.sources.generated.RasterDemSource.Builder maxzoom(long value = 22L);
    method public com.mapbox.maps.extension.style.sources.generated.RasterDemSource.Builder minimumTileUpdateInterval(double value = 0.0);
    method public com.mapbox.maps.extension.style.sources.generated.RasterDemSource.Builder minzoom(long value = 0L);
    method public com.mapbox.maps.extension.style.sources.generated.RasterDemSource.Builder prefetchZoomDelta(long value = 4L);
    method public com.mapbox.maps.extension.style.sources.generated.RasterDemSource.Builder tileNetworkRequestsDelay(double value = 0.0);
    method public com.mapbox.maps.extension.style.sources.generated.RasterDemSource.Builder tileRequestsDelay(double value = 0.0);
    method public com.mapbox.maps.extension.style.sources.generated.RasterDemSource.Builder tileSet(com.mapbox.maps.extension.style.sources.TileSet tileSet);
    method public com.mapbox.maps.extension.style.sources.generated.RasterDemSource.Builder tileSet(String tilejson, java.util.List<java.lang.String> tiles, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.sources.TileSet.RasterDemBuilder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.sources.generated.RasterDemSource.Builder tileSize(long value = 512L);
    method public com.mapbox.maps.extension.style.sources.generated.RasterDemSource.Builder tiles(java.util.List<java.lang.String> value);
    method public com.mapbox.maps.extension.style.sources.generated.RasterDemSource.Builder url(String value);
    method public com.mapbox.maps.extension.style.sources.generated.RasterDemSource.Builder volatile(boolean value = false);
    property public final String sourceId;
  }

  public static final class RasterDemSource.Companion {
    method public com.mapbox.maps.extension.style.sources.generated.Encoding? getDefaultEncoding();
    method public Long? getDefaultMaxzoom();
    method public Double? getDefaultMinimumTileUpdateInterval();
    method public Long? getDefaultMinzoom();
    method public Long? getDefaultPrefetchZoomDelta();
    method public Double? getDefaultTileNetworkRequestsDelay();
    method public Double? getDefaultTileRequestsDelay();
    method public Boolean? getDefaultVolatile();
    property public final com.mapbox.maps.extension.style.sources.generated.Encoding? defaultEncoding;
    property public final Long? defaultMaxzoom;
    property public final Double? defaultMinimumTileUpdateInterval;
    property public final Long? defaultMinzoom;
    property public final Long? defaultPrefetchZoomDelta;
    property public final Double? defaultTileNetworkRequestsDelay;
    property public final Double? defaultTileRequestsDelay;
    property public final Boolean? defaultVolatile;
  }

  public final class RasterDemSourceKt {
    method public static com.mapbox.maps.extension.style.sources.generated.RasterDemSource rasterDemSource(String id, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.sources.generated.RasterDemSource.Builder,kotlin.Unit> block);
  }

  public final class RasterSource extends com.mapbox.maps.extension.style.sources.Source {
    ctor public RasterSource(com.mapbox.maps.extension.style.sources.generated.RasterSource.Builder builder);
    method public String? getAttribution();
    method public java.util.List<java.lang.Double>? getBounds();
    method public Long? getMaxOverscaleFactorForParentTiles();
    method public Long? getMaxzoom();
    method public Double? getMinimumTileUpdateInterval();
    method public Long? getMinzoom();
    method public Long? getPrefetchZoomDelta();
    method public com.mapbox.maps.extension.style.sources.generated.Scheme? getScheme();
    method public Double? getTileNetworkRequestsDelay();
    method public Double? getTileRequestsDelay();
    method public Long? getTileSize();
    method public java.util.List<java.lang.String>? getTiles();
    method public String getType$metalava_module();
    method public String? getUrl();
    method public Boolean? getVolatile();
    method public com.mapbox.maps.extension.style.sources.generated.RasterSource maxOverscaleFactorForParentTiles(long value);
    method public com.mapbox.maps.extension.style.sources.generated.RasterSource maxzoom(long value = 22L);
    method public com.mapbox.maps.extension.style.sources.generated.RasterSource minimumTileUpdateInterval(double value = 0.0);
    method public com.mapbox.maps.extension.style.sources.generated.RasterSource minzoom(long value = 0L);
    method public com.mapbox.maps.extension.style.sources.generated.RasterSource prefetchZoomDelta(long value = 4L);
    method public com.mapbox.maps.extension.style.sources.generated.RasterSource tileNetworkRequestsDelay(double value = 0.0);
    method public com.mapbox.maps.extension.style.sources.generated.RasterSource tileRequestsDelay(double value = 0.0);
    method public com.mapbox.maps.extension.style.sources.generated.RasterSource tiles(java.util.List<java.lang.String> value);
    method public com.mapbox.maps.extension.style.sources.generated.RasterSource url(String value);
    method public com.mapbox.maps.extension.style.sources.generated.RasterSource volatile(boolean value = false);
    property public final String? attribution;
    property public final java.util.List<java.lang.Double>? bounds;
    property public final Long? maxOverscaleFactorForParentTiles;
    property public final Long? maxzoom;
    property public final Double? minimumTileUpdateInterval;
    property public final Long? minzoom;
    property public final Long? prefetchZoomDelta;
    property public final com.mapbox.maps.extension.style.sources.generated.Scheme? scheme;
    property public final Double? tileNetworkRequestsDelay;
    property public final Double? tileRequestsDelay;
    property public final Long? tileSize;
    property public final java.util.List<java.lang.String>? tiles;
    property public final String? url;
    property public final Boolean? volatile;
    field public static final com.mapbox.maps.extension.style.sources.generated.RasterSource.Companion Companion;
  }

  @com.mapbox.maps.extension.style.types.SourceDsl public static final class RasterSource.Builder {
    ctor public RasterSource.Builder(String sourceId);
    method public com.mapbox.maps.extension.style.sources.generated.RasterSource.Builder attribution(String value);
    method public com.mapbox.maps.extension.style.sources.generated.RasterSource.Builder bounds(java.util.List<java.lang.Double> value = listOf(-180.0, -85.051129, 180.0, 85.051129));
    method public com.mapbox.maps.extension.style.sources.generated.RasterSource build();
    method public String getSourceId();
    method public com.mapbox.maps.extension.style.sources.generated.RasterSource.Builder maxOverscaleFactorForParentTiles(long value);
    method public com.mapbox.maps.extension.style.sources.generated.RasterSource.Builder maxzoom(long value = 22L);
    method public com.mapbox.maps.extension.style.sources.generated.RasterSource.Builder minimumTileUpdateInterval(double value = 0.0);
    method public com.mapbox.maps.extension.style.sources.generated.RasterSource.Builder minzoom(long value = 0L);
    method public com.mapbox.maps.extension.style.sources.generated.RasterSource.Builder prefetchZoomDelta(long value = 4L);
    method public com.mapbox.maps.extension.style.sources.generated.RasterSource.Builder scheme(com.mapbox.maps.extension.style.sources.generated.Scheme value = com.mapbox.maps.extension.style.sources.generated.Scheme.XYZ);
    method public com.mapbox.maps.extension.style.sources.generated.RasterSource.Builder tileNetworkRequestsDelay(double value = 0.0);
    method public com.mapbox.maps.extension.style.sources.generated.RasterSource.Builder tileRequestsDelay(double value = 0.0);
    method public com.mapbox.maps.extension.style.sources.generated.RasterSource.Builder tileSet(com.mapbox.maps.extension.style.sources.TileSet tileSet);
    method public com.mapbox.maps.extension.style.sources.generated.RasterSource.Builder tileSet(String tilejson, java.util.List<java.lang.String> tiles, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.sources.TileSet.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.sources.generated.RasterSource.Builder tileSize(long value = 512L);
    method public com.mapbox.maps.extension.style.sources.generated.RasterSource.Builder tiles(java.util.List<java.lang.String> value);
    method public com.mapbox.maps.extension.style.sources.generated.RasterSource.Builder url(String value);
    method public com.mapbox.maps.extension.style.sources.generated.RasterSource.Builder volatile(boolean value = false);
    property public final String sourceId;
  }

  public static final class RasterSource.Companion {
    method public Long? getDefaultMaxzoom();
    method public Double? getDefaultMinimumTileUpdateInterval();
    method public Long? getDefaultMinzoom();
    method public Long? getDefaultPrefetchZoomDelta();
    method public com.mapbox.maps.extension.style.sources.generated.Scheme? getDefaultScheme();
    method public Double? getDefaultTileNetworkRequestsDelay();
    method public Double? getDefaultTileRequestsDelay();
    method public Boolean? getDefaultVolatile();
    property public final Long? defaultMaxzoom;
    property public final Double? defaultMinimumTileUpdateInterval;
    property public final Long? defaultMinzoom;
    property public final Long? defaultPrefetchZoomDelta;
    property public final com.mapbox.maps.extension.style.sources.generated.Scheme? defaultScheme;
    property public final Double? defaultTileNetworkRequestsDelay;
    property public final Double? defaultTileRequestsDelay;
    property public final Boolean? defaultVolatile;
  }

  public final class RasterSourceKt {
    method public static com.mapbox.maps.extension.style.sources.generated.RasterSource rasterSource(String id, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.sources.generated.RasterSource.Builder,kotlin.Unit> block);
  }

  public enum Scheme {
    method public final String! getValue();
    property public final String! value;
    enum_constant public static final com.mapbox.maps.extension.style.sources.generated.Scheme TMS;
    enum_constant public static final com.mapbox.maps.extension.style.sources.generated.Scheme XYZ;
  }

  public final class VectorSource extends com.mapbox.maps.extension.style.sources.Source {
    ctor public VectorSource(com.mapbox.maps.extension.style.sources.generated.VectorSource.Builder builder);
    method public String? getAttribution();
    method public java.util.List<java.lang.Double>? getBounds();
    method public Long? getMaxOverscaleFactorForParentTiles();
    method public Long? getMaxzoom();
    method public Double? getMinimumTileUpdateInterval();
    method public Long? getMinzoom();
    method public Long? getPrefetchZoomDelta();
    method public com.mapbox.maps.extension.style.types.PromoteId? getPromoteId();
    method public com.mapbox.maps.extension.style.sources.generated.Scheme? getScheme();
    method public Double? getTileNetworkRequestsDelay();
    method public Double? getTileRequestsDelay();
    method public java.util.List<java.lang.String>? getTiles();
    method public String getType$metalava_module();
    method public String? getUrl();
    method public Boolean? getVolatile();
    method public com.mapbox.maps.extension.style.sources.generated.VectorSource maxOverscaleFactorForParentTiles(long value);
    method public com.mapbox.maps.extension.style.sources.generated.VectorSource maxzoom(long value = 22L);
    method public com.mapbox.maps.extension.style.sources.generated.VectorSource minimumTileUpdateInterval(double value = 0.0);
    method public com.mapbox.maps.extension.style.sources.generated.VectorSource minzoom(long value = 0L);
    method public com.mapbox.maps.extension.style.sources.generated.VectorSource prefetchZoomDelta(long value = 4L);
    method public com.mapbox.maps.extension.style.sources.generated.VectorSource tileNetworkRequestsDelay(double value = 0.0);
    method public com.mapbox.maps.extension.style.sources.generated.VectorSource tileRequestsDelay(double value = 0.0);
    method public com.mapbox.maps.extension.style.sources.generated.VectorSource tiles(java.util.List<java.lang.String> value);
    method public com.mapbox.maps.extension.style.sources.generated.VectorSource url(String value);
    method public com.mapbox.maps.extension.style.sources.generated.VectorSource volatile(boolean value = false);
    property public final String? attribution;
    property public final java.util.List<java.lang.Double>? bounds;
    property public final Long? maxOverscaleFactorForParentTiles;
    property public final Long? maxzoom;
    property public final Double? minimumTileUpdateInterval;
    property public final Long? minzoom;
    property public final Long? prefetchZoomDelta;
    property public final com.mapbox.maps.extension.style.types.PromoteId? promoteId;
    property public final com.mapbox.maps.extension.style.sources.generated.Scheme? scheme;
    property public final Double? tileNetworkRequestsDelay;
    property public final Double? tileRequestsDelay;
    property public final java.util.List<java.lang.String>? tiles;
    property public final String? url;
    property public final Boolean? volatile;
    field public static final com.mapbox.maps.extension.style.sources.generated.VectorSource.Companion Companion;
  }

  @com.mapbox.maps.extension.style.types.SourceDsl public static final class VectorSource.Builder {
    ctor public VectorSource.Builder(String sourceId);
    method public com.mapbox.maps.extension.style.sources.generated.VectorSource.Builder attribution(String value);
    method public com.mapbox.maps.extension.style.sources.generated.VectorSource.Builder bounds(java.util.List<java.lang.Double> value = listOf(-180.0, -85.051129, 180.0, 85.051129));
    method public com.mapbox.maps.extension.style.sources.generated.VectorSource build();
    method public String getSourceId();
    method public com.mapbox.maps.extension.style.sources.generated.VectorSource.Builder maxOverscaleFactorForParentTiles(long value);
    method public com.mapbox.maps.extension.style.sources.generated.VectorSource.Builder maxzoom(long value = 22L);
    method public com.mapbox.maps.extension.style.sources.generated.VectorSource.Builder minimumTileUpdateInterval(double value = 0.0);
    method public com.mapbox.maps.extension.style.sources.generated.VectorSource.Builder minzoom(long value = 0L);
    method public com.mapbox.maps.extension.style.sources.generated.VectorSource.Builder prefetchZoomDelta(long value = 4L);
    method public com.mapbox.maps.extension.style.sources.generated.VectorSource.Builder promoteId(com.mapbox.maps.extension.style.types.PromoteId value);
    method public com.mapbox.maps.extension.style.sources.generated.VectorSource.Builder scheme(com.mapbox.maps.extension.style.sources.generated.Scheme value = com.mapbox.maps.extension.style.sources.generated.Scheme.XYZ);
    method public com.mapbox.maps.extension.style.sources.generated.VectorSource.Builder tileNetworkRequestsDelay(double value = 0.0);
    method public com.mapbox.maps.extension.style.sources.generated.VectorSource.Builder tileRequestsDelay(double value = 0.0);
    method public com.mapbox.maps.extension.style.sources.generated.VectorSource.Builder tileSet(com.mapbox.maps.extension.style.sources.TileSet tileSet);
    method public com.mapbox.maps.extension.style.sources.generated.VectorSource.Builder tileSet(String tilejson, java.util.List<java.lang.String> tiles, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.sources.TileSet.Builder,kotlin.Unit> block);
    method public com.mapbox.maps.extension.style.sources.generated.VectorSource.Builder tiles(java.util.List<java.lang.String> value);
    method public com.mapbox.maps.extension.style.sources.generated.VectorSource.Builder url(String value);
    method public com.mapbox.maps.extension.style.sources.generated.VectorSource.Builder volatile(boolean value = false);
    property public final String sourceId;
  }

  public static final class VectorSource.Companion {
    method public Long? getDefaultMaxzoom();
    method public Double? getDefaultMinimumTileUpdateInterval();
    method public Long? getDefaultMinzoom();
    method public Long? getDefaultPrefetchZoomDelta();
    method public com.mapbox.maps.extension.style.sources.generated.Scheme? getDefaultScheme();
    method public Double? getDefaultTileNetworkRequestsDelay();
    method public Double? getDefaultTileRequestsDelay();
    method public Boolean? getDefaultVolatile();
    property public final Long? defaultMaxzoom;
    property public final Double? defaultMinimumTileUpdateInterval;
    property public final Long? defaultMinzoom;
    property public final Long? defaultPrefetchZoomDelta;
    property public final com.mapbox.maps.extension.style.sources.generated.Scheme? defaultScheme;
    property public final Double? defaultTileNetworkRequestsDelay;
    property public final Double? defaultTileRequestsDelay;
    property public final Boolean? defaultVolatile;
  }

  public final class VectorSourceKt {
    method public static com.mapbox.maps.extension.style.sources.generated.VectorSource vectorSource(String id, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.sources.generated.VectorSource.Builder,kotlin.Unit> block);
  }

}

package com.mapbox.maps.extension.style.terrain.generated {

  @UiThread public final class Terrain implements com.mapbox.maps.extension.style.StyleContract.StyleTerrainExtension com.mapbox.maps.extension.style.terrain.generated.TerrainDslReceiver {
    ctor public Terrain(String sourceId);
    method public void bindTo(com.mapbox.maps.extension.style.StyleInterface delegate);
    method public com.mapbox.maps.extension.style.terrain.generated.Terrain exaggeration(double exaggeration);
    method public com.mapbox.maps.extension.style.terrain.generated.Terrain exaggeration(com.mapbox.maps.extension.style.expressions.generated.Expression exaggeration);
    method public Double? getExaggeration();
    method public com.mapbox.maps.extension.style.expressions.generated.Expression? getExaggerationAsExpression();
    property public final Double? exaggeration;
    property public final com.mapbox.maps.extension.style.expressions.generated.Expression? exaggerationAsExpression;
    field public static final com.mapbox.maps.extension.style.terrain.generated.Terrain.Companion Companion;
  }

  public static final class Terrain.Companion {
  }

  @com.mapbox.maps.extension.style.types.TerrainDsl public interface TerrainDslReceiver {
    method public com.mapbox.maps.extension.style.terrain.generated.Terrain exaggeration(double exaggeration = 1.0);
    method public com.mapbox.maps.extension.style.terrain.generated.Terrain exaggeration(com.mapbox.maps.extension.style.expressions.generated.Expression exaggeration);
  }

  public final class TerrainKt {
    method public static com.mapbox.maps.extension.style.terrain.generated.Terrain terrain(String sourceId, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.terrain.generated.TerrainDslReceiver,kotlin.Unit>? block = null);
    method public static com.mapbox.maps.extension.style.terrain.generated.Terrain terrain(String sourceId);
  }

  public final class TerrainUtils {
    method public static com.mapbox.maps.extension.style.terrain.generated.Terrain getTerrain(com.mapbox.maps.extension.style.StyleInterface, String sourceId);
    method public static void removeTerrain(com.mapbox.maps.extension.style.StyleInterface);
    method public static void setTerrain(com.mapbox.maps.extension.style.StyleInterface, com.mapbox.maps.extension.style.StyleContract.StyleTerrainExtension terrain);
  }

}

package com.mapbox.maps.extension.style.types {

  @kotlin.DslMarker public @interface ExpressionDsl {
  }

  @com.mapbox.maps.extension.style.types.LayersDsl public final class Formatted extends java.util.ArrayList<com.mapbox.maps.extension.style.types.FormattedSection> {
    ctor public Formatted();
    method public void formattedSection(String text, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.FormattedSection,kotlin.Unit> block);
    method public void formattedSection(com.mapbox.maps.extension.style.types.FormattedSection section);
    method public String getTextAsString();
    method public com.mapbox.bindgen.Value toValue();
    field public static final com.mapbox.maps.extension.style.types.Formatted.Companion Companion;
  }

  public static final class Formatted.Companion {
    method public com.mapbox.maps.extension.style.types.Formatted fromExpression(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.maps.extension.style.types.Formatted fromProperty(java.util.ArrayList<?> list);
  }

  public final class FormattedKt {
    method public static com.mapbox.maps.extension.style.types.Formatted formatted(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.Formatted,kotlin.Unit> block);
  }

  @Keep @com.mapbox.maps.extension.style.types.LayersDsl public final class FormattedSection {
    ctor public FormattedSection(String text, Double? fontScale = null, java.util.List<java.lang.String>? fontStack = null, String? textColor = null);
    ctor public FormattedSection(String text, Double? fontScale = null, java.util.List<java.lang.String>? fontStack = null);
    ctor public FormattedSection(String text, Double? fontScale = null);
    ctor public FormattedSection(String text);
    method public String component1();
    method public Double? component2();
    method public java.util.List<java.lang.String>? component3();
    method public String? component4();
    method public com.mapbox.maps.extension.style.types.FormattedSection copy(String text, Double? fontScale, java.util.List<java.lang.String>? fontStack, String? textColor);
    method public Double? getFontScale();
    method public java.util.List<java.lang.String>? getFontStack();
    method public String getText();
    method public String? getTextColor();
    method @ColorInt public int getTextColorAsInt();
    method public void setFontScale(Double? fontScale);
    method public void setFontStack(java.util.List<java.lang.String>? fontStack);
    method public void setTextColor(String? textColor);
    method public void setTextColorAsInt(@ColorInt int value);
    property public final Double? fontScale;
    property public final java.util.List<java.lang.String>? fontStack;
    property public final String text;
    property public final String? textColor;
    property @ColorInt public final int textColorAsInt;
  }

  @kotlin.DslMarker public @interface LayersDsl {
  }

  @kotlin.DslMarker public @interface LightDsl {
  }

  @Keep public final class PromoteId {
    ctor public PromoteId(String propertyName, String? sourceId = null);
    ctor public PromoteId(String propertyName);
    method public String component1();
    method public String? component2();
    method public com.mapbox.maps.extension.style.types.PromoteId copy(String propertyName, String? sourceId);
    method public String getPropertyName();
    method public String? getSourceId();
    property public final String propertyName;
    property public final String? sourceId;
    field public static final com.mapbox.maps.extension.style.types.PromoteId.Companion Companion;
  }

  public static final class PromoteId.Companion {
  }

  @kotlin.DslMarker public @interface SourceDsl {
  }

  @com.mapbox.maps.extension.style.types.LayersDsl public final class StyleTransition {
    method public Long? getDelay();
    method public Long? getDuration();
    method public com.mapbox.bindgen.Value toValue();
    property public final Long? delay;
    property public final Long? duration;
  }

  @com.mapbox.maps.extension.style.types.LayersDsl public static final class StyleTransition.Builder {
    ctor public StyleTransition.Builder();
    method public com.mapbox.maps.extension.style.types.StyleTransition build();
    method public com.mapbox.maps.extension.style.types.StyleTransition.Builder delay(long delay);
    method public com.mapbox.maps.extension.style.types.StyleTransition.Builder duration(long duration);
    method public Long? getDelay();
    method public Long? getDuration();
    property public final Long? delay;
    property public final Long? duration;
  }

  public final class StyleTransitionKt {
    method public static com.mapbox.maps.extension.style.types.StyleTransition transitionOptions(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.style.types.StyleTransition.Builder,kotlin.Unit> block);
  }

  @kotlin.DslMarker public @interface TerrainDsl {
  }

}

package com.mapbox.maps.extension.style.utils {

  public final class ColorUtils {
    method public com.mapbox.maps.extension.style.expressions.generated.Expression colorIntToRgbaExpression(@ColorInt int color);
    method public float[] colorToGlRgbaArray(@ColorInt int color);
    method public float[] colorToRgbaArray(@ColorInt int color);
    method public String colorToRgbaString(@ColorInt int color);
    method @ColorInt public Integer? rgbaExpressionToColorInt(com.mapbox.maps.extension.style.expressions.generated.Expression value);
    method public String? rgbaExpressionToColorString(com.mapbox.maps.extension.style.expressions.generated.Expression value);
    method @ColorInt public Integer? rgbaToColor(String value);
    field public static final com.mapbox.maps.extension.style.utils.ColorUtils INSTANCE;
  }

  public final class ExpectedUtilsKt {
  }

  public final class TypeUtilsKt {
    method public static inline <reified T> T! silentUnwrap(com.mapbox.maps.StylePropertyValue);
    method public static com.mapbox.bindgen.Value toValue(com.mapbox.geojson.Feature);
    method public static com.mapbox.bindgen.Value toValue(com.mapbox.geojson.FeatureCollection);
    method public static com.mapbox.bindgen.Value toValue(com.mapbox.geojson.Geometry);
    method public static inline <reified T> T! unwrap(com.mapbox.maps.StylePropertyValue);
    method public static Object unwrapToAny(com.mapbox.bindgen.Value);
    method public static com.mapbox.maps.extension.style.expressions.generated.Expression unwrapToExpression(com.mapbox.bindgen.Value);
    method public static com.mapbox.maps.extension.style.types.StyleTransition unwrapToStyleTransition(com.mapbox.bindgen.Value);
    method public static inline <reified T> T! unwrapToTyped(com.mapbox.bindgen.Value);
  }

}

