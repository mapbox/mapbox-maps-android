version: 2.1
parameters:
  mapbox_upstream:
    type: boolean
    default: false
  mapbox_slug:
    type: string
    default: "owner/repo"
  mapbox_hash:
    type: string
    default: "000000"

workflows:
  version: 2
  build:
    when:
      not: << pipeline.parameters.mapbox_upstream >>
    jobs:
      - verify-code:
          filters:
            tags:
              only: /android-v.*/
      - verify-docs:
          requires:
            - verify-code
      - verify-api:
          requires:
            - verify-code
      - verify-internal:
            requires:
              - verify-code
      - run-lint:
          requires:
            - verify-code
      - run-unit-test
      - run-robo-test:
          requires:
            - verify-code
      - run-app-test:
          requires:
            - verify-code
      - run-sdk-test:
          requires:
            - verify-code
      - start-run-style-test:
          type: approval
      - run-style-test:
          requires:
            - start-run-style-test
      - build-sdk-from-source:
          requires:
            - verify-code
      - build-android-auto-app:
          requires:
            - verify-code
      - build-sdk-release:
          requires:
            - verify-code
          filters:
            tags:
              only: /android-v.*/

  validation:
    when: << pipeline.parameters.mapbox_upstream >>
    jobs:
      - run-sdk-test

commands:
  restore-gradle-cache:
    steps:
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle.kts" }}-{{ checksum "app/build.gradle.kts" }}-{{ checksum "sdk/build.gradle.kts" }}-{{ checksum "buildSrc/src/main/kotlin/Project.kt" }}
            - v1-dependencies-
      - run:
          name: Download dependencies
          command: ./gradlew dependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle.kts" }}-{{ checksum "app/build.gradle.kts" }}-{{ checksum "sdk/build.gradle.kts" }}-{{ checksum "buildSrc/src/main/kotlin/Project.kt" }}

  jvm-unit-tests:
    steps:
      - run:
          name: Run JVM unit tests & create jacoco code coverage report
          no_output_timeout: 30m
          command: ./gradlew jacocoTestDebugUnitTestReport
#      - run:
#          name: Upload codecov
#          command: bash <(curl -sSfL https://codecov.io/bash)

  store-results:
    steps:
      - store_artifacts:
          path: sdk/build
      - store_artifacts:
          path: LICENSE.md

  build-instrumentation-test:
    parameters:
      module_target:
        description: module target
        type: string
    steps:
      - run:
          name: Initialize developer access token for sdk tests
          command: |
            if [ -n "${MAPBOX_DEVELOPER_CONFIG_XML}" ]; then
              echo "${MAPBOX_DEVELOPER_CONFIG_XML}" > sdk/src/androidTest/res/values/developer-config.xml
            fi
      - run:
          name: Build instrumentation test apk
          no_output_timeout: 30m
          command: ./gradlew << parameters.module_target >>:assembleAndroidTest

  build-module:
    parameters:
      module_target:
        description: module target
        type: string
      variant:
        description: debug or release
        type: string
    steps:
      - run:
          name: Initialize developer access token for app tests
          command: |
            if [ -n "${MAPBOX_DEVELOPER_CONFIG_XML}" ]; then
              echo "${MAPBOX_DEVELOPER_CONFIG_XML}" > app/src/main/res/values/developer-config.xml
              echo "${MAPBOX_DEVELOPER_CONFIG_XML}" > extension-style-app/src/main/res/values/developer-config.xml
              echo "${MAPBOX_DEVELOPER_CONFIG_XML}" > android-auto-app/src/main/res/values/developer-config.xml
            fi
      - run:
          name: Build << parameters.module_target >> apk in << parameters.variant >> mode
          command: ./gradlew << parameters.module_target >>:assemble<< parameters.variant >>

  update-version-name:
    steps:
      - run:
          name: Update version name
          command: |
            if [[ $CIRCLE_TAG == android-v* ]]; then
              sed -i -e "s/^VERSION_NAME=.*/VERSION_NAME=${CIRCLE_TAG:9}/" gradle.properties
            elif [[ $CIRCLE_BRANCH == main ]]; then
              COMMIT_SHA=$(git rev-parse --short HEAD)
              sed -i -e "s/-SNAPSHOT.*/-${COMMIT_SHA}-SNAPSHOT/" gradle.properties
            fi

  generate-docs:
    steps:
      - run:
          name: Generate docs and create PR for review
          command: |
            if [[ $CIRCLE_TAG == android-v* ]]; then
              echo "$GH_LOGIN_TOKEN" > gh_token.txt
              git config --global user.email no-reply@mapbox.com && git config --global user.name mapbox-ci
              ./scripts/update-android-docs.sh -s $CIRCLE_TAG
            fi
  track-metrics:
    steps:
      - unless:
          condition: << pipeline.parameters.mapbox_upstream >>
          steps:
            - run:
                name: Track performance of the sdk
                command: |
                  if [ -n "${MOBILE_METRICS_TOKEN}" ]; then
                    pip3 install requests
                    if [[ $CIRCLE_BRANCH == main ]]; then
                      python3 scripts/mobile-metrics-start-pipeline.py --token ${MOBILE_METRICS_TOKEN} --target-slug mapbox/mobile-metrics --branch master
                    else
                      python3 scripts/mobile-metrics-start-pipeline.py --token ${MOBILE_METRICS_TOKEN} --target-slug mapbox/mobile-metrics --mapbox_upstream True
                    fi
                  fi

  validate-internal-ci:
    steps:
      - run:
          name: Trigger generated code validation
          command: |
            python3 scripts/ci-circleci-start-pipeline.py --token ${MOBILE_METRICS_TOKEN} --origin-slug mapbox/mapbox-maps-android --target-slug mapbox/mapbox-maps-android-internal

  init-aws:
    steps:
      - run:
          name: Init aws with mbx-ci
          command: |
            curl -Ls https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/latest/mbx-ci-linux-amd64 > mbx-ci && chmod 755 ./mbx-ci
            ./mbx-ci aws setup

  publish-sdk-registry:
    steps:
      - unless:
          condition: << pipeline.parameters.mapbox_upstream >>
          steps:
            - run:
                name: Publish the SDK
                command: |
                  if [[ $CIRCLE_TAG == android-v* ||  $CIRCLE_BRANCH == main ]]; then
                    make sdkRegistryUpload
                  fi

  publish-sdk-registry-named-snapshot:
    steps:
      - unless:
          condition: << pipeline.parameters.mapbox_upstream >>
          steps:
            - run:
                name: Publish the SDK snapshot based on the keyword in commit message
                command: |
                  COMMIT_SHA=$(git rev-parse --short HEAD)
                  LAST_RELEASE=$(git describe --tags --abbrev=0)
                  if [[ -n ${CIRCLE_BRANCH+x} ]] && [[ $CIRCLE_BRANCH != "main" ]] && [[ "$(git log -1)" = *"publish_android_snapshot"* ]]; then
                    sed -i -e "s/^VERSION_NAME=.*/VERSION_NAME=${LAST_RELEASE:9}-${CIRCLE_BRANCH}-SNAPSHOT/" gradle.properties
                    make sdkRegistryUpload
                  fi

  login-google-cloud-platform:
    steps:
      - run:
          name: Log in to Google Cloud Platform
          command: |
            if [[ -n "${GCLOUD_SERVICE_ACCOUNT_JSON}" ]]; then
              echo "${GCLOUD_SERVICE_ACCOUNT_JSON}" > secret.json
              gcloud auth activate-service-account --key-file secret.json --project mapbox-maps-android
              rm secret.json
            fi

  generate-sanity-test:
    steps:
      - run:
          name: Generate sanity test
          command: |
            npm install
            make generate-sanity-test

  run-firebase-instrumentation:
    parameters:
      module_target:
        description: module target
        type: string
      app_target:
        description: app target
        type: string
        default: "app"
    steps:
      - run:
          name: Run instrumentation tests on Firebase
          no_output_timeout: 50m
          command: |
            if [[ -n "${GCLOUD_SERVICE_ACCOUNT_JSON}" ]]; then
              if [ << parameters.module_target >> == "extension-style-app" ]; then
                gcloud firebase test android run --type instrumentation \
                  --app << parameters.app_target >>/build/outputs/apk/debug/<< parameters.app_target >>-debug.apk \
                  --test << parameters.module_target >>/build/outputs/apk/androidTest/debug/<< parameters.module_target >>-debug-androidTest.apk \
                  --device model=AOP_sprout,version=28,locale=en,orientation=portrait \
                  --timeout 45m --use-orchestrator --num-flaky-test-attempts 3
              else
                gcloud firebase test android run --type instrumentation \
                --app << parameters.app_target >>/build/outputs/apk/debug/<< parameters.app_target >>-debug.apk \
                --test << parameters.module_target >>/build/outputs/apk/androidTest/debug/<< parameters.module_target >>-debug-androidTest.apk \
                --device model=harpia,version=23,locale=en,orientation=portrait \
                --device model=AOP_sprout,version=28,locale=en,orientation=portrait \
                --timeout 45m --use-orchestrator --num-flaky-test-attempts 3
              fi
            fi

  run-firebase-robo:
    steps:
      - run:
          name: Run instrumentation tests on Firebase
          no_output_timeout: 10m
          command: |
            if [[ -n "${GCLOUD_SERVICE_ACCOUNT_JSON}" ]]; then
              gcloud firebase test android run --type robo \
                --app app/build/outputs/apk/release/app-release.apk \
                --device model=AOP_sprout,version=28,locale=en,orientation=portrait \
                --device model=harpia,version=23,locale=en,orientation=portrait \
                --device model=Pixel2,version=30,locale=en,orientation=portrait \
                --device model=G8142,version=25,locale=en,orientation=portrait \
                --timeout 90s
            fi

  mapbox-gl-native-begin:
    steps:
      - when:
          condition: << pipeline.parameters.mapbox_upstream >>
          steps:
            - run:
               name: Install Python dependencies
               command: |
                 pip3 install requests
            - run:
               name: Report upstream pending
               command: |
                 scripts/ci-github-set-commit-status.py --pending --slug << pipeline.parameters.mapbox_slug >> --hash << pipeline.parameters.mapbox_hash >>

  mapbox-gl-native-end:
    steps:
      - when:
          condition: << pipeline.parameters.mapbox_upstream >>
          steps:
            - run:
               name: Report upstream success
               command: |
                 scripts/ci-github-set-commit-status.py --success --slug << pipeline.parameters.mapbox_slug >> --hash << pipeline.parameters.mapbox_hash >>
            - run:
               when: on_fail
               name: Report upstream failure
               command: |
                 scripts/ci-github-set-commit-status.py --slug << pipeline.parameters.mapbox_slug >> --hash << pipeline.parameters.mapbox_hash >>

jobs:
  verify-code:
    executor: ubuntu
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "3b:cd:47:bf:57:9c:e5:36:b0:4d:5f:12:5e:d3:b3:3e"
      - restore-gradle-cache
      - run:
          name: ktlint
          command: ./gradlew ktlint
      - run:
          name: license
          command: python scripts/license-validate.py
      - store-results

  verify-docs:
    executor: ubuntu
    steps:
      - checkout
      - restore-gradle-cache
      - run:
          no_output_timeout: 30m
          name: docs
          command: sh scripts/kdoc-validate.sh

  verify-api:
    executor: ubuntu
    steps:
      - checkout
      - restore-gradle-cache
      - init-aws
      - run:
          no_output_timeout: 30m
          name: verfiy-api
          command: |
            make build
            if [[ $CIRCLE_TAG == android-v* ]]; then
              ./scripts/java-api-check-all.sh "${CIRCLE_TAG}"
            else
              ./scripts/java-api-check-all.sh ""
            fi

  verify-internal:
    executor: ubuntu
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "3b:cd:47:bf:57:9c:e5:36:b0:4d:5f:12:5e:d3:b3:3e"
      - restore-gradle-cache
      - validate-internal-ci

  run-unit-test:
    executor:
      name: ubuntu
      machine: xlarge
    steps:
      - checkout
      - restore-gradle-cache
      - jvm-unit-tests

  run-lint:
    executor:
      name: ubuntu
      machine: xlarge
    steps:
      - checkout
      - restore-gradle-cache
      - run:
          name: lintRelease
          command: ./gradlew lintRelease

  run-robo-test:
    executor:
      name: ubuntu
      machine: xlarge
    steps:
      - checkout
      - restore-gradle-cache
      - build-module:
          module_target: "app"
          variant: "Release"
      - login-google-cloud-platform
      - run-firebase-robo

  run-app-test:
    executor: ubuntu
    steps:
      - checkout
      - restore-gradle-cache
      - generate-sanity-test
      - build-instrumentation-test:
          module_target: "app"
      - build-module:
          module_target: "app"
          variant: "Debug"
      - store_artifacts:
          path: app/build/outputs/apk
          destination: .
      - login-google-cloud-platform
      - run-firebase-instrumentation:
          module_target: "app"

  run-sdk-test:
    executor: ubuntu
    steps:
      - checkout
      - mapbox-gl-native-begin
      - restore-gradle-cache
      - build-instrumentation-test:
          module_target: "sdk"
      - build-module:
          module_target: "app"
          variant: "Debug"
      - login-google-cloud-platform
      - run-firebase-instrumentation:
          module_target: "sdk"
      - mapbox-gl-native-end

  run-style-test:
    executor: ubuntu
    steps:
      - checkout
      - restore-gradle-cache
      - build-instrumentation-test:
          module_target: "extension-style-app"
      - build-module:
          module_target: "extension-style-app"
          variant: "Debug"
      - store_artifacts:
          path: extension-style-app/build/outputs/apk
          destination: .
      - login-google-cloud-platform
      - run-firebase-instrumentation:
          module_target: "extension-style-app"
          app_target: "extension-style-app"

  build-sdk-from-source:
    executor: ubuntu
    steps:
      - checkout
      - restore-gradle-cache
      - build-module:
          module_target: "sdk"
          variant: "Release"

  build-android-auto-app:
    executor: ubuntu
    steps:
      - checkout
      - restore-gradle-cache
      - build-module:
          module_target: "android-auto-app"
          variant: "Release"

  build-sdk-release:
    executor:
      name: ubuntu
      machine: xlarge
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "3b:cd:47:bf:57:9c:e5:36:b0:4d:5f:12:5e:d3:b3:3e"
      - restore-gradle-cache
      - build-module:
          module_target: "sdk"
          variant: "Release"
      - update-version-name
      - track-metrics
      - init-aws
      - publish-sdk-registry
      - publish-sdk-registry-named-snapshot

executors:
  ubuntu:
    parameters:
      machine:
        type: string
        default: medium
    docker:
      - image: mbgl/android-ndk-r21e:latest
    resource_class: << parameters.machine >>
    working_directory: /src
    environment:
      JVM_OPTS: -Xmx3200m
      BUILDTYPE: Debug
      GRADLE_OPTS: -Xmx4096m -Dorg.gradle.daemon=false -Dkotlin.compiler.execution.strategy=in-process