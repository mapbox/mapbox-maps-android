// Signature format: 3.0
package com.mapbox.maps.extension.compose {

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class ComposeMapInitOptions {
    ctor public ComposeMapInitOptions(com.mapbox.maps.MapOptions mapOptions, boolean textureView = false, int antialiasingSampleCount = 1, String mapName = "");
    ctor public ComposeMapInitOptions(float pixelRatio, boolean textureView = false, int antialiasingSampleCount = 1, String mapName = "");
    method public com.mapbox.maps.MapOptions component1();
    method public boolean component2();
    method public int component3();
    method public String component4();
    method public com.mapbox.maps.extension.compose.ComposeMapInitOptions copy(com.mapbox.maps.MapOptions mapOptions, boolean textureView, int antialiasingSampleCount, String mapName);
    method public int getAntialiasingSampleCount();
    method public String getMapName();
    method public com.mapbox.maps.MapOptions getMapOptions();
    method public boolean getTextureView();
    property public final int antialiasingSampleCount;
    property public final String mapName;
    property public final com.mapbox.maps.MapOptions mapOptions;
    property public final boolean textureView;
    field public static final com.mapbox.maps.extension.compose.ComposeMapInitOptions.Companion Companion;
    field public static final int DEFAULT_ANTIALIASING_SAMPLE_COUNT = 1; // 0x1
  }

  public static final class ComposeMapInitOptions.Companion {
  }

  public final class DisposableMapEffectKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void DisposableMapEffect(Object? key1, kotlin.jvm.functions.Function2<? super androidx.compose.runtime.DisposableEffectScope,? super com.mapbox.maps.MapView,? extends androidx.compose.runtime.DisposableEffectResult> block);
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void DisposableMapEffect(Object? key1, Object? key2, kotlin.jvm.functions.Function2<? super androidx.compose.runtime.DisposableEffectScope,? super com.mapbox.maps.MapView,? extends androidx.compose.runtime.DisposableEffectResult> block);
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void DisposableMapEffect(Object? key1, Object? key2, Object? key3, kotlin.jvm.functions.Function2<? super androidx.compose.runtime.DisposableEffectScope,? super com.mapbox.maps.MapView,? extends androidx.compose.runtime.DisposableEffectResult> block);
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void DisposableMapEffect(Object![]? keys, kotlin.jvm.functions.Function2<? super androidx.compose.runtime.DisposableEffectScope,? super com.mapbox.maps.MapView,? extends androidx.compose.runtime.DisposableEffectResult> block);
  }

  public final class MapEffectKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void MapEffect(Object? key1, kotlin.jvm.functions.Function3<? super kotlinx.coroutines.CoroutineScope,? super com.mapbox.maps.MapView,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,?> block);
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void MapEffect(Object? key1, Object? key2, kotlin.jvm.functions.Function3<? super kotlinx.coroutines.CoroutineScope,? super com.mapbox.maps.MapView,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,?> block);
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void MapEffect(Object? key1, Object? key2, Object? key3, kotlin.jvm.functions.Function3<? super kotlinx.coroutines.CoroutineScope,? super com.mapbox.maps.MapView,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,?> block);
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void MapEffect(Object![]? keys, kotlin.jvm.functions.Function3<? super kotlinx.coroutines.CoroutineScope,? super com.mapbox.maps.MapView,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,?> block);
  }

  @com.mapbox.maps.MapboxExperimental public final class MapEvents {
    ctor public MapEvents(com.mapbox.maps.MapLoadedCallback? onMapLoaded = null, com.mapbox.maps.MapIdleCallback? onMapIdle = null, com.mapbox.maps.MapLoadingErrorCallback? onMapLoadingError = null, com.mapbox.maps.StyleLoadedCallback? onStyleLoaded = null, com.mapbox.maps.StyleDataLoadedCallback? onStyleDataLoaded = null, com.mapbox.maps.SourceDataLoadedCallback? onSourceDataLoaded = null, com.mapbox.maps.SourceAddedCallback? onSourceAdded = null, com.mapbox.maps.SourceRemovedCallback? onSourceRemoved = null, com.mapbox.maps.StyleImageMissingCallback? onStyleImageMissing = null, com.mapbox.maps.StyleImageRemoveUnusedCallback? onStyleImageRemoveUnused = null, com.mapbox.maps.CameraChangedCallback? onCameraChanged = null, com.mapbox.maps.RenderFrameStartedCallback? onRenderFrameStarted = null, com.mapbox.maps.RenderFrameFinishedCallback? onRenderFrameFinished = null, com.mapbox.maps.ResourceRequestCallback? onResourceRequest = null);
    method public com.mapbox.maps.CameraChangedCallback? getOnCameraChanged();
    method public com.mapbox.maps.MapIdleCallback? getOnMapIdle();
    method public com.mapbox.maps.MapLoadedCallback? getOnMapLoaded();
    method public com.mapbox.maps.MapLoadingErrorCallback? getOnMapLoadingError();
    method public com.mapbox.maps.RenderFrameFinishedCallback? getOnRenderFrameFinished();
    method public com.mapbox.maps.RenderFrameStartedCallback? getOnRenderFrameStarted();
    method public com.mapbox.maps.ResourceRequestCallback? getOnResourceRequest();
    method public com.mapbox.maps.SourceAddedCallback? getOnSourceAdded();
    method public com.mapbox.maps.SourceDataLoadedCallback? getOnSourceDataLoaded();
    method public com.mapbox.maps.SourceRemovedCallback? getOnSourceRemoved();
    method public com.mapbox.maps.StyleDataLoadedCallback? getOnStyleDataLoaded();
    method public com.mapbox.maps.StyleImageMissingCallback? getOnStyleImageMissing();
    method public com.mapbox.maps.StyleImageRemoveUnusedCallback? getOnStyleImageRemoveUnused();
    method public com.mapbox.maps.StyleLoadedCallback? getOnStyleLoaded();
    property public final com.mapbox.maps.CameraChangedCallback? onCameraChanged;
    property public final com.mapbox.maps.MapIdleCallback? onMapIdle;
    property public final com.mapbox.maps.MapLoadedCallback? onMapLoaded;
    property public final com.mapbox.maps.MapLoadingErrorCallback? onMapLoadingError;
    property public final com.mapbox.maps.RenderFrameFinishedCallback? onRenderFrameFinished;
    property public final com.mapbox.maps.RenderFrameStartedCallback? onRenderFrameStarted;
    property public final com.mapbox.maps.ResourceRequestCallback? onResourceRequest;
    property public final com.mapbox.maps.SourceAddedCallback? onSourceAdded;
    property public final com.mapbox.maps.SourceDataLoadedCallback? onSourceDataLoaded;
    property public final com.mapbox.maps.SourceRemovedCallback? onSourceRemoved;
    property public final com.mapbox.maps.StyleDataLoadedCallback? onStyleDataLoaded;
    property public final com.mapbox.maps.StyleImageMissingCallback? onStyleImageMissing;
    property public final com.mapbox.maps.StyleImageRemoveUnusedCallback? onStyleImageRemoveUnused;
    property public final com.mapbox.maps.StyleLoadedCallback? onStyleLoaded;
  }

  @com.mapbox.maps.MapboxExperimental public final class MapState {
    ctor public MapState();
    method @com.mapbox.maps.MapboxExperimental public kotlinx.coroutines.flow.Flow<com.mapbox.maps.GenericEvent> genericEvents(String eventName);
    method public kotlinx.coroutines.flow.Flow<com.mapbox.maps.CameraChanged> getCameraChangedEvents();
    method public com.mapbox.maps.plugin.gestures.generated.GesturesSettings getGesturesSettings();
    method public kotlinx.coroutines.flow.Flow<com.mapbox.maps.MapIdle> getMapIdleEvents();
    method public kotlinx.coroutines.flow.Flow<com.mapbox.maps.MapLoaded> getMapLoadedEvents();
    method public kotlinx.coroutines.flow.Flow<com.mapbox.maps.MapLoadingError> getMapLoadingErrorEvents();
    method public kotlinx.coroutines.flow.Flow<com.mapbox.maps.RenderFrameFinished> getRenderFrameFinishedEvents();
    method public kotlinx.coroutines.flow.Flow<com.mapbox.maps.RenderFrameStarted> getRenderFrameStartedEvents();
    method public kotlinx.coroutines.flow.Flow<com.mapbox.maps.ResourceRequest> getResourceRequestEvents();
    method public kotlinx.coroutines.flow.Flow<com.mapbox.maps.SourceAdded> getSourceAddedEvents();
    method public kotlinx.coroutines.flow.Flow<com.mapbox.maps.SourceDataLoaded> getSourceDataLoadedEvents();
    method public kotlinx.coroutines.flow.Flow<com.mapbox.maps.SourceRemoved> getSourceRemovedEvents();
    method public kotlinx.coroutines.flow.Flow<com.mapbox.maps.StyleDataLoaded> getStyleDataLoadedEvents();
    method public kotlinx.coroutines.flow.Flow<com.mapbox.maps.StyleImageMissing> getStyleImageMissingEvents();
    method public kotlinx.coroutines.flow.Flow<com.mapbox.maps.StyleImageRemoveUnused> getStyleImageRemoveUnusedEvents();
    method public kotlinx.coroutines.flow.Flow<com.mapbox.maps.StyleLoaded> getStyleLoadedEvents();
    method @com.mapbox.maps.MapboxExperimental public suspend Object? pixelForCoordinate(com.mapbox.geojson.Point coordinate, kotlin.coroutines.Continuation<? super com.mapbox.maps.ScreenCoordinate>);
    method @com.mapbox.maps.MapboxExperimental public suspend Object? queryRenderedFeatures(com.mapbox.maps.RenderedQueryGeometry geometry, com.mapbox.maps.RenderedQueryOptions options, kotlin.coroutines.Continuation<? super com.mapbox.bindgen.Expected<java.lang.String,java.util.List<? extends com.mapbox.maps.QueriedRenderedFeature>>>);
    method public void setGesturesSettings(com.mapbox.maps.plugin.gestures.generated.GesturesSettings);
    property public final kotlinx.coroutines.flow.Flow<com.mapbox.maps.CameraChanged> cameraChangedEvents;
    property public final com.mapbox.maps.plugin.gestures.generated.GesturesSettings gesturesSettings;
    property public final kotlinx.coroutines.flow.Flow<com.mapbox.maps.MapIdle> mapIdleEvents;
    property public final kotlinx.coroutines.flow.Flow<com.mapbox.maps.MapLoaded> mapLoadedEvents;
    property public final kotlinx.coroutines.flow.Flow<com.mapbox.maps.MapLoadingError> mapLoadingErrorEvents;
    property public final kotlinx.coroutines.flow.Flow<com.mapbox.maps.RenderFrameFinished> renderFrameFinishedEvents;
    property public final kotlinx.coroutines.flow.Flow<com.mapbox.maps.RenderFrameStarted> renderFrameStartedEvents;
    property public final kotlinx.coroutines.flow.Flow<com.mapbox.maps.ResourceRequest> resourceRequestEvents;
    property public final kotlinx.coroutines.flow.Flow<com.mapbox.maps.SourceAdded> sourceAddedEvents;
    property public final kotlinx.coroutines.flow.Flow<com.mapbox.maps.SourceDataLoaded> sourceDataLoadedEvents;
    property public final kotlinx.coroutines.flow.Flow<com.mapbox.maps.SourceRemoved> sourceRemovedEvents;
    property public final kotlinx.coroutines.flow.Flow<com.mapbox.maps.StyleDataLoaded> styleDataLoadedEvents;
    property public final kotlinx.coroutines.flow.Flow<com.mapbox.maps.StyleImageMissing> styleImageMissingEvents;
    property public final kotlinx.coroutines.flow.Flow<com.mapbox.maps.StyleImageRemoveUnused> styleImageRemoveUnusedEvents;
    property public final kotlinx.coroutines.flow.Flow<com.mapbox.maps.StyleLoaded> styleLoadedEvents;
    field public static final com.mapbox.maps.extension.compose.MapState.Companion Companion;
  }

  public static final class MapState.Companion {
    method public androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.MapState,com.mapbox.maps.extension.compose.MapState.Holder> getSaver();
    property public final androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.MapState,com.mapbox.maps.extension.compose.MapState.Holder> Saver;
  }

  @com.mapbox.maps.MapboxExperimental @kotlinx.parcelize.Parcelize public static final class MapState.Holder implements android.os.Parcelable {
    ctor public MapState.Holder(java.util.Map<java.lang.String,? extends android.os.Parcelable> savedProperties);
    method public java.util.Map<java.lang.String,android.os.Parcelable> component1();
    method public com.mapbox.maps.extension.compose.MapState.Holder copy(java.util.Map<java.lang.String,? extends android.os.Parcelable> savedProperties);
    method public java.util.Map<java.lang.String,android.os.Parcelable> getSavedProperties();
    property public final java.util.Map<java.lang.String,android.os.Parcelable> savedProperties;
  }

  public final class MapStateKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental public static inline com.mapbox.maps.extension.compose.MapState rememberMapState(String? key = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.MapState,kotlin.Unit> init = {});
  }

  @androidx.compose.runtime.ComposableTargetMarker(description="Mapbox Map Composable") @com.mapbox.maps.MapboxExperimental @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) @kotlin.annotation.Target(allowedTargets={kotlin.annotation.AnnotationTarget.FILE, kotlin.annotation.AnnotationTarget.FUNCTION, kotlin.annotation.AnnotationTarget.PROPERTY_GETTER, kotlin.annotation.AnnotationTarget.TYPE, kotlin.annotation.AnnotationTarget.TYPE_PARAMETER}) public @interface MapboxMapComposable {
  }

  public final class MapboxMapKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental public static void MapboxMap(androidx.compose.ui.Modifier modifier = Modifier, com.mapbox.maps.extension.compose.ComposeMapInitOptions composeMapInitOptions = with(LocalDensity.current, { 
    return remember({ 
        return <init>(density)
    })
}), kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.ornaments.compass.MapCompassScope,kotlin.Unit> compass = { Compass() }, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.ornaments.scalebar.MapScaleBarScope,kotlin.Unit> scaleBar = { ScaleBar() }, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.ornaments.logo.MapLogoScope,kotlin.Unit> logo = { Logo() }, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.ornaments.attribution.MapAttributionScope,kotlin.Unit> attribution = { Attribution() }, com.mapbox.maps.extension.compose.animation.viewport.MapViewportState mapViewportState = rememberMapViewportState(), com.mapbox.maps.extension.compose.MapState mapState = rememberMapState(), com.mapbox.maps.plugin.gestures.OnMapClickListener? onMapClickListener = null, com.mapbox.maps.plugin.gestures.OnMapLongClickListener? onMapLongClickListener = null, kotlin.jvm.functions.Function0<kotlin.Unit> style = { MapboxStandardStyle() }, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.MapboxMapScope,kotlin.Unit>? content = null);
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapScopeMarker public final class MapboxMapScope {
    field public static final com.mapbox.maps.extension.compose.MapboxMapScope INSTANCE;
  }

  @kotlin.DslMarker public @interface MapboxMapScopeMarker {
  }

}

package com.mapbox.maps.extension.compose.animation.viewport {

  @com.mapbox.maps.MapboxExperimental public final class MapViewportState {
    ctor public MapViewportState(com.mapbox.maps.CameraState initialCameraState = com.mapbox.maps.extension.compose.animation.viewport.MapViewportState.INIT_CAMERA_STATE);
    method @com.mapbox.maps.MapboxExperimental public void easeTo(com.mapbox.maps.CameraOptions cameraOptions, com.mapbox.maps.plugin.animation.MapAnimationOptions? animationOptions = null, com.mapbox.maps.plugin.viewport.CompletionListener? completionListener = null);
    method @com.mapbox.maps.MapboxExperimental public void flyTo(com.mapbox.maps.CameraOptions cameraOptions, com.mapbox.maps.plugin.animation.MapAnimationOptions? animationOptions = null, com.mapbox.maps.plugin.viewport.CompletionListener? completionListener = null);
    method public com.mapbox.maps.CameraState? getCameraState();
    method public com.mapbox.maps.plugin.viewport.ViewportStatus? getMapViewportStatus();
    method public com.mapbox.maps.plugin.viewport.data.ViewportStatusChangeReason? getMapViewportStatusChangedReason();
    method public com.mapbox.maps.CameraOptions? getStyleDefaultCameraOptions();
    method @com.mapbox.maps.MapboxExperimental public void idle();
    method @UiThread @com.mapbox.maps.MapboxExperimental public void setCameraOptions(com.mapbox.maps.CameraOptions cameraOptions);
    method @UiThread @com.mapbox.maps.MapboxExperimental public void setCameraOptions(kotlin.jvm.functions.Function1<? super com.mapbox.maps.CameraOptions.Builder,kotlin.Unit> block);
    method @com.mapbox.maps.MapboxExperimental public void transitionToFollowPuckState(com.mapbox.maps.plugin.viewport.data.FollowPuckViewportStateOptions followPuckViewportStateOptions = FollowPuckViewportStateOptions.<init>().build(), com.mapbox.maps.plugin.viewport.data.DefaultViewportTransitionOptions defaultTransitionOptions = DefaultViewportTransitionOptions.<init>().build(), com.mapbox.maps.plugin.viewport.CompletionListener? completionListener = null);
    method @com.mapbox.maps.MapboxExperimental public void transitionToOverviewState(com.mapbox.maps.plugin.viewport.data.OverviewViewportStateOptions overviewViewportStateOptions, com.mapbox.maps.plugin.viewport.data.DefaultViewportTransitionOptions defaultTransitionOptions = DefaultViewportTransitionOptions.<init>().build(), com.mapbox.maps.plugin.viewport.CompletionListener? completionListener = null);
    property public final com.mapbox.maps.CameraState? cameraState;
    property public final com.mapbox.maps.plugin.viewport.ViewportStatus? mapViewportStatus;
    property public final com.mapbox.maps.plugin.viewport.data.ViewportStatusChangeReason? mapViewportStatusChangedReason;
    property public final com.mapbox.maps.CameraOptions? styleDefaultCameraOptions;
    field public static final com.mapbox.maps.extension.compose.animation.viewport.MapViewportState.Companion Companion;
  }

  public static final class MapViewportState.Companion {
    method public androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.animation.viewport.MapViewportState,com.mapbox.maps.CameraState> getSaver();
    property public final androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.animation.viewport.MapViewportState,com.mapbox.maps.CameraState> Saver;
  }

  public final class MapViewportStateKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental public static inline com.mapbox.maps.extension.compose.animation.viewport.MapViewportState rememberMapViewportState(String? key = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.animation.viewport.MapViewportState,kotlin.Unit> init = {});
  }

}

package com.mapbox.maps.extension.compose.annotation {

  public final class ViewAnnotationKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void ViewAnnotation(com.mapbox.maps.ViewAnnotationOptions options, androidx.compose.ui.Modifier modifier = Modifier, com.mapbox.maps.viewannotation.OnViewAnnotationUpdatedListener? onUpdatedListener = null, kotlin.jvm.functions.Function0<kotlin.Unit> content);
  }

}

package com.mapbox.maps.extension.compose.annotation.generated {

  public final class CircleAnnotationGroupKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void CircleAnnotationGroup(java.util.List<com.mapbox.maps.plugin.annotation.generated.CircleAnnotationOptions> annotations, com.mapbox.maps.plugin.annotation.AnnotationConfig? annotationConfig = null, Double? circleEmissiveStrength = null, com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchAlignment? circlePitchAlignment = null, com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchScale? circlePitchScale = null, java.util.List<java.lang.Double>? circleTranslate = null, com.mapbox.maps.extension.style.layers.properties.generated.CircleTranslateAnchor? circleTranslateAnchor = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.annotation.generated.CircleAnnotation,java.lang.Boolean> onClick = { it -> return false });
  }

  public final class CircleAnnotationKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void CircleAnnotation(com.mapbox.geojson.Point point, Double? circleBlur = null, Integer? circleColorInt = null, String? circleColorString = null, Double? circleOpacity = null, Double? circleRadius = null, Integer? circleStrokeColorInt = null, String? circleStrokeColorString = null, Double? circleStrokeOpacity = null, Double? circleStrokeWidth = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.annotation.generated.CircleAnnotation,java.lang.Boolean> onClick = { it -> return false });
  }

  public final class PointAnnotationGroupKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void PointAnnotationGroup(java.util.List<com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions> annotations, com.mapbox.maps.plugin.annotation.AnnotationConfig? annotationConfig = null, Boolean? iconAllowOverlap = null, Boolean? iconIgnorePlacement = null, Boolean? iconKeepUpright = null, Boolean? iconOptional = null, Double? iconPadding = null, com.mapbox.maps.extension.style.layers.properties.generated.IconPitchAlignment? iconPitchAlignment = null, com.mapbox.maps.extension.style.layers.properties.generated.IconRotationAlignment? iconRotationAlignment = null, Boolean? symbolAvoidEdges = null, com.mapbox.maps.extension.style.layers.properties.generated.SymbolPlacement? symbolPlacement = null, Double? symbolSpacing = null, Boolean? symbolZElevate = null, com.mapbox.maps.extension.style.layers.properties.generated.SymbolZOrder? symbolZOrder = null, Boolean? textAllowOverlap = null, java.util.List<java.lang.String>? textFont = null, Boolean? textIgnorePlacement = null, Boolean? textKeepUpright = null, Double? textMaxAngle = null, Boolean? textOptional = null, Double? textPadding = null, com.mapbox.maps.extension.style.layers.properties.generated.TextPitchAlignment? textPitchAlignment = null, com.mapbox.maps.extension.style.layers.properties.generated.TextRotationAlignment? textRotationAlignment = null, java.util.List<java.lang.String>? textVariableAnchor = null, java.util.List<java.lang.String>? textWritingMode = null, Double? iconColorSaturation = null, Double? iconOcclusionOpacity = null, java.util.List<java.lang.Double>? iconTranslate = null, com.mapbox.maps.extension.style.layers.properties.generated.IconTranslateAnchor? iconTranslateAnchor = null, Double? textOcclusionOpacity = null, java.util.List<java.lang.Double>? textTranslate = null, com.mapbox.maps.extension.style.layers.properties.generated.TextTranslateAnchor? textTranslateAnchor = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.annotation.generated.PointAnnotation,java.lang.Boolean> onClick = { it -> return false });
  }

  public final class PointAnnotationKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void PointAnnotation(com.mapbox.geojson.Point point, android.graphics.Bitmap? iconImageBitmap = null, com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor? iconAnchor = null, String? iconImage = null, java.util.List<java.lang.Double>? iconOffset = null, Double? iconRotate = null, Double? iconSize = null, com.mapbox.maps.extension.style.layers.properties.generated.IconTextFit? iconTextFit = null, java.util.List<java.lang.Double>? iconTextFitPadding = null, com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor? textAnchor = null, String? textField = null, com.mapbox.maps.extension.style.layers.properties.generated.TextJustify? textJustify = null, Double? textLetterSpacing = null, Double? textLineHeight = null, Double? textMaxWidth = null, java.util.List<java.lang.Double>? textOffset = null, Double? textRadialOffset = null, Double? textRotate = null, Double? textSize = null, com.mapbox.maps.extension.style.layers.properties.generated.TextTransform? textTransform = null, Integer? iconColorInt = null, String? iconColorString = null, Double? iconEmissiveStrength = null, Double? iconHaloBlur = null, Integer? iconHaloColorInt = null, String? iconHaloColorString = null, Double? iconHaloWidth = null, Double? iconImageCrossFade = null, Double? iconOpacity = null, Integer? textColorInt = null, String? textColorString = null, Double? textEmissiveStrength = null, Double? textHaloBlur = null, Integer? textHaloColorInt = null, String? textHaloColorString = null, Double? textHaloWidth = null, Double? textOpacity = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.annotation.generated.PointAnnotation,java.lang.Boolean> onClick = { it -> return false });
  }

  public final class PolygonAnnotationGroupKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void PolygonAnnotationGroup(java.util.List<com.mapbox.maps.plugin.annotation.generated.PolygonAnnotationOptions> annotations, com.mapbox.maps.plugin.annotation.AnnotationConfig? annotationConfig = null, Boolean? fillAntialias = null, Double? fillEmissiveStrength = null, java.util.List<java.lang.Double>? fillTranslate = null, com.mapbox.maps.extension.style.layers.properties.generated.FillTranslateAnchor? fillTranslateAnchor = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.annotation.generated.PolygonAnnotation,java.lang.Boolean> onClick = { it -> return false });
  }

  public final class PolygonAnnotationKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void PolygonAnnotation(java.util.List<? extends java.util.List<com.mapbox.geojson.Point>> points, Integer? fillColorInt = null, String? fillColorString = null, Double? fillOpacity = null, Integer? fillOutlineColorInt = null, String? fillOutlineColorString = null, String? fillPattern = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.annotation.generated.PolygonAnnotation,java.lang.Boolean> onClick = { it -> return false });
  }

  public final class PolylineAnnotationGroupKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void PolylineAnnotationGroup(java.util.List<com.mapbox.maps.plugin.annotation.generated.PolylineAnnotationOptions> annotations, com.mapbox.maps.plugin.annotation.AnnotationConfig? annotationConfig = null, com.mapbox.maps.extension.style.layers.properties.generated.LineCap? lineCap = null, Double? lineMiterLimit = null, Double? lineRoundLimit = null, java.util.List<java.lang.Double>? lineDasharray = null, Double? lineDepthOcclusionFactor = null, Double? lineEmissiveStrength = null, Double? lineOcclusionOpacity = null, java.util.List<java.lang.Double>? lineTranslate = null, com.mapbox.maps.extension.style.layers.properties.generated.LineTranslateAnchor? lineTranslateAnchor = null, java.util.List<java.lang.Double>? lineTrimOffset = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.annotation.generated.PolylineAnnotation,java.lang.Boolean> onClick = { it -> return false });
  }

  public final class PolylineAnnotationKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void PolylineAnnotation(java.util.List<com.mapbox.geojson.Point> points, com.mapbox.maps.extension.style.layers.properties.generated.LineJoin? lineJoin = null, Double? lineZOffset = null, Double? lineBlur = null, Integer? lineBorderColorInt = null, String? lineBorderColorString = null, Double? lineBorderWidth = null, Integer? lineColorInt = null, String? lineColorString = null, Double? lineGapWidth = null, Double? lineOffset = null, Double? lineOpacity = null, String? linePattern = null, Double? lineWidth = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.annotation.generated.PolylineAnnotation,java.lang.Boolean> onClick = { it -> return false });
  }

}

package com.mapbox.maps.extension.compose.internal {

  public final class MapPreviewPlaceholderKt {
  }

  public final class MapViewLifecycleKt {
  }

  public final class MapboxMapNodeKt {
  }

  public final class SettingsUtilsKt {
  }

}

package com.mapbox.maps.extension.compose.ornaments.attribution {

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapScopeMarker public final class MapAttributionScope {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental public void Attribution(androidx.compose.ui.Modifier modifier = Modifier, androidx.compose.foundation.layout.PaddingValues contentPadding = PaddingValues(92.dp, 4.dp, 4.dp, 4.dp), androidx.compose.ui.Alignment alignment = androidx.compose.ui.Alignment.Companion.BottomStart, long iconColor = Color(4280192171), kotlin.jvm.functions.Function3<? super java.util.List<com.mapbox.maps.plugin.attribution.Attribution>,? super kotlin.jvm.functions.Function0<kotlin.Unit>,? super kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.attribution.Attribution,kotlin.Unit>,kotlin.Unit> attributionDialog = { attributions, onDismissRequest, onAttributionClick -> AttributionDialog(attributions, onDismissRequest, onAttributionClick) }, kotlin.jvm.functions.Function4<? super kotlin.jvm.functions.Function0<kotlin.Unit>,? super kotlin.jvm.functions.Function0<kotlin.Unit>,? super kotlin.jvm.functions.Function0<kotlin.Unit>,? super kotlin.jvm.functions.Function0<kotlin.Unit>,kotlin.Unit> telemetryDialog = { onDismissRequest, onMoreInfo, onDisagree, onAgree -> TelemetryDialog(onDismissRequest, onMoreInfo, onDisagree, onAgree) });
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental public void AttributionDialog(java.util.List<com.mapbox.maps.plugin.attribution.Attribution> attributions, kotlin.jvm.functions.Function0<kotlin.Unit> onDismissRequest, kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.attribution.Attribution,kotlin.Unit> onAttributionClick);
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental public void TelemetryDialog(kotlin.jvm.functions.Function0<kotlin.Unit> onDismissRequest, kotlin.jvm.functions.Function0<kotlin.Unit> onMoreInfo, kotlin.jvm.functions.Function0<kotlin.Unit> onDisagree, kotlin.jvm.functions.Function0<kotlin.Unit> onAgree);
  }

}

package com.mapbox.maps.extension.compose.ornaments.compass {

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapScopeMarker public final class MapCompassScope {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental public void Compass(androidx.compose.ui.Modifier modifier = Modifier, androidx.compose.foundation.layout.PaddingValues contentPadding = PaddingValues(4.dp), androidx.compose.ui.Alignment alignment = androidx.compose.ui.Alignment.Companion.TopEnd, boolean fadeWhenFacingNorth = true, boolean resetToNorthUponClick = true, kotlin.jvm.functions.Function0<kotlin.Unit> content = { Image(painterResource(R.drawable.mapbox_compass_icon), "Mapbox Compass") });
  }

}

package com.mapbox.maps.extension.compose.ornaments.logo {

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapScopeMarker public final class MapLogoScope {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental public void Logo(androidx.compose.ui.Modifier modifier = Modifier, androidx.compose.foundation.layout.PaddingValues contentPadding = PaddingValues(4.dp), androidx.compose.ui.Alignment alignment = androidx.compose.ui.Alignment.Companion.BottomStart);
  }

}

package com.mapbox.maps.extension.compose.ornaments.scalebar {

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapScopeMarker public final class MapScaleBarScope {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental public void ScaleBar(androidx.compose.ui.Modifier modifier = Modifier, androidx.compose.foundation.layout.PaddingValues contentPadding = PaddingValues(4.dp), androidx.compose.ui.Alignment alignment = androidx.compose.ui.Alignment.Companion.TopStart, long textColor = Color.Black, long primaryColor = Color.Black, long secondaryColor = Color.White, float borderWidth = 2.dp, float height = 2.dp, float textBarMargin = 8.dp, float textBorderWidth = 2.dp, long textSize = 8.sp, boolean isMetricUnit = true, long refreshInterval = 15.milliseconds, boolean showTextBorder = true, float ratio = 0.5f, boolean useContinuousRendering = false);
  }

}

package com.mapbox.maps.extension.compose.style {

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class BooleanValue {
    ctor public BooleanValue(com.mapbox.bindgen.Value value);
    ctor public BooleanValue(boolean value);
    ctor public BooleanValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.BooleanValue copy(com.mapbox.bindgen.Value value);
    method public Boolean? getBooleanOrNull();
    method public com.mapbox.bindgen.Value getValue();
    property public final Boolean? booleanOrNull;
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.BooleanValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.BooleanValue DEFAULT;
  }

  public static final class BooleanValue.Companion {
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class ColorValue {
    ctor public ColorValue(com.mapbox.bindgen.Value value);
    ctor public ColorValue(long value);
    ctor public ColorValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.ColorValue copy(com.mapbox.bindgen.Value value);
    method public androidx.compose.ui.graphics.Color? getColorOrNull();
    method public com.mapbox.bindgen.Value getValue();
    property public final androidx.compose.ui.graphics.Color? colorOrNull;
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.ColorValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.ColorValue DEFAULT;
  }

  public static final class ColorValue.Companion {
  }

  public final class DoubleListValue {
    ctor public DoubleListValue(com.mapbox.bindgen.Value value);
    ctor public DoubleListValue(double... value);
    ctor public DoubleListValue(java.util.List<java.lang.Double> value);
    ctor public DoubleListValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.DoubleListValue copy(com.mapbox.bindgen.Value value);
    method public java.util.List<java.lang.Double>? getDoubleListOrNull();
    method public com.mapbox.bindgen.Value getValue();
    property public final java.util.List<java.lang.Double>? doubleListOrNull;
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.DoubleListValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.DoubleListValue DEFAULT;
  }

  public static final class DoubleListValue.Companion {
  }

  public final class DoubleRangeValue {
    ctor public DoubleRangeValue(com.mapbox.bindgen.Value value);
    ctor public DoubleRangeValue(double lower, double upper);
    ctor public DoubleRangeValue(android.util.Range<java.lang.Double> range);
    ctor public DoubleRangeValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.DoubleRangeValue copy(com.mapbox.bindgen.Value value);
    method public android.util.Range<java.lang.Double>? getRangeOrNull();
    method public com.mapbox.bindgen.Value getValue();
    property public final android.util.Range<java.lang.Double>? rangeOrNull;
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.DoubleRangeValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.DoubleRangeValue DEFAULT;
  }

  public static final class DoubleRangeValue.Companion {
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class DoubleValue {
    ctor public DoubleValue(com.mapbox.bindgen.Value value);
    ctor public DoubleValue(double value);
    ctor public DoubleValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.DoubleValue copy(com.mapbox.bindgen.Value value);
    method public Double? getDoubleOrNull();
    method public com.mapbox.bindgen.Value getValue();
    property public final Double? doubleOrNull;
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.DoubleValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.DoubleValue DEFAULT;
  }

  public static final class DoubleValue.Companion {
  }

  @com.mapbox.maps.MapboxExperimental public final class IdGenerator {
    method @com.mapbox.maps.MapboxExperimental public String generateRandomLayerId(String layerType);
    method @com.mapbox.maps.MapboxExperimental public String generateRandomLightId(String lightType);
    method @com.mapbox.maps.MapboxExperimental public String generateRandomSourceId(String sourceType);
    field public static final com.mapbox.maps.extension.compose.style.IdGenerator INSTANCE;
  }

  @androidx.compose.runtime.Stable @com.mapbox.maps.MapboxExperimental public final class ImportConfigs {
    method public void config(String name, com.mapbox.bindgen.Value value);
    method public com.mapbox.maps.extension.compose.style.ImportConfigs copy(java.util.HashMap<java.lang.String,com.mapbox.bindgen.Value> configs);
  }

  @androidx.compose.runtime.Stable @com.mapbox.maps.MapboxExperimental public final class LayerPositionedContent {
    method public void aboveLayer(String layerId, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method public void atIndex(int index, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method public void belowLayer(String layerId, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method public com.mapbox.maps.extension.compose.style.LayerPositionedContent copy(java.util.Map<com.mapbox.maps.LayerPosition,kotlin.jvm.functions.Function0<kotlin.Unit>> entries);
    method public void layerPosition(com.mapbox.maps.LayerPosition layerPosition, kotlin.jvm.functions.Function0<kotlin.Unit> content);
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class LongValue {
    ctor public LongValue(com.mapbox.bindgen.Value value);
    ctor public LongValue(long value);
    ctor public LongValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.LongValue copy(com.mapbox.bindgen.Value value);
    method public Long? getLongOrNull();
    method public com.mapbox.bindgen.Value getValue();
    property public final Long? longOrNull;
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.LongValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.LongValue DEFAULT;
  }

  public static final class LongValue.Companion {
  }

  @androidx.compose.runtime.ComposableTargetMarker(description="Mapbox Style Composable") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) @kotlin.annotation.Target(allowedTargets={kotlin.annotation.AnnotationTarget.FILE, kotlin.annotation.AnnotationTarget.FUNCTION, kotlin.annotation.AnnotationTarget.PROPERTY_GETTER, kotlin.annotation.AnnotationTarget.TYPE, kotlin.annotation.AnnotationTarget.TYPE_PARAMETER}) public @interface MapboxStyleComposable {
  }

  public final class PointListValue {
    ctor public PointListValue(com.mapbox.bindgen.Value value);
    ctor public PointListValue(com.mapbox.geojson.Point... point);
    ctor public PointListValue(kotlin.Pair<java.lang.Double,java.lang.Double>... point);
    ctor public PointListValue(java.util.List<? extends java.util.List<java.lang.Double>> points);
    ctor public PointListValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.PointListValue copy(com.mapbox.bindgen.Value value);
    method public java.util.List<com.mapbox.geojson.Point>? getPointsOrNull();
    method public com.mapbox.bindgen.Value getValue();
    property public final java.util.List<com.mapbox.geojson.Point>? pointsOrNull;
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.PointListValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.PointListValue DEFAULT;
  }

  public static final class PointListValue.Companion {
  }

  @androidx.compose.runtime.Stable @com.mapbox.maps.MapboxExperimental public final class SlotsContent {
    method public com.mapbox.maps.extension.compose.style.SlotsContent copy(java.util.Map<java.lang.String,kotlin.jvm.functions.Function0<kotlin.Unit>> entries);
    method public void slot(String name, kotlin.jvm.functions.Function0<kotlin.Unit> content);
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class StringListValue {
    ctor public StringListValue(com.mapbox.bindgen.Value value);
    ctor public StringListValue(java.lang.String... value);
    ctor public StringListValue(java.util.List<java.lang.String> value);
    ctor public StringListValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.StringListValue copy(com.mapbox.bindgen.Value value);
    method public java.util.List<java.lang.String>? getStringListOrNull();
    method public com.mapbox.bindgen.Value getValue();
    property public final java.util.List<java.lang.String>? stringListOrNull;
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.StringListValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.StringListValue DEFAULT;
  }

  public static final class StringListValue.Companion {
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class StringValue {
    ctor public StringValue(com.mapbox.bindgen.Value value);
    ctor public StringValue(String value);
    ctor public StringValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.StringValue copy(com.mapbox.bindgen.Value value);
    method public String? getStringOrNull();
    method public com.mapbox.bindgen.Value getValue();
    property public final String? stringOrNull;
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.StringValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.StringValue DEFAULT;
  }

  public static final class StringValue.Companion {
  }

  @com.mapbox.maps.MapboxExperimental public final class StyleImage {
    ctor public StyleImage(String imageId, androidx.compose.ui.graphics.ImageBitmap imageBitmap, Float? scale = null, boolean sdf = false, java.util.List<com.mapbox.maps.ImageStretches> stretchX = listOf(), java.util.List<com.mapbox.maps.ImageStretches> stretchY = listOf(), com.mapbox.maps.ImageContent? content = null);
    method public String component1();
    method public com.mapbox.maps.Image component2();
    method public Float? component3();
    method public boolean component4();
    method public java.util.List<com.mapbox.maps.ImageStretches> component5();
    method public java.util.List<com.mapbox.maps.ImageStretches> component6();
    method public com.mapbox.maps.ImageContent? component7();
    method public com.mapbox.maps.extension.compose.style.StyleImage copy(String imageId, com.mapbox.maps.Image image, Float? scale, boolean sdf, java.util.List<com.mapbox.maps.ImageStretches> stretchX, java.util.List<com.mapbox.maps.ImageStretches> stretchY, com.mapbox.maps.ImageContent? content);
    method public com.mapbox.maps.ImageContent? getContent();
    method public com.mapbox.maps.Image getImage();
    method public String getImageId();
    method public Float? getScale();
    method public boolean getSdf();
    method public java.util.List<com.mapbox.maps.ImageStretches> getStretchX();
    method public java.util.List<com.mapbox.maps.ImageStretches> getStretchY();
    property public final com.mapbox.maps.ImageContent? content;
    property public final com.mapbox.maps.Image image;
    property public final String imageId;
    property public final Float? scale;
    property public final boolean sdf;
    property public final java.util.List<com.mapbox.maps.ImageStretches> stretchX;
    property public final java.util.List<com.mapbox.maps.ImageStretches> stretchY;
  }

  @androidx.compose.runtime.Stable @com.mapbox.maps.MapboxExperimental public final class StyleImportsConfig {
    method public com.mapbox.maps.extension.compose.style.StyleImportsConfig copy(java.util.Map<java.lang.String,com.mapbox.maps.extension.compose.style.ImportConfigs> entries);
    method public void importConfig(String importId, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.ImportConfigs,kotlin.Unit> configs);
  }

  public final class StyleKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.style.MapboxStyleComposable public static void GenericStyle(String style, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.imports.StyleImportsScope,kotlin.Unit>? styleImportsContent = null, com.mapbox.maps.extension.compose.style.SlotsContent slotsContent = remember({ 
    return <init>()
}), com.mapbox.maps.extension.compose.style.LayerPositionedContent layerPositionedContent = remember({ 
    return <init>()
}), com.mapbox.maps.extension.compose.style.StyleImportsConfig styleImportsConfig = remember({ 
    return <init>()
}), com.mapbox.maps.extension.compose.style.projection.generated.Projection projection = com.mapbox.maps.extension.compose.style.projection.generated.Projection.INITIAL, com.mapbox.maps.extension.compose.style.atmosphere.generated.AtmosphereState atmosphereState = remember({ 
    return <init>()
}), com.mapbox.maps.extension.compose.style.terrain.generated.TerrainState terrainState = com.mapbox.maps.extension.compose.style.terrain.generated.TerrainState.INITIAL, com.mapbox.maps.extension.compose.style.lights.LightsState lightsState = com.mapbox.maps.extension.compose.style.lights.LightsState.INITIAL);
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.style.MapboxStyleComposable public static void MapStyle(String style, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.imports.StyleImportsScope,kotlin.Unit>? styleImportsContent = null, com.mapbox.maps.extension.compose.style.projection.generated.Projection projection = com.mapbox.maps.extension.compose.style.projection.generated.Projection.INITIAL, com.mapbox.maps.extension.compose.style.atmosphere.generated.AtmosphereState atmosphereState = remember({ 
    return <init>()
}), com.mapbox.maps.extension.compose.style.terrain.generated.TerrainState terrainState = com.mapbox.maps.extension.compose.style.terrain.generated.TerrainState.INITIAL, com.mapbox.maps.extension.compose.style.lights.LightsState lightsState = com.mapbox.maps.extension.compose.style.lights.LightsState.INITIAL);
    method @com.mapbox.maps.MapboxExperimental public static com.mapbox.maps.extension.compose.style.ImportConfigs importConfigs(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.ImportConfigs,kotlin.Unit> init);
    method @com.mapbox.maps.MapboxExperimental public static com.mapbox.maps.extension.compose.style.LayerPositionedContent layerPositionedContent(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.LayerPositionedContent,kotlin.Unit> init);
    method @com.mapbox.maps.MapboxExperimental public static com.mapbox.maps.extension.compose.style.SlotsContent slotsContent(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.SlotsContent,kotlin.Unit> init);
    method @com.mapbox.maps.MapboxExperimental public static com.mapbox.maps.extension.compose.style.StyleImportsConfig styleImportsConfig(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.StyleImportsConfig,kotlin.Unit> init);
  }

  public final class Transition {
    ctor public Transition(long durationMillis = 0L, long delayMillis = 0L);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.Transition copy(com.mapbox.bindgen.Value value);
    method public long getDelayMillis();
    method public long getDurationMillis();
    method public com.mapbox.bindgen.Value getValue();
    property public final long delayMillis;
    property public final long durationMillis;
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.Transition.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.Transition DEFAULT;
  }

  public static final class Transition.Companion {
  }

}

package com.mapbox.maps.extension.compose.style.atmosphere {

  public final class AtmosphereStateApplierKt {
  }

}

package com.mapbox.maps.extension.compose.style.atmosphere.generated {

  @com.mapbox.maps.MapboxExperimental public final class AtmosphereState {
    ctor public AtmosphereState();
    method public com.mapbox.maps.extension.compose.style.ColorValue getColor();
    method public com.mapbox.maps.extension.compose.style.Transition getColorTransition();
    method public com.mapbox.maps.extension.compose.style.ColorValue getHighColor();
    method public com.mapbox.maps.extension.compose.style.Transition getHighColorTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getHorizonBlend();
    method public com.mapbox.maps.extension.compose.style.Transition getHorizonBlendTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleRangeValue getRange();
    method public com.mapbox.maps.extension.compose.style.Transition getRangeTransition();
    method public com.mapbox.maps.extension.compose.style.ColorValue getSpaceColor();
    method public com.mapbox.maps.extension.compose.style.Transition getSpaceColorTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getStarIntensity();
    method public com.mapbox.maps.extension.compose.style.Transition getStarIntensityTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleRangeValue getVerticalRange();
    method public com.mapbox.maps.extension.compose.style.Transition getVerticalRangeTransition();
    method public void setColor(com.mapbox.maps.extension.compose.style.ColorValue);
    method public void setColorTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setHighColor(com.mapbox.maps.extension.compose.style.ColorValue);
    method public void setHighColorTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setHorizonBlend(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setHorizonBlendTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setRange(com.mapbox.maps.extension.compose.style.DoubleRangeValue);
    method public void setRangeTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setSpaceColor(com.mapbox.maps.extension.compose.style.ColorValue);
    method public void setSpaceColorTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setStarIntensity(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setStarIntensityTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setVerticalRange(com.mapbox.maps.extension.compose.style.DoubleRangeValue);
    method public void setVerticalRangeTransition(com.mapbox.maps.extension.compose.style.Transition);
    property public final com.mapbox.maps.extension.compose.style.ColorValue color;
    property public final com.mapbox.maps.extension.compose.style.Transition colorTransition;
    property public final com.mapbox.maps.extension.compose.style.ColorValue highColor;
    property public final com.mapbox.maps.extension.compose.style.Transition highColorTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue horizonBlend;
    property public final com.mapbox.maps.extension.compose.style.Transition horizonBlendTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleRangeValue range;
    property public final com.mapbox.maps.extension.compose.style.Transition rangeTransition;
    property public final com.mapbox.maps.extension.compose.style.ColorValue spaceColor;
    property public final com.mapbox.maps.extension.compose.style.Transition spaceColorTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue starIntensity;
    property public final com.mapbox.maps.extension.compose.style.Transition starIntensityTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleRangeValue verticalRange;
    property public final com.mapbox.maps.extension.compose.style.Transition verticalRangeTransition;
    field public static final com.mapbox.maps.extension.compose.style.atmosphere.generated.AtmosphereState.Companion Companion;
  }

  public static final class AtmosphereState.Companion {
    method public androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.style.atmosphere.generated.AtmosphereState,com.mapbox.maps.extension.compose.style.atmosphere.generated.AtmosphereState.Holder> getSaver();
    property public final androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.style.atmosphere.generated.AtmosphereState,com.mapbox.maps.extension.compose.style.atmosphere.generated.AtmosphereState.Holder> Saver;
  }

  @com.mapbox.maps.MapboxExperimental @kotlinx.parcelize.Parcelize @kotlinx.parcelize.TypeParceler public static final class AtmosphereState.Holder implements android.os.Parcelable {
    method public java.util.Map<java.lang.String,com.mapbox.bindgen.Value> component1();
    method public com.mapbox.maps.extension.compose.style.atmosphere.generated.AtmosphereState.Holder copy(java.util.Map<java.lang.String,? extends com.mapbox.bindgen.Value> savedProperties);
    method public java.util.Map<java.lang.String,com.mapbox.bindgen.Value> getSavedProperties();
    property public final java.util.Map<java.lang.String,com.mapbox.bindgen.Value> savedProperties;
  }

  public final class AtmosphereStateKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental public static inline com.mapbox.maps.extension.compose.style.atmosphere.generated.AtmosphereState rememberAtmosphereState(String? key = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.atmosphere.generated.AtmosphereState,kotlin.Unit> init = {});
  }

}

package com.mapbox.maps.extension.compose.style.imports {

  @androidx.compose.runtime.ComposableTargetMarker(description="Mapbox Style Import Composable") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) @kotlin.annotation.Target(allowedTargets={kotlin.annotation.AnnotationTarget.FILE, kotlin.annotation.AnnotationTarget.FUNCTION, kotlin.annotation.AnnotationTarget.PROPERTY_GETTER, kotlin.annotation.AnnotationTarget.TYPE, kotlin.annotation.AnnotationTarget.TYPE_PARAMETER}) public @interface MapboxStyleImportComposable {
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapScopeMarker public final class StyleImportsScope {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.style.imports.MapboxStyleImportComposable public void StyleImport(String importId, String style, com.mapbox.maps.extension.compose.style.ImportConfigs? configs = null);
  }

}

package com.mapbox.maps.extension.compose.style.internal {

  public final class StyleConfigKt {
  }

  public final class StyleLayerPositionKt {
  }

  public final class StyleSlotKt {
  }

}

package com.mapbox.maps.extension.compose.style.layers {

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class Filter {
    ctor public Filter(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.Filter copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.Filter.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.Filter DEFAULT;
  }

  public static final class Filter.Companion {
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class FormattedValue {
    ctor public FormattedValue(String value);
    ctor public FormattedValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.FormattedValue copy(com.mapbox.bindgen.Value value);
    method public String? getStringOrNull();
    method public com.mapbox.bindgen.Value getValue();
    property public final String? stringOrNull;
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.FormattedValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.FormattedValue DEFAULT;
  }

  public static final class FormattedValue.Companion {
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class ImageValue {
    ctor public ImageValue(com.mapbox.maps.extension.compose.style.StyleImage styleImage);
    ctor public ImageValue(String imageId);
    ctor public ImageValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.StyleImage? component2();
    method public com.mapbox.maps.extension.compose.style.layers.ImageValue copy(com.mapbox.bindgen.Value value, com.mapbox.maps.extension.compose.style.StyleImage? styleImage);
    method public String? getImageIdOrNull();
    method public com.mapbox.maps.extension.compose.style.StyleImage? getStyleImage();
    method public com.mapbox.bindgen.Value getValue();
    property public final String? imageIdOrNull;
    property public final com.mapbox.maps.extension.compose.style.StyleImage? styleImage;
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.ImageValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.ImageValue DEFAULT;
  }

  public static final class ImageValue.Companion {
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class ModelIdValue {
    ctor public ModelIdValue(String value);
    ctor public ModelIdValue(String modelId, String uri);
    ctor public ModelIdValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public kotlin.Pair<java.lang.String,java.lang.String>? component2();
    method public com.mapbox.maps.extension.compose.style.layers.ModelIdValue copy(com.mapbox.bindgen.Value value, kotlin.Pair<java.lang.String,java.lang.String>? modelInfo);
    method public String? getModelIdOrNull();
    method public kotlin.Pair<java.lang.String,java.lang.String>? getModelInfo();
    method public String? getUriOrNull();
    method public com.mapbox.bindgen.Value getValue();
    property public final String? modelIdOrNull;
    property public final kotlin.Pair<java.lang.String,java.lang.String>? modelInfo;
    property public final String? uriOrNull;
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.ModelIdValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.ModelIdValue DEFAULT;
  }

  public static final class ModelIdValue.Companion {
  }

}

package com.mapbox.maps.extension.compose.style.layers.generated {

  public final class BackgroundLayerKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void BackgroundLayer(String layerId = remember({ 
    return generateRandomLayerId("background")
}), com.mapbox.maps.extension.compose.style.ColorValue backgroundColor = com.mapbox.maps.extension.compose.style.ColorValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition backgroundColorTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue backgroundEmissiveStrength = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition backgroundEmissiveStrengthTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue backgroundOpacity = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition backgroundOpacityTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.layers.ImageValue backgroundPattern = com.mapbox.maps.extension.compose.style.layers.ImageValue.INITIAL, com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue visibility = com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue.INITIAL, com.mapbox.maps.extension.compose.style.LongValue minZoom = com.mapbox.maps.extension.compose.style.LongValue.INITIAL, com.mapbox.maps.extension.compose.style.LongValue maxZoom = com.mapbox.maps.extension.compose.style.LongValue.INITIAL);
  }

  public final class CircleLayerKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void CircleLayer(com.mapbox.maps.extension.compose.style.sources.SourceState sourceState, String layerId = remember({ 
    return generateRandomLayerId("circle")
}), com.mapbox.maps.extension.compose.style.DoubleValue circleSortKey = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue circleBlur = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition circleBlurTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.ColorValue circleColor = com.mapbox.maps.extension.compose.style.ColorValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition circleColorTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue circleEmissiveStrength = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition circleEmissiveStrengthTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue circleOpacity = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition circleOpacityTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.layers.generated.CirclePitchAlignmentValue circlePitchAlignment = com.mapbox.maps.extension.compose.style.layers.generated.CirclePitchAlignmentValue.INITIAL, com.mapbox.maps.extension.compose.style.layers.generated.CirclePitchScaleValue circlePitchScale = com.mapbox.maps.extension.compose.style.layers.generated.CirclePitchScaleValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue circleRadius = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition circleRadiusTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.ColorValue circleStrokeColor = com.mapbox.maps.extension.compose.style.ColorValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition circleStrokeColorTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue circleStrokeOpacity = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition circleStrokeOpacityTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue circleStrokeWidth = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition circleStrokeWidthTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleListValue circleTranslate = com.mapbox.maps.extension.compose.style.DoubleListValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition circleTranslateTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.layers.generated.CircleTranslateAnchorValue circleTranslateAnchor = com.mapbox.maps.extension.compose.style.layers.generated.CircleTranslateAnchorValue.INITIAL, com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue visibility = com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue.INITIAL, com.mapbox.maps.extension.compose.style.LongValue minZoom = com.mapbox.maps.extension.compose.style.LongValue.INITIAL, com.mapbox.maps.extension.compose.style.LongValue maxZoom = com.mapbox.maps.extension.compose.style.LongValue.INITIAL, com.mapbox.maps.extension.compose.style.StringValue sourceLayer = com.mapbox.maps.extension.compose.style.StringValue.INITIAL, com.mapbox.maps.extension.compose.style.layers.Filter filter = com.mapbox.maps.extension.compose.style.layers.Filter.INITIAL);
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class CirclePitchAlignmentValue {
    ctor public CirclePitchAlignmentValue(com.mapbox.bindgen.Value value);
    ctor public CirclePitchAlignmentValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.CirclePitchAlignmentValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.CirclePitchAlignmentValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.CirclePitchAlignmentValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.CirclePitchAlignmentValue MAP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.CirclePitchAlignmentValue VIEWPORT;
  }

  public static final class CirclePitchAlignmentValue.Companion {
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class CirclePitchScaleValue {
    ctor public CirclePitchScaleValue(com.mapbox.bindgen.Value value);
    ctor public CirclePitchScaleValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.CirclePitchScaleValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.CirclePitchScaleValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.CirclePitchScaleValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.CirclePitchScaleValue MAP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.CirclePitchScaleValue VIEWPORT;
  }

  public static final class CirclePitchScaleValue.Companion {
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class CircleTranslateAnchorValue {
    ctor public CircleTranslateAnchorValue(com.mapbox.bindgen.Value value);
    ctor public CircleTranslateAnchorValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.CircleTranslateAnchorValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.CircleTranslateAnchorValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.CircleTranslateAnchorValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.CircleTranslateAnchorValue MAP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.CircleTranslateAnchorValue VIEWPORT;
  }

  public static final class CircleTranslateAnchorValue.Companion {
  }

  public final class FillExtrusionLayerKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void FillExtrusionLayer(com.mapbox.maps.extension.compose.style.sources.SourceState sourceState, String layerId = remember({ 
    return generateRandomLayerId("fill-extrusion")
}), com.mapbox.maps.extension.compose.style.DoubleValue fillExtrusionEdgeRadius = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue fillExtrusionAmbientOcclusionGroundAttenuation = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition fillExtrusionAmbientOcclusionGroundAttenuationTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue fillExtrusionAmbientOcclusionGroundRadius = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition fillExtrusionAmbientOcclusionGroundRadiusTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue fillExtrusionAmbientOcclusionIntensity = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition fillExtrusionAmbientOcclusionIntensityTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue fillExtrusionAmbientOcclusionRadius = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition fillExtrusionAmbientOcclusionRadiusTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue fillExtrusionAmbientOcclusionWallRadius = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition fillExtrusionAmbientOcclusionWallRadiusTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue fillExtrusionBase = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition fillExtrusionBaseTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.ColorValue fillExtrusionColor = com.mapbox.maps.extension.compose.style.ColorValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition fillExtrusionColorTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue fillExtrusionCutoffFadeRange = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue fillExtrusionEmissiveStrength = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition fillExtrusionEmissiveStrengthTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.ColorValue fillExtrusionFloodLightColor = com.mapbox.maps.extension.compose.style.ColorValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition fillExtrusionFloodLightColorTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue fillExtrusionFloodLightGroundAttenuation = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition fillExtrusionFloodLightGroundAttenuationTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue fillExtrusionFloodLightGroundRadius = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition fillExtrusionFloodLightGroundRadiusTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue fillExtrusionFloodLightIntensity = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition fillExtrusionFloodLightIntensityTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue fillExtrusionFloodLightWallRadius = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition fillExtrusionFloodLightWallRadiusTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue fillExtrusionHeight = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition fillExtrusionHeightTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue fillExtrusionOpacity = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition fillExtrusionOpacityTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.layers.ImageValue fillExtrusionPattern = com.mapbox.maps.extension.compose.style.layers.ImageValue.INITIAL, com.mapbox.maps.extension.compose.style.BooleanValue fillExtrusionRoundedRoof = com.mapbox.maps.extension.compose.style.BooleanValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleListValue fillExtrusionTranslate = com.mapbox.maps.extension.compose.style.DoubleListValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition fillExtrusionTranslateTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionTranslateAnchorValue fillExtrusionTranslateAnchor = com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionTranslateAnchorValue.INITIAL, com.mapbox.maps.extension.compose.style.BooleanValue fillExtrusionVerticalGradient = com.mapbox.maps.extension.compose.style.BooleanValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue fillExtrusionVerticalScale = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition fillExtrusionVerticalScaleTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue visibility = com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue.INITIAL, com.mapbox.maps.extension.compose.style.LongValue minZoom = com.mapbox.maps.extension.compose.style.LongValue.INITIAL, com.mapbox.maps.extension.compose.style.LongValue maxZoom = com.mapbox.maps.extension.compose.style.LongValue.INITIAL, com.mapbox.maps.extension.compose.style.StringValue sourceLayer = com.mapbox.maps.extension.compose.style.StringValue.INITIAL, com.mapbox.maps.extension.compose.style.layers.Filter filter = com.mapbox.maps.extension.compose.style.layers.Filter.INITIAL);
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class FillExtrusionTranslateAnchorValue {
    ctor public FillExtrusionTranslateAnchorValue(com.mapbox.bindgen.Value value);
    ctor public FillExtrusionTranslateAnchorValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionTranslateAnchorValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionTranslateAnchorValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionTranslateAnchorValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionTranslateAnchorValue MAP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionTranslateAnchorValue VIEWPORT;
  }

  public static final class FillExtrusionTranslateAnchorValue.Companion {
  }

  public final class FillLayerKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void FillLayer(com.mapbox.maps.extension.compose.style.sources.SourceState sourceState, String layerId = remember({ 
    return generateRandomLayerId("fill")
}), com.mapbox.maps.extension.compose.style.DoubleValue fillSortKey = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.BooleanValue fillAntialias = com.mapbox.maps.extension.compose.style.BooleanValue.INITIAL, com.mapbox.maps.extension.compose.style.ColorValue fillColor = com.mapbox.maps.extension.compose.style.ColorValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition fillColorTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue fillEmissiveStrength = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition fillEmissiveStrengthTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue fillOpacity = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition fillOpacityTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.ColorValue fillOutlineColor = com.mapbox.maps.extension.compose.style.ColorValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition fillOutlineColorTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.layers.ImageValue fillPattern = com.mapbox.maps.extension.compose.style.layers.ImageValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleListValue fillTranslate = com.mapbox.maps.extension.compose.style.DoubleListValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition fillTranslateTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.layers.generated.FillTranslateAnchorValue fillTranslateAnchor = com.mapbox.maps.extension.compose.style.layers.generated.FillTranslateAnchorValue.INITIAL, com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue visibility = com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue.INITIAL, com.mapbox.maps.extension.compose.style.LongValue minZoom = com.mapbox.maps.extension.compose.style.LongValue.INITIAL, com.mapbox.maps.extension.compose.style.LongValue maxZoom = com.mapbox.maps.extension.compose.style.LongValue.INITIAL, com.mapbox.maps.extension.compose.style.StringValue sourceLayer = com.mapbox.maps.extension.compose.style.StringValue.INITIAL, com.mapbox.maps.extension.compose.style.layers.Filter filter = com.mapbox.maps.extension.compose.style.layers.Filter.INITIAL);
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class FillTranslateAnchorValue {
    ctor public FillTranslateAnchorValue(com.mapbox.bindgen.Value value);
    ctor public FillTranslateAnchorValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillTranslateAnchorValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillTranslateAnchorValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillTranslateAnchorValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillTranslateAnchorValue MAP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillTranslateAnchorValue VIEWPORT;
  }

  public static final class FillTranslateAnchorValue.Companion {
  }

  public final class HeatmapLayerKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void HeatmapLayer(com.mapbox.maps.extension.compose.style.sources.SourceState sourceState, String layerId = remember({ 
    return generateRandomLayerId("heatmap")
}), com.mapbox.maps.extension.compose.style.ColorValue heatmapColor = com.mapbox.maps.extension.compose.style.ColorValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue heatmapIntensity = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition heatmapIntensityTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue heatmapOpacity = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition heatmapOpacityTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue heatmapRadius = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition heatmapRadiusTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue heatmapWeight = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue visibility = com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue.INITIAL, com.mapbox.maps.extension.compose.style.LongValue minZoom = com.mapbox.maps.extension.compose.style.LongValue.INITIAL, com.mapbox.maps.extension.compose.style.LongValue maxZoom = com.mapbox.maps.extension.compose.style.LongValue.INITIAL, com.mapbox.maps.extension.compose.style.StringValue sourceLayer = com.mapbox.maps.extension.compose.style.StringValue.INITIAL, com.mapbox.maps.extension.compose.style.layers.Filter filter = com.mapbox.maps.extension.compose.style.layers.Filter.INITIAL);
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class HillshadeIlluminationAnchorValue {
    ctor public HillshadeIlluminationAnchorValue(com.mapbox.bindgen.Value value);
    ctor public HillshadeIlluminationAnchorValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.HillshadeIlluminationAnchorValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.HillshadeIlluminationAnchorValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.HillshadeIlluminationAnchorValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.HillshadeIlluminationAnchorValue MAP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.HillshadeIlluminationAnchorValue VIEWPORT;
  }

  public static final class HillshadeIlluminationAnchorValue.Companion {
  }

  public final class HillshadeLayerKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void HillshadeLayer(com.mapbox.maps.extension.compose.style.sources.SourceState sourceState, String layerId = remember({ 
    return generateRandomLayerId("hillshade")
}), com.mapbox.maps.extension.compose.style.ColorValue hillshadeAccentColor = com.mapbox.maps.extension.compose.style.ColorValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition hillshadeAccentColorTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue hillshadeEmissiveStrength = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition hillshadeEmissiveStrengthTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue hillshadeExaggeration = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition hillshadeExaggerationTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.ColorValue hillshadeHighlightColor = com.mapbox.maps.extension.compose.style.ColorValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition hillshadeHighlightColorTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.layers.generated.HillshadeIlluminationAnchorValue hillshadeIlluminationAnchor = com.mapbox.maps.extension.compose.style.layers.generated.HillshadeIlluminationAnchorValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue hillshadeIlluminationDirection = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.ColorValue hillshadeShadowColor = com.mapbox.maps.extension.compose.style.ColorValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition hillshadeShadowColorTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue visibility = com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue.INITIAL, com.mapbox.maps.extension.compose.style.LongValue minZoom = com.mapbox.maps.extension.compose.style.LongValue.INITIAL, com.mapbox.maps.extension.compose.style.LongValue maxZoom = com.mapbox.maps.extension.compose.style.LongValue.INITIAL, com.mapbox.maps.extension.compose.style.StringValue sourceLayer = com.mapbox.maps.extension.compose.style.StringValue.INITIAL, com.mapbox.maps.extension.compose.style.layers.Filter filter = com.mapbox.maps.extension.compose.style.layers.Filter.INITIAL);
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class IconAnchorValue {
    ctor public IconAnchorValue(com.mapbox.bindgen.Value value);
    ctor public IconAnchorValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconAnchorValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconAnchorValue BOTTOM;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconAnchorValue BOTTOM_LEFT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconAnchorValue BOTTOM_RIGHT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconAnchorValue CENTER;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconAnchorValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconAnchorValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconAnchorValue LEFT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconAnchorValue RIGHT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconAnchorValue TOP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconAnchorValue TOP_LEFT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconAnchorValue TOP_RIGHT;
  }

  public static final class IconAnchorValue.Companion {
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class IconPitchAlignmentValue {
    ctor public IconPitchAlignmentValue(com.mapbox.bindgen.Value value);
    ctor public IconPitchAlignmentValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconPitchAlignmentValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconPitchAlignmentValue AUTO;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconPitchAlignmentValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconPitchAlignmentValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconPitchAlignmentValue MAP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconPitchAlignmentValue VIEWPORT;
  }

  public static final class IconPitchAlignmentValue.Companion {
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class IconRotationAlignmentValue {
    ctor public IconRotationAlignmentValue(com.mapbox.bindgen.Value value);
    ctor public IconRotationAlignmentValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconRotationAlignmentValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconRotationAlignmentValue AUTO;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconRotationAlignmentValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconRotationAlignmentValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconRotationAlignmentValue MAP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconRotationAlignmentValue VIEWPORT;
  }

  public static final class IconRotationAlignmentValue.Companion {
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class IconTextFitValue {
    ctor public IconTextFitValue(com.mapbox.bindgen.Value value);
    ctor public IconTextFitValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconTextFitValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconTextFitValue BOTH;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconTextFitValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconTextFitValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconTextFitValue HEIGHT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconTextFitValue NONE;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconTextFitValue WIDTH;
  }

  public static final class IconTextFitValue.Companion {
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class IconTranslateAnchorValue {
    ctor public IconTranslateAnchorValue(com.mapbox.bindgen.Value value);
    ctor public IconTranslateAnchorValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconTranslateAnchorValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconTranslateAnchorValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconTranslateAnchorValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconTranslateAnchorValue MAP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconTranslateAnchorValue VIEWPORT;
  }

  public static final class IconTranslateAnchorValue.Companion {
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class LineCapValue {
    ctor public LineCapValue(com.mapbox.bindgen.Value value);
    ctor public LineCapValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineCapValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineCapValue BUTT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineCapValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineCapValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineCapValue ROUND;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineCapValue SQUARE;
  }

  public static final class LineCapValue.Companion {
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class LineJoinValue {
    ctor public LineJoinValue(com.mapbox.bindgen.Value value);
    ctor public LineJoinValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineJoinValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineJoinValue BEVEL;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineJoinValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineJoinValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineJoinValue MITER;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineJoinValue NONE;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineJoinValue ROUND;
  }

  public static final class LineJoinValue.Companion {
  }

  public final class LineLayerKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void LineLayer(com.mapbox.maps.extension.compose.style.sources.SourceState sourceState, String layerId = remember({ 
    return generateRandomLayerId("line")
}), com.mapbox.maps.extension.compose.style.layers.generated.LineCapValue lineCap = com.mapbox.maps.extension.compose.style.layers.generated.LineCapValue.INITIAL, com.mapbox.maps.extension.compose.style.layers.generated.LineJoinValue lineJoin = com.mapbox.maps.extension.compose.style.layers.generated.LineJoinValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue lineMiterLimit = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue lineRoundLimit = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue lineSortKey = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue lineZOffset = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue lineBlur = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition lineBlurTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.ColorValue lineBorderColor = com.mapbox.maps.extension.compose.style.ColorValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition lineBorderColorTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue lineBorderWidth = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition lineBorderWidthTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.ColorValue lineColor = com.mapbox.maps.extension.compose.style.ColorValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition lineColorTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleListValue lineDasharray = com.mapbox.maps.extension.compose.style.DoubleListValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue lineDepthOcclusionFactor = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition lineDepthOcclusionFactorTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue lineEmissiveStrength = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition lineEmissiveStrengthTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue lineGapWidth = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition lineGapWidthTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.ColorValue lineGradient = com.mapbox.maps.extension.compose.style.ColorValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue lineOcclusionOpacity = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition lineOcclusionOpacityTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue lineOffset = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition lineOffsetTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue lineOpacity = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition lineOpacityTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.layers.ImageValue linePattern = com.mapbox.maps.extension.compose.style.layers.ImageValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleListValue lineTranslate = com.mapbox.maps.extension.compose.style.DoubleListValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition lineTranslateTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.layers.generated.LineTranslateAnchorValue lineTranslateAnchor = com.mapbox.maps.extension.compose.style.layers.generated.LineTranslateAnchorValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleListValue lineTrimOffset = com.mapbox.maps.extension.compose.style.DoubleListValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue lineWidth = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition lineWidthTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue visibility = com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue.INITIAL, com.mapbox.maps.extension.compose.style.LongValue minZoom = com.mapbox.maps.extension.compose.style.LongValue.INITIAL, com.mapbox.maps.extension.compose.style.LongValue maxZoom = com.mapbox.maps.extension.compose.style.LongValue.INITIAL, com.mapbox.maps.extension.compose.style.StringValue sourceLayer = com.mapbox.maps.extension.compose.style.StringValue.INITIAL, com.mapbox.maps.extension.compose.style.layers.Filter filter = com.mapbox.maps.extension.compose.style.layers.Filter.INITIAL);
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class LineTranslateAnchorValue {
    ctor public LineTranslateAnchorValue(com.mapbox.bindgen.Value value);
    ctor public LineTranslateAnchorValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineTranslateAnchorValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineTranslateAnchorValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineTranslateAnchorValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineTranslateAnchorValue MAP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineTranslateAnchorValue VIEWPORT;
  }

  public static final class LineTranslateAnchorValue.Companion {
  }

  public final class LocationIndicatorLayerKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void LocationIndicatorLayer(String layerId = remember({ 
    return generateRandomLayerId("location-indicator")
}), com.mapbox.maps.extension.compose.style.layers.ImageValue bearingImage = com.mapbox.maps.extension.compose.style.layers.ImageValue.INITIAL, com.mapbox.maps.extension.compose.style.layers.ImageValue shadowImage = com.mapbox.maps.extension.compose.style.layers.ImageValue.INITIAL, com.mapbox.maps.extension.compose.style.layers.ImageValue topImage = com.mapbox.maps.extension.compose.style.layers.ImageValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue accuracyRadius = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition accuracyRadiusTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.ColorValue accuracyRadiusBorderColor = com.mapbox.maps.extension.compose.style.ColorValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition accuracyRadiusBorderColorTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.ColorValue accuracyRadiusColor = com.mapbox.maps.extension.compose.style.ColorValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition accuracyRadiusColorTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue bearing = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition bearingTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue bearingImageSize = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition bearingImageSizeTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.ColorValue emphasisCircleColor = com.mapbox.maps.extension.compose.style.ColorValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition emphasisCircleColorTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue emphasisCircleRadius = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition emphasisCircleRadiusTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue imagePitchDisplacement = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleListValue location = com.mapbox.maps.extension.compose.style.DoubleListValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition locationTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue locationIndicatorOpacity = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition locationIndicatorOpacityTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue perspectiveCompensation = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue shadowImageSize = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition shadowImageSizeTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue topImageSize = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition topImageSizeTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue visibility = com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue.INITIAL, com.mapbox.maps.extension.compose.style.LongValue minZoom = com.mapbox.maps.extension.compose.style.LongValue.INITIAL, com.mapbox.maps.extension.compose.style.LongValue maxZoom = com.mapbox.maps.extension.compose.style.LongValue.INITIAL, com.mapbox.maps.extension.compose.style.StringValue sourceLayer = com.mapbox.maps.extension.compose.style.StringValue.INITIAL, com.mapbox.maps.extension.compose.style.layers.Filter filter = com.mapbox.maps.extension.compose.style.layers.Filter.INITIAL);
  }

  public final class ModelLayerKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void ModelLayer(com.mapbox.maps.extension.compose.style.sources.SourceState sourceState, String layerId = remember({ 
    return generateRandomLayerId("model")
}), com.mapbox.maps.extension.compose.style.layers.ModelIdValue modelId = com.mapbox.maps.extension.compose.style.layers.ModelIdValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue modelAmbientOcclusionIntensity = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition modelAmbientOcclusionIntensityTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.BooleanValue modelCastShadows = com.mapbox.maps.extension.compose.style.BooleanValue.INITIAL, com.mapbox.maps.extension.compose.style.ColorValue modelColor = com.mapbox.maps.extension.compose.style.ColorValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition modelColorTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue modelColorMixIntensity = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition modelColorMixIntensityTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue modelCutoffFadeRange = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue modelEmissiveStrength = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition modelEmissiveStrengthTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleListValue modelFrontCutoff = com.mapbox.maps.extension.compose.style.DoubleListValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleListValue modelHeightBasedEmissiveStrengthMultiplier = com.mapbox.maps.extension.compose.style.DoubleListValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition modelHeightBasedEmissiveStrengthMultiplierTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue modelOpacity = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition modelOpacityTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.BooleanValue modelReceiveShadows = com.mapbox.maps.extension.compose.style.BooleanValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleListValue modelRotation = com.mapbox.maps.extension.compose.style.DoubleListValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition modelRotationTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue modelRoughness = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition modelRoughnessTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleListValue modelScale = com.mapbox.maps.extension.compose.style.DoubleListValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition modelScaleTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.layers.generated.ModelScaleModeValue modelScaleMode = com.mapbox.maps.extension.compose.style.layers.generated.ModelScaleModeValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleListValue modelTranslation = com.mapbox.maps.extension.compose.style.DoubleListValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition modelTranslationTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.layers.generated.ModelTypeValue modelType = com.mapbox.maps.extension.compose.style.layers.generated.ModelTypeValue.INITIAL, com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue visibility = com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue.INITIAL, com.mapbox.maps.extension.compose.style.LongValue minZoom = com.mapbox.maps.extension.compose.style.LongValue.INITIAL, com.mapbox.maps.extension.compose.style.LongValue maxZoom = com.mapbox.maps.extension.compose.style.LongValue.INITIAL, com.mapbox.maps.extension.compose.style.StringValue sourceLayer = com.mapbox.maps.extension.compose.style.StringValue.INITIAL, com.mapbox.maps.extension.compose.style.layers.Filter filter = com.mapbox.maps.extension.compose.style.layers.Filter.INITIAL);
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class ModelScaleModeValue {
    ctor public ModelScaleModeValue(com.mapbox.bindgen.Value value);
    ctor public ModelScaleModeValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.ModelScaleModeValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.ModelScaleModeValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.ModelScaleModeValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.ModelScaleModeValue MAP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.ModelScaleModeValue VIEWPORT;
  }

  public static final class ModelScaleModeValue.Companion {
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class ModelTypeValue {
    ctor public ModelTypeValue(com.mapbox.bindgen.Value value);
    ctor public ModelTypeValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.ModelTypeValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.ModelTypeValue COMMON_3D;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.ModelTypeValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.ModelTypeValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.ModelTypeValue LOCATION_INDICATOR;
  }

  public static final class ModelTypeValue.Companion {
  }

  public final class RasterLayerKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void RasterLayer(com.mapbox.maps.extension.compose.style.sources.SourceState sourceState, String layerId = remember({ 
    return generateRandomLayerId("raster")
}), com.mapbox.maps.extension.compose.style.StringValue rasterArrayBand = com.mapbox.maps.extension.compose.style.StringValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue rasterBrightnessMax = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition rasterBrightnessMaxTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue rasterBrightnessMin = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition rasterBrightnessMinTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.ColorValue rasterColor = com.mapbox.maps.extension.compose.style.ColorValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleListValue rasterColorMix = com.mapbox.maps.extension.compose.style.DoubleListValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition rasterColorMixTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleRangeValue rasterColorRange = com.mapbox.maps.extension.compose.style.DoubleRangeValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition rasterColorRangeTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue rasterContrast = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition rasterContrastTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue rasterElevation = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition rasterElevationTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue rasterEmissiveStrength = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition rasterEmissiveStrengthTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue rasterFadeDuration = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue rasterHueRotate = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition rasterHueRotateTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue rasterOpacity = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition rasterOpacityTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.layers.generated.RasterResamplingValue rasterResampling = com.mapbox.maps.extension.compose.style.layers.generated.RasterResamplingValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue rasterSaturation = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition rasterSaturationTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue visibility = com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue.INITIAL, com.mapbox.maps.extension.compose.style.LongValue minZoom = com.mapbox.maps.extension.compose.style.LongValue.INITIAL, com.mapbox.maps.extension.compose.style.LongValue maxZoom = com.mapbox.maps.extension.compose.style.LongValue.INITIAL, com.mapbox.maps.extension.compose.style.StringValue sourceLayer = com.mapbox.maps.extension.compose.style.StringValue.INITIAL, com.mapbox.maps.extension.compose.style.layers.Filter filter = com.mapbox.maps.extension.compose.style.layers.Filter.INITIAL);
  }

  public final class RasterParticleLayerKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void RasterParticleLayer(com.mapbox.maps.extension.compose.style.sources.SourceState sourceState, String layerId = remember({ 
    return generateRandomLayerId("raster-particle")
}), com.mapbox.maps.extension.compose.style.StringValue rasterParticleArrayBand = com.mapbox.maps.extension.compose.style.StringValue.INITIAL, com.mapbox.maps.extension.compose.style.ColorValue rasterParticleColor = com.mapbox.maps.extension.compose.style.ColorValue.INITIAL, com.mapbox.maps.extension.compose.style.LongValue rasterParticleCount = com.mapbox.maps.extension.compose.style.LongValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue rasterParticleFadeOpacityFactor = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition rasterParticleFadeOpacityFactorTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue rasterParticleMaxSpeed = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue rasterParticleResetRateFactor = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue rasterParticleSpeedFactor = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition rasterParticleSpeedFactorTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue visibility = com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue.INITIAL, com.mapbox.maps.extension.compose.style.LongValue minZoom = com.mapbox.maps.extension.compose.style.LongValue.INITIAL, com.mapbox.maps.extension.compose.style.LongValue maxZoom = com.mapbox.maps.extension.compose.style.LongValue.INITIAL, com.mapbox.maps.extension.compose.style.StringValue sourceLayer = com.mapbox.maps.extension.compose.style.StringValue.INITIAL, com.mapbox.maps.extension.compose.style.layers.Filter filter = com.mapbox.maps.extension.compose.style.layers.Filter.INITIAL);
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class RasterResamplingValue {
    ctor public RasterResamplingValue(com.mapbox.bindgen.Value value);
    ctor public RasterResamplingValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.RasterResamplingValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.RasterResamplingValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.RasterResamplingValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.RasterResamplingValue LINEAR;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.RasterResamplingValue NEAREST;
  }

  public static final class RasterResamplingValue.Companion {
  }

  public final class SkyLayerKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void SkyLayer(String layerId = remember({ 
    return generateRandomLayerId("sky")
}), com.mapbox.maps.extension.compose.style.ColorValue skyAtmosphereColor = com.mapbox.maps.extension.compose.style.ColorValue.INITIAL, com.mapbox.maps.extension.compose.style.ColorValue skyAtmosphereHaloColor = com.mapbox.maps.extension.compose.style.ColorValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleListValue skyAtmosphereSun = com.mapbox.maps.extension.compose.style.DoubleListValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue skyAtmosphereSunIntensity = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.ColorValue skyGradient = com.mapbox.maps.extension.compose.style.ColorValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleListValue skyGradientCenter = com.mapbox.maps.extension.compose.style.DoubleListValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue skyGradientRadius = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue skyOpacity = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition skyOpacityTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.layers.generated.SkyTypeValue skyType = com.mapbox.maps.extension.compose.style.layers.generated.SkyTypeValue.INITIAL, com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue visibility = com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue.INITIAL, com.mapbox.maps.extension.compose.style.LongValue minZoom = com.mapbox.maps.extension.compose.style.LongValue.INITIAL, com.mapbox.maps.extension.compose.style.LongValue maxZoom = com.mapbox.maps.extension.compose.style.LongValue.INITIAL, com.mapbox.maps.extension.compose.style.StringValue sourceLayer = com.mapbox.maps.extension.compose.style.StringValue.INITIAL, com.mapbox.maps.extension.compose.style.layers.Filter filter = com.mapbox.maps.extension.compose.style.layers.Filter.INITIAL);
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class SkyTypeValue {
    ctor public SkyTypeValue(com.mapbox.bindgen.Value value);
    ctor public SkyTypeValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.SkyTypeValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SkyTypeValue ATMOSPHERE;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SkyTypeValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SkyTypeValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SkyTypeValue GRADIENT;
  }

  public static final class SkyTypeValue.Companion {
  }

  public final class SymbolLayerKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void SymbolLayer(com.mapbox.maps.extension.compose.style.sources.SourceState sourceState, String layerId = remember({ 
    return generateRandomLayerId("symbol")
}), com.mapbox.maps.extension.compose.style.BooleanValue iconAllowOverlap = com.mapbox.maps.extension.compose.style.BooleanValue.INITIAL, com.mapbox.maps.extension.compose.style.layers.generated.IconAnchorValue iconAnchor = com.mapbox.maps.extension.compose.style.layers.generated.IconAnchorValue.INITIAL, com.mapbox.maps.extension.compose.style.BooleanValue iconIgnorePlacement = com.mapbox.maps.extension.compose.style.BooleanValue.INITIAL, com.mapbox.maps.extension.compose.style.layers.ImageValue iconImage = com.mapbox.maps.extension.compose.style.layers.ImageValue.INITIAL, com.mapbox.maps.extension.compose.style.BooleanValue iconKeepUpright = com.mapbox.maps.extension.compose.style.BooleanValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleListValue iconOffset = com.mapbox.maps.extension.compose.style.DoubleListValue.INITIAL, com.mapbox.maps.extension.compose.style.BooleanValue iconOptional = com.mapbox.maps.extension.compose.style.BooleanValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue iconPadding = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.layers.generated.IconPitchAlignmentValue iconPitchAlignment = com.mapbox.maps.extension.compose.style.layers.generated.IconPitchAlignmentValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue iconRotate = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.layers.generated.IconRotationAlignmentValue iconRotationAlignment = com.mapbox.maps.extension.compose.style.layers.generated.IconRotationAlignmentValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue iconSize = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.layers.generated.IconTextFitValue iconTextFit = com.mapbox.maps.extension.compose.style.layers.generated.IconTextFitValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleListValue iconTextFitPadding = com.mapbox.maps.extension.compose.style.DoubleListValue.INITIAL, com.mapbox.maps.extension.compose.style.BooleanValue symbolAvoidEdges = com.mapbox.maps.extension.compose.style.BooleanValue.INITIAL, com.mapbox.maps.extension.compose.style.layers.generated.SymbolPlacementValue symbolPlacement = com.mapbox.maps.extension.compose.style.layers.generated.SymbolPlacementValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue symbolSortKey = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue symbolSpacing = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.BooleanValue symbolZElevate = com.mapbox.maps.extension.compose.style.BooleanValue.INITIAL, com.mapbox.maps.extension.compose.style.layers.generated.SymbolZOrderValue symbolZOrder = com.mapbox.maps.extension.compose.style.layers.generated.SymbolZOrderValue.INITIAL, com.mapbox.maps.extension.compose.style.BooleanValue textAllowOverlap = com.mapbox.maps.extension.compose.style.BooleanValue.INITIAL, com.mapbox.maps.extension.compose.style.layers.generated.TextAnchorValue textAnchor = com.mapbox.maps.extension.compose.style.layers.generated.TextAnchorValue.INITIAL, com.mapbox.maps.extension.compose.style.layers.FormattedValue textField = com.mapbox.maps.extension.compose.style.layers.FormattedValue.INITIAL, com.mapbox.maps.extension.compose.style.StringListValue textFont = com.mapbox.maps.extension.compose.style.StringListValue.INITIAL, com.mapbox.maps.extension.compose.style.BooleanValue textIgnorePlacement = com.mapbox.maps.extension.compose.style.BooleanValue.INITIAL, com.mapbox.maps.extension.compose.style.layers.generated.TextJustifyValue textJustify = com.mapbox.maps.extension.compose.style.layers.generated.TextJustifyValue.INITIAL, com.mapbox.maps.extension.compose.style.BooleanValue textKeepUpright = com.mapbox.maps.extension.compose.style.BooleanValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue textLetterSpacing = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue textLineHeight = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue textMaxAngle = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue textMaxWidth = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleListValue textOffset = com.mapbox.maps.extension.compose.style.DoubleListValue.INITIAL, com.mapbox.maps.extension.compose.style.BooleanValue textOptional = com.mapbox.maps.extension.compose.style.BooleanValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue textPadding = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.layers.generated.TextPitchAlignmentValue textPitchAlignment = com.mapbox.maps.extension.compose.style.layers.generated.TextPitchAlignmentValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue textRadialOffset = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue textRotate = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.layers.generated.TextRotationAlignmentValue textRotationAlignment = com.mapbox.maps.extension.compose.style.layers.generated.TextRotationAlignmentValue.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue textSize = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.layers.generated.TextTransformValue textTransform = com.mapbox.maps.extension.compose.style.layers.generated.TextTransformValue.INITIAL, com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchorListValue textVariableAnchor = com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchorListValue.INITIAL, com.mapbox.maps.extension.compose.style.layers.generated.TextWritingModeListValue textWritingMode = com.mapbox.maps.extension.compose.style.layers.generated.TextWritingModeListValue.INITIAL, com.mapbox.maps.extension.compose.style.ColorValue iconColor = com.mapbox.maps.extension.compose.style.ColorValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition iconColorTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue iconColorSaturation = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition iconColorSaturationTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue iconEmissiveStrength = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition iconEmissiveStrengthTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue iconHaloBlur = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition iconHaloBlurTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.ColorValue iconHaloColor = com.mapbox.maps.extension.compose.style.ColorValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition iconHaloColorTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue iconHaloWidth = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition iconHaloWidthTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue iconImageCrossFade = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition iconImageCrossFadeTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue iconOcclusionOpacity = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition iconOcclusionOpacityTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue iconOpacity = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition iconOpacityTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleListValue iconTranslate = com.mapbox.maps.extension.compose.style.DoubleListValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition iconTranslateTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.layers.generated.IconTranslateAnchorValue iconTranslateAnchor = com.mapbox.maps.extension.compose.style.layers.generated.IconTranslateAnchorValue.INITIAL, com.mapbox.maps.extension.compose.style.ColorValue textColor = com.mapbox.maps.extension.compose.style.ColorValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition textColorTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue textEmissiveStrength = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition textEmissiveStrengthTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue textHaloBlur = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition textHaloBlurTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.ColorValue textHaloColor = com.mapbox.maps.extension.compose.style.ColorValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition textHaloColorTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue textHaloWidth = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition textHaloWidthTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue textOcclusionOpacity = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition textOcclusionOpacityTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleValue textOpacity = com.mapbox.maps.extension.compose.style.DoubleValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition textOpacityTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.DoubleListValue textTranslate = com.mapbox.maps.extension.compose.style.DoubleListValue.INITIAL, com.mapbox.maps.extension.compose.style.Transition textTranslateTransition = com.mapbox.maps.extension.compose.style.Transition.INITIAL, com.mapbox.maps.extension.compose.style.layers.generated.TextTranslateAnchorValue textTranslateAnchor = com.mapbox.maps.extension.compose.style.layers.generated.TextTranslateAnchorValue.INITIAL, com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue visibility = com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue.INITIAL, com.mapbox.maps.extension.compose.style.LongValue minZoom = com.mapbox.maps.extension.compose.style.LongValue.INITIAL, com.mapbox.maps.extension.compose.style.LongValue maxZoom = com.mapbox.maps.extension.compose.style.LongValue.INITIAL, com.mapbox.maps.extension.compose.style.StringValue sourceLayer = com.mapbox.maps.extension.compose.style.StringValue.INITIAL, com.mapbox.maps.extension.compose.style.layers.Filter filter = com.mapbox.maps.extension.compose.style.layers.Filter.INITIAL);
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class SymbolPlacementValue {
    ctor public SymbolPlacementValue(com.mapbox.bindgen.Value value);
    ctor public SymbolPlacementValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.SymbolPlacementValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SymbolPlacementValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SymbolPlacementValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SymbolPlacementValue LINE;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SymbolPlacementValue LINE_CENTER;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SymbolPlacementValue POINT;
  }

  public static final class SymbolPlacementValue.Companion {
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class SymbolZOrderValue {
    ctor public SymbolZOrderValue(com.mapbox.bindgen.Value value);
    ctor public SymbolZOrderValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.SymbolZOrderValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SymbolZOrderValue AUTO;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SymbolZOrderValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SymbolZOrderValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SymbolZOrderValue SOURCE;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SymbolZOrderValue VIEWPORT_Y;
  }

  public static final class SymbolZOrderValue.Companion {
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TextAnchorValue {
    ctor public TextAnchorValue(com.mapbox.bindgen.Value value);
    ctor public TextAnchorValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextAnchorValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextAnchorValue BOTTOM;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextAnchorValue BOTTOM_LEFT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextAnchorValue BOTTOM_RIGHT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextAnchorValue CENTER;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextAnchorValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextAnchorValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextAnchorValue LEFT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextAnchorValue RIGHT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextAnchorValue TOP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextAnchorValue TOP_LEFT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextAnchorValue TOP_RIGHT;
  }

  public static final class TextAnchorValue.Companion {
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TextJustifyValue {
    ctor public TextJustifyValue(com.mapbox.bindgen.Value value);
    ctor public TextJustifyValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextJustifyValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextJustifyValue AUTO;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextJustifyValue CENTER;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextJustifyValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextJustifyValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextJustifyValue LEFT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextJustifyValue RIGHT;
  }

  public static final class TextJustifyValue.Companion {
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TextPitchAlignmentValue {
    ctor public TextPitchAlignmentValue(com.mapbox.bindgen.Value value);
    ctor public TextPitchAlignmentValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextPitchAlignmentValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextPitchAlignmentValue AUTO;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextPitchAlignmentValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextPitchAlignmentValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextPitchAlignmentValue MAP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextPitchAlignmentValue VIEWPORT;
  }

  public static final class TextPitchAlignmentValue.Companion {
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TextRotationAlignmentValue {
    ctor public TextRotationAlignmentValue(com.mapbox.bindgen.Value value);
    ctor public TextRotationAlignmentValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextRotationAlignmentValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextRotationAlignmentValue AUTO;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextRotationAlignmentValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextRotationAlignmentValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextRotationAlignmentValue MAP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextRotationAlignmentValue VIEWPORT;
  }

  public static final class TextRotationAlignmentValue.Companion {
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TextTransformValue {
    ctor public TextTransformValue(com.mapbox.bindgen.Value value);
    ctor public TextTransformValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextTransformValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextTransformValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextTransformValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextTransformValue LOWERCASE;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextTransformValue NONE;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextTransformValue UPPERCASE;
  }

  public static final class TextTransformValue.Companion {
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TextTranslateAnchorValue {
    ctor public TextTranslateAnchorValue(com.mapbox.bindgen.Value value);
    ctor public TextTranslateAnchorValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextTranslateAnchorValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextTranslateAnchorValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextTranslateAnchorValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextTranslateAnchorValue MAP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextTranslateAnchorValue VIEWPORT;
  }

  public static final class TextTranslateAnchorValue.Companion {
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TextVariableAnchor {
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchor copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchor BOTTOM;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchor BOTTOM_LEFT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchor BOTTOM_RIGHT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchor CENTER;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchor.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchor LEFT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchor RIGHT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchor TOP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchor TOP_LEFT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchor TOP_RIGHT;
  }

  public static final class TextVariableAnchor.Companion {
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TextVariableAnchorListValue {
    ctor public TextVariableAnchorListValue(com.mapbox.bindgen.Value value);
    ctor public TextVariableAnchorListValue(java.util.List<com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchor> value);
    ctor public TextVariableAnchorListValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchorListValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchorListValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchorListValue DEFAULT;
  }

  public static final class TextVariableAnchorListValue.Companion {
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TextWritingMode {
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextWritingMode copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextWritingMode.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextWritingMode HORIZONTAL;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextWritingMode VERTICAL;
  }

  public static final class TextWritingMode.Companion {
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TextWritingModeListValue {
    ctor public TextWritingModeListValue(com.mapbox.bindgen.Value value);
    ctor public TextWritingModeListValue(java.util.List<com.mapbox.maps.extension.compose.style.layers.generated.TextWritingMode> value);
    ctor public TextWritingModeListValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextWritingModeListValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextWritingModeListValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextWritingModeListValue DEFAULT;
  }

  public static final class TextWritingModeListValue.Companion {
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class VisibilityValue {
    ctor public VisibilityValue(com.mapbox.bindgen.Value value);
    ctor public VisibilityValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue NONE;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue VISIBLE;
  }

  public static final class VisibilityValue.Companion {
  }

}

package com.mapbox.maps.extension.compose.style.lights {

  @com.mapbox.maps.MapboxExperimental public final class LightsState {
    ctor public LightsState(com.mapbox.maps.extension.compose.style.lights.generated.DirectionalLightState directionalLightState, com.mapbox.maps.extension.compose.style.lights.generated.AmbientLightState ambientLightState);
    ctor public LightsState(com.mapbox.maps.extension.compose.style.lights.generated.FlatLightState flatLightState);
    field public static final com.mapbox.maps.extension.compose.style.lights.LightsState.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.lights.LightsState DEFAULT;
  }

  public static final class LightsState.Companion {
  }

}

package com.mapbox.maps.extension.compose.style.lights.generated {

  @com.mapbox.maps.MapboxExperimental public final class AmbientLightState {
    ctor public AmbientLightState(String id = generateRandomLightId("ambient"));
    method public com.mapbox.maps.extension.compose.style.ColorValue getColor();
    method public com.mapbox.maps.extension.compose.style.Transition getColorTransition();
    method public String getId();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getIntensity();
    method public com.mapbox.maps.extension.compose.style.Transition getIntensityTransition();
    method public void setColor(com.mapbox.maps.extension.compose.style.ColorValue);
    method public void setColorTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setIntensity(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setIntensityTransition(com.mapbox.maps.extension.compose.style.Transition);
    property public final com.mapbox.maps.extension.compose.style.ColorValue color;
    property public final com.mapbox.maps.extension.compose.style.Transition colorTransition;
    property public final String id;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue intensity;
    property public final com.mapbox.maps.extension.compose.style.Transition intensityTransition;
    field public static final com.mapbox.maps.extension.compose.style.lights.generated.AmbientLightState.Companion Companion;
  }

  public static final class AmbientLightState.Companion {
    method public androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.style.lights.generated.AmbientLightState,com.mapbox.maps.extension.compose.style.lights.generated.AmbientLightState.Holder> getSaver();
    property public final androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.style.lights.generated.AmbientLightState,com.mapbox.maps.extension.compose.style.lights.generated.AmbientLightState.Holder> Saver;
  }

  @com.mapbox.maps.MapboxExperimental @kotlinx.parcelize.Parcelize @kotlinx.parcelize.TypeParceler public static final class AmbientLightState.Holder implements android.os.Parcelable {
    ctor public AmbientLightState.Holder(java.util.Map<java.lang.String,? extends com.mapbox.bindgen.Value> savedProperties);
    method public java.util.Map<java.lang.String,com.mapbox.bindgen.Value> component1();
    method public com.mapbox.maps.extension.compose.style.lights.generated.AmbientLightState.Holder copy(java.util.Map<java.lang.String,? extends com.mapbox.bindgen.Value> savedProperties);
    method public java.util.Map<java.lang.String,com.mapbox.bindgen.Value> getSavedProperties();
    property public final java.util.Map<java.lang.String,com.mapbox.bindgen.Value> savedProperties;
  }

  public final class AmbientLightStateKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental public static inline com.mapbox.maps.extension.compose.style.lights.generated.AmbientLightState rememberAmbientLightState(String id = remember({ 
    return generateRandomLightId("ambient")
}), String? key = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.lights.generated.AmbientLightState,kotlin.Unit> init = {});
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class AnchorValue {
    ctor public AnchorValue(com.mapbox.bindgen.Value value);
    ctor public AnchorValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.lights.generated.AnchorValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.lights.generated.AnchorValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.lights.generated.AnchorValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.lights.generated.AnchorValue MAP;
    field public static final com.mapbox.maps.extension.compose.style.lights.generated.AnchorValue VIEWPORT;
  }

  public static final class AnchorValue.Companion {
  }

  @com.mapbox.maps.MapboxExperimental public final class DirectionalLightState {
    ctor public DirectionalLightState(String id = generateRandomLightId("directional"));
    method public com.mapbox.maps.extension.compose.style.BooleanValue getCastShadows();
    method public com.mapbox.maps.extension.compose.style.ColorValue getColor();
    method public com.mapbox.maps.extension.compose.style.Transition getColorTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleListValue getDirection();
    method public com.mapbox.maps.extension.compose.style.Transition getDirectionTransition();
    method public String getId();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getIntensity();
    method public com.mapbox.maps.extension.compose.style.Transition getIntensityTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getShadowIntensity();
    method public com.mapbox.maps.extension.compose.style.Transition getShadowIntensityTransition();
    method public void setCastShadows(com.mapbox.maps.extension.compose.style.BooleanValue);
    method public void setColor(com.mapbox.maps.extension.compose.style.ColorValue);
    method public void setColorTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setDirection(com.mapbox.maps.extension.compose.style.DoubleListValue);
    method public void setDirectionTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setIntensity(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setIntensityTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setShadowIntensity(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setShadowIntensityTransition(com.mapbox.maps.extension.compose.style.Transition);
    property public final com.mapbox.maps.extension.compose.style.BooleanValue castShadows;
    property public final com.mapbox.maps.extension.compose.style.ColorValue color;
    property public final com.mapbox.maps.extension.compose.style.Transition colorTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleListValue direction;
    property public final com.mapbox.maps.extension.compose.style.Transition directionTransition;
    property public final String id;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue intensity;
    property public final com.mapbox.maps.extension.compose.style.Transition intensityTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue shadowIntensity;
    property public final com.mapbox.maps.extension.compose.style.Transition shadowIntensityTransition;
    field public static final com.mapbox.maps.extension.compose.style.lights.generated.DirectionalLightState.Companion Companion;
  }

  public static final class DirectionalLightState.Companion {
    method public androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.style.lights.generated.DirectionalLightState,com.mapbox.maps.extension.compose.style.lights.generated.DirectionalLightState.Holder> getSaver();
    property public final androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.style.lights.generated.DirectionalLightState,com.mapbox.maps.extension.compose.style.lights.generated.DirectionalLightState.Holder> Saver;
  }

  @com.mapbox.maps.MapboxExperimental @kotlinx.parcelize.Parcelize @kotlinx.parcelize.TypeParceler public static final class DirectionalLightState.Holder implements android.os.Parcelable {
    ctor public DirectionalLightState.Holder(java.util.Map<java.lang.String,? extends com.mapbox.bindgen.Value> savedProperties);
    method public java.util.Map<java.lang.String,com.mapbox.bindgen.Value> component1();
    method public com.mapbox.maps.extension.compose.style.lights.generated.DirectionalLightState.Holder copy(java.util.Map<java.lang.String,? extends com.mapbox.bindgen.Value> savedProperties);
    method public java.util.Map<java.lang.String,com.mapbox.bindgen.Value> getSavedProperties();
    property public final java.util.Map<java.lang.String,com.mapbox.bindgen.Value> savedProperties;
  }

  public final class DirectionalLightStateKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental public static inline com.mapbox.maps.extension.compose.style.lights.generated.DirectionalLightState rememberDirectionalLightState(String id = remember({ 
    return generateRandomLightId("directional")
}), String? key = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.lights.generated.DirectionalLightState,kotlin.Unit> init = {});
  }

  @com.mapbox.maps.MapboxExperimental public final class FlatLightState {
    ctor public FlatLightState(String id = generateRandomLightId("flat"));
    method public com.mapbox.maps.extension.compose.style.lights.generated.AnchorValue getAnchor();
    method public com.mapbox.maps.extension.compose.style.ColorValue getColor();
    method public com.mapbox.maps.extension.compose.style.Transition getColorTransition();
    method public String getId();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getIntensity();
    method public com.mapbox.maps.extension.compose.style.Transition getIntensityTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleListValue getPosition();
    method public com.mapbox.maps.extension.compose.style.Transition getPositionTransition();
    method public void setAnchor(com.mapbox.maps.extension.compose.style.lights.generated.AnchorValue);
    method public void setColor(com.mapbox.maps.extension.compose.style.ColorValue);
    method public void setColorTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setIntensity(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setIntensityTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setPosition(com.mapbox.maps.extension.compose.style.DoubleListValue);
    method public void setPositionTransition(com.mapbox.maps.extension.compose.style.Transition);
    property public final com.mapbox.maps.extension.compose.style.lights.generated.AnchorValue anchor;
    property public final com.mapbox.maps.extension.compose.style.ColorValue color;
    property public final com.mapbox.maps.extension.compose.style.Transition colorTransition;
    property public final String id;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue intensity;
    property public final com.mapbox.maps.extension.compose.style.Transition intensityTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleListValue position;
    property public final com.mapbox.maps.extension.compose.style.Transition positionTransition;
    field public static final com.mapbox.maps.extension.compose.style.lights.generated.FlatLightState.Companion Companion;
  }

  public static final class FlatLightState.Companion {
    method public androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.style.lights.generated.FlatLightState,com.mapbox.maps.extension.compose.style.lights.generated.FlatLightState.Holder> getSaver();
    property public final androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.style.lights.generated.FlatLightState,com.mapbox.maps.extension.compose.style.lights.generated.FlatLightState.Holder> Saver;
  }

  @com.mapbox.maps.MapboxExperimental @kotlinx.parcelize.Parcelize @kotlinx.parcelize.TypeParceler public static final class FlatLightState.Holder implements android.os.Parcelable {
    ctor public FlatLightState.Holder(java.util.Map<java.lang.String,? extends com.mapbox.bindgen.Value> savedProperties);
    method public java.util.Map<java.lang.String,com.mapbox.bindgen.Value> component1();
    method public com.mapbox.maps.extension.compose.style.lights.generated.FlatLightState.Holder copy(java.util.Map<java.lang.String,? extends com.mapbox.bindgen.Value> savedProperties);
    method public java.util.Map<java.lang.String,com.mapbox.bindgen.Value> getSavedProperties();
    property public final java.util.Map<java.lang.String,com.mapbox.bindgen.Value> savedProperties;
  }

  public final class FlatLightStateKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental public static inline com.mapbox.maps.extension.compose.style.lights.generated.FlatLightState rememberFlatLightState(String id = remember({ 
    return generateRandomLightId("flat")
}), String? key = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.lights.generated.FlatLightState,kotlin.Unit> init = {});
  }

}

package com.mapbox.maps.extension.compose.style.projection.generated {

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class Projection {
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.projection.generated.Projection copy(com.mapbox.bindgen.Value value);
    method public String? getProjectionNameOrNull();
    method public com.mapbox.bindgen.Value getValue();
    property public final String? projectionNameOrNull;
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.projection.generated.Projection.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.projection.generated.Projection DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.projection.generated.Projection GLOBE;
    field public static final com.mapbox.maps.extension.compose.style.projection.generated.Projection MERCATOR;
  }

  public static final class Projection.Companion {
  }

}

package com.mapbox.maps.extension.compose.style.sources {

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class ClusterProperties {
    ctor public ClusterProperties(com.mapbox.bindgen.Value value);
    ctor public ClusterProperties(java.util.HashMap<java.lang.String,java.lang.Object> value);
    ctor public ClusterProperties(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.sources.ClusterProperties copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.sources.ClusterProperties.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.sources.ClusterProperties DEFAULT;
  }

  public static final class ClusterProperties.Companion {
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class GeoJSONData {
    ctor public GeoJSONData(com.mapbox.maps.GeoJSONSourceData data);
    ctor public GeoJSONData(String value);
    ctor public GeoJSONData(com.mapbox.geojson.Feature value);
    ctor public GeoJSONData(java.util.List<com.mapbox.geojson.Feature> value);
    ctor public GeoJSONData(com.mapbox.geojson.Geometry value);
    method public com.mapbox.maps.extension.compose.style.sources.GeoJSONData copy(com.mapbox.maps.GeoJSONSourceData data);
    field public static final com.mapbox.maps.extension.compose.style.sources.GeoJSONData.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.sources.GeoJSONData DEFAULT;
  }

  public static final class GeoJSONData.Companion {
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class PromoteIdValue {
    ctor public PromoteIdValue(com.mapbox.bindgen.Value value);
    ctor public PromoteIdValue(String propertyName, String? sourceId = null);
    ctor public PromoteIdValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.sources.PromoteIdValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.sources.PromoteIdValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.sources.PromoteIdValue DEFAULT;
  }

  public static final class PromoteIdValue.Companion {
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class RasterLayers {
    ctor public RasterLayers(com.mapbox.bindgen.Value value);
    ctor public RasterLayers(java.util.List<com.mapbox.maps.extension.style.sources.generated.RasterArraySource.RasterDataLayer> value);
    ctor public RasterLayers(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.sources.RasterLayers copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.sources.RasterLayers.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.sources.RasterLayers DEFAULT;
  }

  public static final class RasterLayers.Companion {
  }

  @com.mapbox.maps.MapboxExperimental public abstract class SourceState {
    method protected final com.mapbox.maps.extension.compose.style.sources.GeoJSONData getGeoJSONData();
    method protected final com.mapbox.bindgen.Value? getProperty(String name);
    method public final String getSourceId();
    method protected final void setGeoJSONData(com.mapbox.maps.extension.compose.style.sources.GeoJSONData);
    property protected final com.mapbox.maps.extension.compose.style.sources.GeoJSONData geoJSONData;
    property public final String sourceId;
  }

  @com.mapbox.maps.MapboxExperimental @kotlinx.parcelize.Parcelize @kotlinx.parcelize.TypeParceler @kotlinx.parcelize.TypeParceler @kotlinx.parcelize.TypeParceler public static final class SourceState.Holder implements android.os.Parcelable {
    ctor public SourceState.Holder(String sourcedId, java.util.Map<java.lang.String,? extends kotlin.Pair<java.lang.Boolean,? extends com.mapbox.bindgen.Value>> savedProperties, com.mapbox.maps.extension.compose.style.sources.GeoJSONData geoJSONData);
    method public String component1();
    method public java.util.Map<java.lang.String,kotlin.Pair<java.lang.Boolean,com.mapbox.bindgen.Value>> component2();
    method public com.mapbox.maps.extension.compose.style.sources.GeoJSONData component3();
    method public com.mapbox.maps.extension.compose.style.sources.SourceState.Holder copy(String sourcedId, java.util.Map<java.lang.String,? extends kotlin.Pair<java.lang.Boolean,? extends com.mapbox.bindgen.Value>> savedProperties, com.mapbox.maps.extension.compose.style.sources.GeoJSONData geoJSONData);
    method public com.mapbox.maps.extension.compose.style.sources.GeoJSONData getGeoJSONData();
    method public java.util.Map<java.lang.String,kotlin.Pair<java.lang.Boolean,com.mapbox.bindgen.Value>> getSavedProperties();
    method public String getSourcedId();
    property public final com.mapbox.maps.extension.compose.style.sources.GeoJSONData geoJSONData;
    property public final java.util.Map<java.lang.String,kotlin.Pair<java.lang.Boolean,com.mapbox.bindgen.Value>> savedProperties;
    property public final String sourcedId;
  }

  public final class SourceStateKt {
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class TileCacheBudget {
    ctor public TileCacheBudget(com.mapbox.bindgen.Value value);
    ctor public TileCacheBudget(com.mapbox.maps.TileCacheBudgetInMegabytes value);
    ctor public TileCacheBudget(com.mapbox.maps.TileCacheBudgetInTiles value);
    ctor public TileCacheBudget(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.sources.TileCacheBudget copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.sources.TileCacheBudget.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.sources.TileCacheBudget DEFAULT;
  }

  public static final class TileCacheBudget.Companion {
  }

}

package com.mapbox.maps.extension.compose.style.sources.generated {

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class EncodingValue {
    ctor public EncodingValue(com.mapbox.bindgen.Value value);
    ctor public EncodingValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.sources.generated.EncodingValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.EncodingValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.EncodingValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.EncodingValue MAPBOX;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.EncodingValue TERRARIUM;
  }

  public static final class EncodingValue.Companion {
  }

  @com.mapbox.maps.MapboxExperimental public final class GeoJsonSourceState extends com.mapbox.maps.extension.compose.style.sources.SourceState {
    ctor public GeoJsonSourceState(String sourceId = generateRandomSourceId("geojson"));
    method public com.mapbox.maps.extension.compose.style.StringValue getAttribution();
    method public com.mapbox.maps.extension.compose.style.LongValue getBuffer();
    method public com.mapbox.maps.extension.compose.style.BooleanValue getCluster();
    method public com.mapbox.maps.extension.compose.style.LongValue getClusterMaxZoom();
    method public com.mapbox.maps.extension.compose.style.LongValue getClusterMinPoints();
    method public com.mapbox.maps.extension.compose.style.sources.ClusterProperties getClusterProperties();
    method public com.mapbox.maps.extension.compose.style.LongValue getClusterRadius();
    method public com.mapbox.maps.extension.compose.style.sources.GeoJSONData getData();
    method public com.mapbox.maps.extension.compose.style.BooleanValue getGenerateId();
    method public com.mapbox.maps.extension.compose.style.BooleanValue getLineMetrics();
    method public com.mapbox.maps.extension.compose.style.LongValue getMaxZoom();
    method public com.mapbox.maps.extension.compose.style.LongValue getPrefetchZoomDelta();
    method public com.mapbox.maps.extension.compose.style.sources.PromoteIdValue getPromoteId();
    method public com.mapbox.maps.extension.compose.style.sources.TileCacheBudget getTileCacheBudget();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getTolerance();
    method public void setAttribution(com.mapbox.maps.extension.compose.style.StringValue);
    method public void setBuffer(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setCluster(com.mapbox.maps.extension.compose.style.BooleanValue);
    method public void setClusterMaxZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setClusterMinPoints(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setClusterProperties(com.mapbox.maps.extension.compose.style.sources.ClusterProperties);
    method public void setClusterRadius(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setData(com.mapbox.maps.extension.compose.style.sources.GeoJSONData);
    method public void setGenerateId(com.mapbox.maps.extension.compose.style.BooleanValue);
    method public void setLineMetrics(com.mapbox.maps.extension.compose.style.BooleanValue);
    method public void setMaxZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setPrefetchZoomDelta(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setPromoteId(com.mapbox.maps.extension.compose.style.sources.PromoteIdValue);
    method public void setTileCacheBudget(com.mapbox.maps.extension.compose.style.sources.TileCacheBudget);
    method public void setTolerance(com.mapbox.maps.extension.compose.style.DoubleValue);
    property public final com.mapbox.maps.extension.compose.style.StringValue attribution;
    property public final com.mapbox.maps.extension.compose.style.LongValue buffer;
    property public final com.mapbox.maps.extension.compose.style.BooleanValue cluster;
    property public final com.mapbox.maps.extension.compose.style.LongValue clusterMaxZoom;
    property public final com.mapbox.maps.extension.compose.style.LongValue clusterMinPoints;
    property public final com.mapbox.maps.extension.compose.style.sources.ClusterProperties clusterProperties;
    property public final com.mapbox.maps.extension.compose.style.LongValue clusterRadius;
    property public final com.mapbox.maps.extension.compose.style.sources.GeoJSONData data;
    property public final com.mapbox.maps.extension.compose.style.BooleanValue generateId;
    property public final com.mapbox.maps.extension.compose.style.BooleanValue lineMetrics;
    property public final com.mapbox.maps.extension.compose.style.LongValue maxZoom;
    property public final com.mapbox.maps.extension.compose.style.LongValue prefetchZoomDelta;
    property public final com.mapbox.maps.extension.compose.style.sources.PromoteIdValue promoteId;
    property public final com.mapbox.maps.extension.compose.style.sources.TileCacheBudget tileCacheBudget;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue tolerance;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.GeoJsonSourceState.Companion Companion;
  }

  public static final class GeoJsonSourceState.Companion {
    method public androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.style.sources.generated.GeoJsonSourceState,com.mapbox.maps.extension.compose.style.sources.SourceState.Holder> getSaver();
    property public final androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.style.sources.generated.GeoJsonSourceState,com.mapbox.maps.extension.compose.style.sources.SourceState.Holder> Saver;
  }

  public final class GeoJsonSourceStateKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental public static inline com.mapbox.maps.extension.compose.style.sources.generated.GeoJsonSourceState rememberGeoJsonSourceState(String? key = null, String sourceId = remember({ 
    return generateRandomSourceId("geojson")
}), kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.sources.generated.GeoJsonSourceState,kotlin.Unit> init = {});
  }

  @com.mapbox.maps.MapboxExperimental public final class ImageSourceState extends com.mapbox.maps.extension.compose.style.sources.SourceState {
    ctor public ImageSourceState(String sourceId = generateRandomSourceId("image"));
    method public com.mapbox.maps.extension.compose.style.PointListValue getCoordinates();
    method public com.mapbox.maps.extension.compose.style.LongValue getPrefetchZoomDelta();
    method public com.mapbox.maps.extension.compose.style.StringValue getUrl();
    method public void setCoordinates(com.mapbox.maps.extension.compose.style.PointListValue);
    method public void setPrefetchZoomDelta(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setUrl(com.mapbox.maps.extension.compose.style.StringValue);
    property public final com.mapbox.maps.extension.compose.style.PointListValue coordinates;
    property public final com.mapbox.maps.extension.compose.style.LongValue prefetchZoomDelta;
    property public final com.mapbox.maps.extension.compose.style.StringValue url;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.ImageSourceState.Companion Companion;
  }

  public static final class ImageSourceState.Companion {
    method public androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.style.sources.generated.ImageSourceState,com.mapbox.maps.extension.compose.style.sources.SourceState.Holder> getSaver();
    property public final androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.style.sources.generated.ImageSourceState,com.mapbox.maps.extension.compose.style.sources.SourceState.Holder> Saver;
  }

  public final class ImageSourceStateKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental public static inline com.mapbox.maps.extension.compose.style.sources.generated.ImageSourceState rememberImageSourceState(String? key = null, String sourceId = remember({ 
    return generateRandomSourceId("image")
}), kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.sources.generated.ImageSourceState,kotlin.Unit> init = {});
  }

  @com.mapbox.maps.MapboxExperimental public final class RasterArraySourceState extends com.mapbox.maps.extension.compose.style.sources.SourceState {
    ctor public RasterArraySourceState(String sourceId = generateRandomSourceId("raster-array"));
    method public com.mapbox.maps.extension.compose.style.StringValue getAttribution();
    method public com.mapbox.maps.extension.compose.style.DoubleListValue getBounds();
    method public com.mapbox.maps.extension.compose.style.LongValue getMaxZoom();
    method public com.mapbox.maps.extension.compose.style.LongValue getMinZoom();
    method public com.mapbox.maps.extension.compose.style.sources.RasterLayers getRasterLayers();
    method public com.mapbox.maps.extension.compose.style.sources.TileCacheBudget getTileCacheBudget();
    method public com.mapbox.maps.extension.compose.style.LongValue getTileSize();
    method public com.mapbox.maps.extension.compose.style.StringListValue getTiles();
    method public com.mapbox.maps.extension.compose.style.StringValue getUrl();
    method public void setAttribution(com.mapbox.maps.extension.compose.style.StringValue);
    method public void setBounds(com.mapbox.maps.extension.compose.style.DoubleListValue);
    method public void setMaxZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setMinZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setRasterLayers(com.mapbox.maps.extension.compose.style.sources.RasterLayers);
    method public void setTileCacheBudget(com.mapbox.maps.extension.compose.style.sources.TileCacheBudget);
    method public void setTileSize(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setTiles(com.mapbox.maps.extension.compose.style.StringListValue);
    method public void setUrl(com.mapbox.maps.extension.compose.style.StringValue);
    property public final com.mapbox.maps.extension.compose.style.StringValue attribution;
    property public final com.mapbox.maps.extension.compose.style.DoubleListValue bounds;
    property public final com.mapbox.maps.extension.compose.style.LongValue maxZoom;
    property public final com.mapbox.maps.extension.compose.style.LongValue minZoom;
    property public final com.mapbox.maps.extension.compose.style.sources.RasterLayers rasterLayers;
    property public final com.mapbox.maps.extension.compose.style.sources.TileCacheBudget tileCacheBudget;
    property public final com.mapbox.maps.extension.compose.style.LongValue tileSize;
    property public final com.mapbox.maps.extension.compose.style.StringListValue tiles;
    property public final com.mapbox.maps.extension.compose.style.StringValue url;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.RasterArraySourceState.Companion Companion;
  }

  public static final class RasterArraySourceState.Companion {
    method public androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.style.sources.generated.RasterArraySourceState,com.mapbox.maps.extension.compose.style.sources.SourceState.Holder> getSaver();
    property public final androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.style.sources.generated.RasterArraySourceState,com.mapbox.maps.extension.compose.style.sources.SourceState.Holder> Saver;
  }

  public final class RasterArraySourceStateKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental public static inline com.mapbox.maps.extension.compose.style.sources.generated.RasterArraySourceState rememberRasterArraySourceState(String? key = null, String sourceId = remember({ 
    return generateRandomSourceId("raster-array")
}), kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.sources.generated.RasterArraySourceState,kotlin.Unit> init = {});
  }

  @com.mapbox.maps.MapboxExperimental public final class RasterDemSourceState extends com.mapbox.maps.extension.compose.style.sources.SourceState {
    ctor public RasterDemSourceState(String sourceId = generateRandomSourceId("raster-dem"));
    method public com.mapbox.maps.extension.compose.style.StringValue getAttribution();
    method public com.mapbox.maps.extension.compose.style.DoubleListValue getBounds();
    method public com.mapbox.maps.extension.compose.style.sources.generated.EncodingValue getEncoding();
    method public com.mapbox.maps.extension.compose.style.LongValue getMaxOverscaleFactorForParentTiles();
    method public com.mapbox.maps.extension.compose.style.LongValue getMaxZoom();
    method public com.mapbox.maps.extension.compose.style.LongValue getMinZoom();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getMinimumTileUpdateInterval();
    method public com.mapbox.maps.extension.compose.style.LongValue getPrefetchZoomDelta();
    method public com.mapbox.maps.extension.compose.style.sources.TileCacheBudget getTileCacheBudget();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getTileNetworkRequestsDelay();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getTileRequestsDelay();
    method public com.mapbox.maps.extension.compose.style.LongValue getTileSize();
    method public com.mapbox.maps.extension.compose.style.StringListValue getTiles();
    method public com.mapbox.maps.extension.compose.style.StringValue getUrl();
    method public com.mapbox.maps.extension.compose.style.BooleanValue getVolatile();
    method public void setAttribution(com.mapbox.maps.extension.compose.style.StringValue);
    method public void setBounds(com.mapbox.maps.extension.compose.style.DoubleListValue);
    method public void setEncoding(com.mapbox.maps.extension.compose.style.sources.generated.EncodingValue);
    method public void setMaxOverscaleFactorForParentTiles(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setMaxZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setMinZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setMinimumTileUpdateInterval(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setPrefetchZoomDelta(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setTileCacheBudget(com.mapbox.maps.extension.compose.style.sources.TileCacheBudget);
    method public void setTileNetworkRequestsDelay(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setTileRequestsDelay(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setTileSize(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setTiles(com.mapbox.maps.extension.compose.style.StringListValue);
    method public void setUrl(com.mapbox.maps.extension.compose.style.StringValue);
    method public void setVolatile(com.mapbox.maps.extension.compose.style.BooleanValue);
    property public final com.mapbox.maps.extension.compose.style.StringValue attribution;
    property public final com.mapbox.maps.extension.compose.style.DoubleListValue bounds;
    property public final com.mapbox.maps.extension.compose.style.sources.generated.EncodingValue encoding;
    property public final com.mapbox.maps.extension.compose.style.LongValue maxOverscaleFactorForParentTiles;
    property public final com.mapbox.maps.extension.compose.style.LongValue maxZoom;
    property public final com.mapbox.maps.extension.compose.style.LongValue minZoom;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue minimumTileUpdateInterval;
    property public final com.mapbox.maps.extension.compose.style.LongValue prefetchZoomDelta;
    property public final com.mapbox.maps.extension.compose.style.sources.TileCacheBudget tileCacheBudget;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue tileNetworkRequestsDelay;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue tileRequestsDelay;
    property public final com.mapbox.maps.extension.compose.style.LongValue tileSize;
    property public final com.mapbox.maps.extension.compose.style.StringListValue tiles;
    property public final com.mapbox.maps.extension.compose.style.StringValue url;
    property public final com.mapbox.maps.extension.compose.style.BooleanValue volatile;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.RasterDemSourceState.Companion Companion;
  }

  public static final class RasterDemSourceState.Companion {
    method public androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.style.sources.generated.RasterDemSourceState,com.mapbox.maps.extension.compose.style.sources.SourceState.Holder> getSaver();
    property public final androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.style.sources.generated.RasterDemSourceState,com.mapbox.maps.extension.compose.style.sources.SourceState.Holder> Saver;
  }

  public final class RasterDemSourceStateKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental public static inline com.mapbox.maps.extension.compose.style.sources.generated.RasterDemSourceState rememberRasterDemSourceState(String? key = null, String sourceId = remember({ 
    return generateRandomSourceId("raster-dem")
}), kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.sources.generated.RasterDemSourceState,kotlin.Unit> init = {});
  }

  @com.mapbox.maps.MapboxExperimental public final class RasterSourceState extends com.mapbox.maps.extension.compose.style.sources.SourceState {
    ctor public RasterSourceState(String sourceId = generateRandomSourceId("raster"));
    method public com.mapbox.maps.extension.compose.style.StringValue getAttribution();
    method public com.mapbox.maps.extension.compose.style.DoubleListValue getBounds();
    method public com.mapbox.maps.extension.compose.style.LongValue getMaxOverscaleFactorForParentTiles();
    method public com.mapbox.maps.extension.compose.style.LongValue getMaxZoom();
    method public com.mapbox.maps.extension.compose.style.LongValue getMinZoom();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getMinimumTileUpdateInterval();
    method public com.mapbox.maps.extension.compose.style.LongValue getPrefetchZoomDelta();
    method public com.mapbox.maps.extension.compose.style.sources.generated.SchemeValue getScheme();
    method public com.mapbox.maps.extension.compose.style.sources.TileCacheBudget getTileCacheBudget();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getTileNetworkRequestsDelay();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getTileRequestsDelay();
    method public com.mapbox.maps.extension.compose.style.LongValue getTileSize();
    method public com.mapbox.maps.extension.compose.style.StringListValue getTiles();
    method public com.mapbox.maps.extension.compose.style.StringValue getUrl();
    method public com.mapbox.maps.extension.compose.style.BooleanValue getVolatile();
    method public void setAttribution(com.mapbox.maps.extension.compose.style.StringValue);
    method public void setBounds(com.mapbox.maps.extension.compose.style.DoubleListValue);
    method public void setMaxOverscaleFactorForParentTiles(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setMaxZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setMinZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setMinimumTileUpdateInterval(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setPrefetchZoomDelta(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setScheme(com.mapbox.maps.extension.compose.style.sources.generated.SchemeValue);
    method public void setTileCacheBudget(com.mapbox.maps.extension.compose.style.sources.TileCacheBudget);
    method public void setTileNetworkRequestsDelay(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setTileRequestsDelay(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setTileSize(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setTiles(com.mapbox.maps.extension.compose.style.StringListValue);
    method public void setUrl(com.mapbox.maps.extension.compose.style.StringValue);
    method public void setVolatile(com.mapbox.maps.extension.compose.style.BooleanValue);
    property public final com.mapbox.maps.extension.compose.style.StringValue attribution;
    property public final com.mapbox.maps.extension.compose.style.DoubleListValue bounds;
    property public final com.mapbox.maps.extension.compose.style.LongValue maxOverscaleFactorForParentTiles;
    property public final com.mapbox.maps.extension.compose.style.LongValue maxZoom;
    property public final com.mapbox.maps.extension.compose.style.LongValue minZoom;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue minimumTileUpdateInterval;
    property public final com.mapbox.maps.extension.compose.style.LongValue prefetchZoomDelta;
    property public final com.mapbox.maps.extension.compose.style.sources.generated.SchemeValue scheme;
    property public final com.mapbox.maps.extension.compose.style.sources.TileCacheBudget tileCacheBudget;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue tileNetworkRequestsDelay;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue tileRequestsDelay;
    property public final com.mapbox.maps.extension.compose.style.LongValue tileSize;
    property public final com.mapbox.maps.extension.compose.style.StringListValue tiles;
    property public final com.mapbox.maps.extension.compose.style.StringValue url;
    property public final com.mapbox.maps.extension.compose.style.BooleanValue volatile;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.RasterSourceState.Companion Companion;
  }

  public static final class RasterSourceState.Companion {
    method public androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.style.sources.generated.RasterSourceState,com.mapbox.maps.extension.compose.style.sources.SourceState.Holder> getSaver();
    property public final androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.style.sources.generated.RasterSourceState,com.mapbox.maps.extension.compose.style.sources.SourceState.Holder> Saver;
  }

  public final class RasterSourceStateKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental public static inline com.mapbox.maps.extension.compose.style.sources.generated.RasterSourceState rememberRasterSourceState(String? key = null, String sourceId = remember({ 
    return generateRandomSourceId("raster")
}), kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.sources.generated.RasterSourceState,kotlin.Unit> init = {});
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class SchemeValue {
    ctor public SchemeValue(com.mapbox.bindgen.Value value);
    ctor public SchemeValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.sources.generated.SchemeValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.SchemeValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.SchemeValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.SchemeValue TMS;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.SchemeValue XYZ;
  }

  public static final class SchemeValue.Companion {
  }

  @com.mapbox.maps.MapboxExperimental public final class VectorSourceState extends com.mapbox.maps.extension.compose.style.sources.SourceState {
    ctor public VectorSourceState(String sourceId = generateRandomSourceId("vector"));
    method public com.mapbox.maps.extension.compose.style.StringValue getAttribution();
    method public com.mapbox.maps.extension.compose.style.DoubleListValue getBounds();
    method public com.mapbox.maps.extension.compose.style.LongValue getMaxOverscaleFactorForParentTiles();
    method public com.mapbox.maps.extension.compose.style.LongValue getMaxZoom();
    method public com.mapbox.maps.extension.compose.style.LongValue getMinZoom();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getMinimumTileUpdateInterval();
    method public com.mapbox.maps.extension.compose.style.LongValue getPrefetchZoomDelta();
    method public com.mapbox.maps.extension.compose.style.sources.PromoteIdValue getPromoteId();
    method public com.mapbox.maps.extension.compose.style.sources.generated.SchemeValue getScheme();
    method public com.mapbox.maps.extension.compose.style.sources.TileCacheBudget getTileCacheBudget();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getTileNetworkRequestsDelay();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getTileRequestsDelay();
    method public com.mapbox.maps.extension.compose.style.StringListValue getTiles();
    method public com.mapbox.maps.extension.compose.style.StringValue getUrl();
    method public com.mapbox.maps.extension.compose.style.BooleanValue getVolatile();
    method public void setAttribution(com.mapbox.maps.extension.compose.style.StringValue);
    method public void setBounds(com.mapbox.maps.extension.compose.style.DoubleListValue);
    method public void setMaxOverscaleFactorForParentTiles(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setMaxZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setMinZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setMinimumTileUpdateInterval(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setPrefetchZoomDelta(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setPromoteId(com.mapbox.maps.extension.compose.style.sources.PromoteIdValue);
    method public void setScheme(com.mapbox.maps.extension.compose.style.sources.generated.SchemeValue);
    method public void setTileCacheBudget(com.mapbox.maps.extension.compose.style.sources.TileCacheBudget);
    method public void setTileNetworkRequestsDelay(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setTileRequestsDelay(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setTiles(com.mapbox.maps.extension.compose.style.StringListValue);
    method public void setUrl(com.mapbox.maps.extension.compose.style.StringValue);
    method public void setVolatile(com.mapbox.maps.extension.compose.style.BooleanValue);
    property public final com.mapbox.maps.extension.compose.style.StringValue attribution;
    property public final com.mapbox.maps.extension.compose.style.DoubleListValue bounds;
    property public final com.mapbox.maps.extension.compose.style.LongValue maxOverscaleFactorForParentTiles;
    property public final com.mapbox.maps.extension.compose.style.LongValue maxZoom;
    property public final com.mapbox.maps.extension.compose.style.LongValue minZoom;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue minimumTileUpdateInterval;
    property public final com.mapbox.maps.extension.compose.style.LongValue prefetchZoomDelta;
    property public final com.mapbox.maps.extension.compose.style.sources.PromoteIdValue promoteId;
    property public final com.mapbox.maps.extension.compose.style.sources.generated.SchemeValue scheme;
    property public final com.mapbox.maps.extension.compose.style.sources.TileCacheBudget tileCacheBudget;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue tileNetworkRequestsDelay;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue tileRequestsDelay;
    property public final com.mapbox.maps.extension.compose.style.StringListValue tiles;
    property public final com.mapbox.maps.extension.compose.style.StringValue url;
    property public final com.mapbox.maps.extension.compose.style.BooleanValue volatile;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.VectorSourceState.Companion Companion;
  }

  public static final class VectorSourceState.Companion {
    method public androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.style.sources.generated.VectorSourceState,com.mapbox.maps.extension.compose.style.sources.SourceState.Holder> getSaver();
    property public final androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.style.sources.generated.VectorSourceState,com.mapbox.maps.extension.compose.style.sources.SourceState.Holder> Saver;
  }

  public final class VectorSourceStateKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental public static inline com.mapbox.maps.extension.compose.style.sources.generated.VectorSourceState rememberVectorSourceState(String? key = null, String sourceId = remember({ 
    return generateRandomSourceId("vector")
}), kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.sources.generated.VectorSourceState,kotlin.Unit> init = {});
  }

}

package com.mapbox.maps.extension.compose.style.standard {

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class LightPresetValue {
    ctor public LightPresetValue(com.mapbox.bindgen.Value value);
    ctor public LightPresetValue(String value);
    ctor public LightPresetValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.standard.LightPresetValue copy(com.mapbox.bindgen.Value value);
    method public String? getPresetNameOrNull();
    method public com.mapbox.bindgen.Value getValue();
    property public final String? presetNameOrNull;
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.standard.LightPresetValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.standard.LightPresetValue DAWN;
    field public static final com.mapbox.maps.extension.compose.style.standard.LightPresetValue DAY;
    field public static final com.mapbox.maps.extension.compose.style.standard.LightPresetValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.standard.LightPresetValue DUSK;
    field public static final com.mapbox.maps.extension.compose.style.standard.LightPresetValue NIGHT;
  }

  public static final class LightPresetValue.Companion {
  }

  public final class MapboxStandardStyleKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.style.MapboxStyleComposable public static void MapboxStandardStyle(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.imports.StyleImportsScope,kotlin.Unit>? styleImportsContent = null, kotlin.jvm.functions.Function0<kotlin.Unit>? topSlot = null, kotlin.jvm.functions.Function0<kotlin.Unit>? middleSlot = null, kotlin.jvm.functions.Function0<kotlin.Unit>? bottomSlot = null, com.mapbox.maps.extension.compose.style.standard.LightPresetValue lightPreset = com.mapbox.maps.extension.compose.style.standard.LightPresetValue.INITIAL, com.mapbox.maps.extension.compose.style.projection.generated.Projection projection = com.mapbox.maps.extension.compose.style.projection.generated.Projection.INITIAL, com.mapbox.maps.extension.compose.style.atmosphere.generated.AtmosphereState atmosphereState = remember({ 
    return <init>()
}), com.mapbox.maps.extension.compose.style.terrain.generated.TerrainState terrainState = com.mapbox.maps.extension.compose.style.terrain.generated.TerrainState.INITIAL, com.mapbox.maps.extension.compose.style.lights.LightsState lightsState = com.mapbox.maps.extension.compose.style.lights.LightsState.INITIAL);
  }

}

package com.mapbox.maps.extension.compose.style.terrain {

  public final class TerrainStateApplierKt {
  }

}

package com.mapbox.maps.extension.compose.style.terrain.generated {

  @com.mapbox.maps.MapboxExperimental public final class TerrainState {
    ctor public TerrainState(com.mapbox.maps.extension.compose.style.sources.generated.RasterDemSourceState rasterDemSourceState);
    method public com.mapbox.maps.extension.compose.style.DoubleValue getExaggeration();
    method public com.mapbox.maps.extension.compose.style.Transition getExaggerationTransition();
    method public void setExaggeration(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setExaggerationTransition(com.mapbox.maps.extension.compose.style.Transition);
    property public final com.mapbox.maps.extension.compose.style.DoubleValue exaggeration;
    property public final com.mapbox.maps.extension.compose.style.Transition exaggerationTransition;
    field public static final com.mapbox.maps.extension.compose.style.terrain.generated.TerrainState.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.terrain.generated.TerrainState DISABLED;
  }

  public static final class TerrainState.Companion {
    method public androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.style.terrain.generated.TerrainState,com.mapbox.maps.extension.compose.style.terrain.generated.TerrainState.Holder> getSaver();
    property public final androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.style.terrain.generated.TerrainState,com.mapbox.maps.extension.compose.style.terrain.generated.TerrainState.Holder> Saver;
  }

  @com.mapbox.maps.MapboxExperimental @kotlinx.parcelize.Parcelize @kotlinx.parcelize.TypeParceler public static final class TerrainState.Holder implements android.os.Parcelable {
    method public com.mapbox.maps.extension.compose.style.sources.SourceState.Holder? component1();
    method public java.util.Map<java.lang.String,com.mapbox.bindgen.Value> component2();
    method public boolean component3();
    method public com.mapbox.maps.extension.compose.style.terrain.generated.TerrainState.Holder copy(com.mapbox.maps.extension.compose.style.sources.SourceState.Holder? rasterDemSourceStateHolder, java.util.Map<java.lang.String,? extends com.mapbox.bindgen.Value> savedProperties, boolean initial);
    method public boolean getInitial();
    method public com.mapbox.maps.extension.compose.style.sources.SourceState.Holder? getRasterDemSourceStateHolder();
    method public java.util.Map<java.lang.String,com.mapbox.bindgen.Value> getSavedProperties();
    property public final boolean initial;
    property public final com.mapbox.maps.extension.compose.style.sources.SourceState.Holder? rasterDemSourceStateHolder;
    property public final java.util.Map<java.lang.String,com.mapbox.bindgen.Value> savedProperties;
  }

  public final class TerrainStateKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental public static inline com.mapbox.maps.extension.compose.style.terrain.generated.TerrainState rememberTerrainState(com.mapbox.maps.extension.compose.style.sources.generated.RasterDemSourceState rasterDemSourceState, String? key = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.terrain.generated.TerrainState,kotlin.Unit> init = {});
  }

}

