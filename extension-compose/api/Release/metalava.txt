// Signature format: 3.0
package com.mapbox.maps.extension.compose {

  @androidx.compose.runtime.Immutable public final class ComposeMapInitOptions {
    ctor public ComposeMapInitOptions(com.mapbox.maps.MapOptions mapOptions, boolean textureView = false, int antialiasingSampleCount = 1, String mapName = "");
    ctor public ComposeMapInitOptions(float pixelRatio, boolean textureView = false, int antialiasingSampleCount = 1, String mapName = "");
    method public com.mapbox.maps.MapOptions component1();
    method public boolean component2();
    method public int component3();
    method public String component4();
    method public com.mapbox.maps.extension.compose.ComposeMapInitOptions copy(com.mapbox.maps.MapOptions mapOptions, boolean textureView, int antialiasingSampleCount, String mapName);
    method public int getAntialiasingSampleCount();
    method public String getMapName();
    method public com.mapbox.maps.MapOptions getMapOptions();
    method public boolean getTextureView();
    property public final int antialiasingSampleCount;
    property public final String mapName;
    property public final com.mapbox.maps.MapOptions mapOptions;
    property public final boolean textureView;
    field public static final com.mapbox.maps.extension.compose.ComposeMapInitOptions.Companion Companion;
    field public static final int DEFAULT_ANTIALIASING_SAMPLE_COUNT = 1; // 0x1
  }

  public static final class ComposeMapInitOptions.Companion {
  }

  public final class DisposableMapEffectKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static void DisposableMapEffect(Object? key1, kotlin.jvm.functions.Function2<? super androidx.compose.runtime.DisposableEffectScope,? super com.mapbox.maps.MapView,? extends androidx.compose.runtime.DisposableEffectResult> block);
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static void DisposableMapEffect(Object? key1, Object? key2, kotlin.jvm.functions.Function2<? super androidx.compose.runtime.DisposableEffectScope,? super com.mapbox.maps.MapView,? extends androidx.compose.runtime.DisposableEffectResult> block);
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static void DisposableMapEffect(Object? key1, Object? key2, Object? key3, kotlin.jvm.functions.Function2<? super androidx.compose.runtime.DisposableEffectScope,? super com.mapbox.maps.MapView,? extends androidx.compose.runtime.DisposableEffectResult> block);
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static void DisposableMapEffect(Object![]? keys, kotlin.jvm.functions.Function2<? super androidx.compose.runtime.DisposableEffectScope,? super com.mapbox.maps.MapView,? extends androidx.compose.runtime.DisposableEffectResult> block);
  }

  public final class MapEffectKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static void MapEffect(Object? key1, kotlin.jvm.functions.Function3<? super kotlinx.coroutines.CoroutineScope,? super com.mapbox.maps.MapView,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,?> block);
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static void MapEffect(Object? key1, Object? key2, kotlin.jvm.functions.Function3<? super kotlinx.coroutines.CoroutineScope,? super com.mapbox.maps.MapView,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,?> block);
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static void MapEffect(Object? key1, Object? key2, Object? key3, kotlin.jvm.functions.Function3<? super kotlinx.coroutines.CoroutineScope,? super com.mapbox.maps.MapView,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,?> block);
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static void MapEffect(Object![]? keys, kotlin.jvm.functions.Function3<? super kotlinx.coroutines.CoroutineScope,? super com.mapbox.maps.MapView,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,?> block);
  }

  @androidx.compose.runtime.Stable public final class MapState {
    ctor public MapState();
    method @com.mapbox.maps.MapboxExperimental public kotlinx.coroutines.flow.Flow<com.mapbox.maps.GenericEvent> genericEvents(String eventName);
    method public kotlinx.coroutines.flow.Flow<com.mapbox.maps.CameraChanged> getCameraChangedEvents();
    method public com.mapbox.maps.plugin.gestures.generated.GesturesSettings getGesturesSettings();
    method public kotlinx.coroutines.flow.Flow<com.mapbox.maps.MapIdle> getMapIdleEvents();
    method public kotlinx.coroutines.flow.Flow<com.mapbox.maps.MapLoaded> getMapLoadedEvents();
    method public kotlinx.coroutines.flow.Flow<com.mapbox.maps.MapLoadingError> getMapLoadingErrorEvents();
    method public kotlinx.coroutines.flow.Flow<com.mapbox.maps.RenderFrameFinished> getRenderFrameFinishedEvents();
    method public kotlinx.coroutines.flow.Flow<com.mapbox.maps.RenderFrameStarted> getRenderFrameStartedEvents();
    method public kotlinx.coroutines.flow.Flow<com.mapbox.maps.ResourceRequest> getResourceRequestEvents();
    method public kotlinx.coroutines.flow.Flow<com.mapbox.maps.SourceAdded> getSourceAddedEvents();
    method public kotlinx.coroutines.flow.Flow<com.mapbox.maps.SourceDataLoaded> getSourceDataLoadedEvents();
    method public kotlinx.coroutines.flow.Flow<com.mapbox.maps.SourceRemoved> getSourceRemovedEvents();
    method public kotlinx.coroutines.flow.Flow<com.mapbox.maps.StyleDataLoaded> getStyleDataLoadedEvents();
    method public kotlinx.coroutines.flow.Flow<com.mapbox.maps.StyleImageMissing> getStyleImageMissingEvents();
    method public kotlinx.coroutines.flow.Flow<com.mapbox.maps.StyleImageRemoveUnused> getStyleImageRemoveUnusedEvents();
    method public kotlinx.coroutines.flow.Flow<com.mapbox.maps.StyleLoaded> getStyleLoadedEvents();
    method public suspend Object? pixelForCoordinate(com.mapbox.geojson.Point coordinate, kotlin.coroutines.Continuation<? super com.mapbox.maps.ScreenCoordinate>);
    method public suspend Object? queryRenderedFeatures(com.mapbox.maps.RenderedQueryGeometry geometry, com.mapbox.maps.RenderedQueryOptions options, kotlin.coroutines.Continuation<? super com.mapbox.bindgen.Expected<java.lang.String,java.util.List<? extends com.mapbox.maps.QueriedRenderedFeature>>>);
    method public void setGesturesSettings(com.mapbox.maps.plugin.gestures.generated.GesturesSettings);
    property public final kotlinx.coroutines.flow.Flow<com.mapbox.maps.CameraChanged> cameraChangedEvents;
    property public final com.mapbox.maps.plugin.gestures.generated.GesturesSettings gesturesSettings;
    property public final kotlinx.coroutines.flow.Flow<com.mapbox.maps.MapIdle> mapIdleEvents;
    property public final kotlinx.coroutines.flow.Flow<com.mapbox.maps.MapLoaded> mapLoadedEvents;
    property public final kotlinx.coroutines.flow.Flow<com.mapbox.maps.MapLoadingError> mapLoadingErrorEvents;
    property public final kotlinx.coroutines.flow.Flow<com.mapbox.maps.RenderFrameFinished> renderFrameFinishedEvents;
    property public final kotlinx.coroutines.flow.Flow<com.mapbox.maps.RenderFrameStarted> renderFrameStartedEvents;
    property public final kotlinx.coroutines.flow.Flow<com.mapbox.maps.ResourceRequest> resourceRequestEvents;
    property public final kotlinx.coroutines.flow.Flow<com.mapbox.maps.SourceAdded> sourceAddedEvents;
    property public final kotlinx.coroutines.flow.Flow<com.mapbox.maps.SourceDataLoaded> sourceDataLoadedEvents;
    property public final kotlinx.coroutines.flow.Flow<com.mapbox.maps.SourceRemoved> sourceRemovedEvents;
    property public final kotlinx.coroutines.flow.Flow<com.mapbox.maps.StyleDataLoaded> styleDataLoadedEvents;
    property public final kotlinx.coroutines.flow.Flow<com.mapbox.maps.StyleImageMissing> styleImageMissingEvents;
    property public final kotlinx.coroutines.flow.Flow<com.mapbox.maps.StyleImageRemoveUnused> styleImageRemoveUnusedEvents;
    property public final kotlinx.coroutines.flow.Flow<com.mapbox.maps.StyleLoaded> styleLoadedEvents;
    field public static final com.mapbox.maps.extension.compose.MapState.Companion Companion;
  }

  public static final class MapState.Companion {
    method public androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.MapState,com.mapbox.maps.extension.compose.MapState.Holder> getSaver();
    property public final androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.MapState,com.mapbox.maps.extension.compose.MapState.Holder> Saver;
  }

  @kotlinx.parcelize.Parcelize public static final class MapState.Holder implements android.os.Parcelable {
    ctor public MapState.Holder(java.util.Map<java.lang.String,? extends android.os.Parcelable> savedProperties);
    method public java.util.Map<java.lang.String,android.os.Parcelable> component1();
    method public com.mapbox.maps.extension.compose.MapState.Holder copy(java.util.Map<java.lang.String,? extends android.os.Parcelable> savedProperties);
    method public java.util.Map<java.lang.String,android.os.Parcelable> getSavedProperties();
    property public final java.util.Map<java.lang.String,android.os.Parcelable> savedProperties;
  }

  public final class MapStateKt {
    method @androidx.compose.runtime.Composable public static inline com.mapbox.maps.extension.compose.MapState rememberMapState(String? key = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.MapState,kotlin.Unit> init = {});
  }

  @androidx.compose.runtime.ComposableTargetMarker(description="Mapbox Map Composable") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) @kotlin.annotation.Target(allowedTargets={kotlin.annotation.AnnotationTarget.FILE, kotlin.annotation.AnnotationTarget.FUNCTION, kotlin.annotation.AnnotationTarget.PROPERTY_GETTER, kotlin.annotation.AnnotationTarget.TYPE, kotlin.annotation.AnnotationTarget.TYPE_PARAMETER}) public @interface MapboxMapComposable {
  }

  public final class MapboxMapKt {
    method @androidx.compose.runtime.Composable public static void MapboxMap(androidx.compose.ui.Modifier modifier = Modifier, com.mapbox.maps.extension.compose.ComposeMapInitOptions composeMapInitOptions = with(LocalDensity.current, { 
    return remember({ 
        return <init>(density)
    })
}), kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.ornaments.compass.MapCompassScope,kotlin.Unit> compass = { Compass() }, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.ornaments.scalebar.MapScaleBarScope,kotlin.Unit> scaleBar = { ScaleBar() }, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.ornaments.logo.MapLogoScope,kotlin.Unit> logo = { Logo() }, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.ornaments.attribution.MapAttributionScope,kotlin.Unit> attribution = { Attribution() }, com.mapbox.maps.extension.compose.animation.viewport.MapViewportState mapViewportState = rememberMapViewportState(), com.mapbox.maps.extension.compose.MapState mapState = rememberMapState(), com.mapbox.maps.plugin.gestures.OnMapClickListener? onMapClickListener = null, com.mapbox.maps.plugin.gestures.OnMapLongClickListener? onMapLongClickListener = null, kotlin.jvm.functions.Function0<kotlin.Unit> style = { MapboxStandardStyle() }, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.MapboxMapScope,kotlin.Unit>? content = null);
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.extension.compose.MapboxMapScopeMarker public final class MapboxMapScope {
    field public static final com.mapbox.maps.extension.compose.MapboxMapScope INSTANCE;
  }

  @kotlin.DslMarker public @interface MapboxMapScopeMarker {
  }

}

package com.mapbox.maps.extension.compose.animation.viewport {

  @androidx.compose.runtime.Stable public final class MapViewportState {
    ctor public MapViewportState(com.mapbox.maps.CameraState initialCameraState = com.mapbox.maps.extension.compose.animation.viewport.MapViewportState.INIT_CAMERA_STATE);
    method public void easeTo(com.mapbox.maps.CameraOptions cameraOptions, com.mapbox.maps.plugin.animation.MapAnimationOptions? animationOptions = null, com.mapbox.maps.plugin.viewport.CompletionListener? completionListener = null);
    method public void flyTo(com.mapbox.maps.CameraOptions cameraOptions, com.mapbox.maps.plugin.animation.MapAnimationOptions? animationOptions = null, com.mapbox.maps.plugin.viewport.CompletionListener? completionListener = null);
    method public com.mapbox.maps.CameraState? getCameraState();
    method public com.mapbox.maps.plugin.viewport.ViewportStatus? getMapViewportStatus();
    method public com.mapbox.maps.plugin.viewport.data.ViewportStatusChangeReason? getMapViewportStatusChangedReason();
    method public com.mapbox.maps.CameraOptions? getStyleDefaultCameraOptions();
    method public void idle();
    method @UiThread public void setCameraOptions(com.mapbox.maps.CameraOptions cameraOptions);
    method @UiThread public void setCameraOptions(kotlin.jvm.functions.Function1<? super com.mapbox.maps.CameraOptions.Builder,kotlin.Unit> block);
    method public void transitionToFollowPuckState(com.mapbox.maps.plugin.viewport.data.FollowPuckViewportStateOptions followPuckViewportStateOptions = FollowPuckViewportStateOptions.<init>().build(), com.mapbox.maps.plugin.viewport.data.DefaultViewportTransitionOptions defaultTransitionOptions = DefaultViewportTransitionOptions.<init>().build(), com.mapbox.maps.plugin.viewport.CompletionListener? completionListener = null);
    method public void transitionToOverviewState(com.mapbox.maps.plugin.viewport.data.OverviewViewportStateOptions overviewViewportStateOptions, com.mapbox.maps.plugin.viewport.data.DefaultViewportTransitionOptions defaultTransitionOptions = DefaultViewportTransitionOptions.<init>().build(), com.mapbox.maps.plugin.viewport.CompletionListener? completionListener = null);
    property public final com.mapbox.maps.CameraState? cameraState;
    property public final com.mapbox.maps.plugin.viewport.ViewportStatus? mapViewportStatus;
    property public final com.mapbox.maps.plugin.viewport.data.ViewportStatusChangeReason? mapViewportStatusChangedReason;
    property public final com.mapbox.maps.CameraOptions? styleDefaultCameraOptions;
    field public static final com.mapbox.maps.extension.compose.animation.viewport.MapViewportState.Companion Companion;
  }

  public static final class MapViewportState.Companion {
    method public androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.animation.viewport.MapViewportState,com.mapbox.maps.CameraState> getSaver();
    property public final androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.animation.viewport.MapViewportState,com.mapbox.maps.CameraState> Saver;
  }

  public final class MapViewportStateKt {
    method @androidx.compose.runtime.Composable public static inline com.mapbox.maps.extension.compose.animation.viewport.MapViewportState rememberMapViewportState(String? key = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.animation.viewport.MapViewportState,kotlin.Unit> init = {});
  }

}

package com.mapbox.maps.extension.compose.annotation {

  @androidx.compose.runtime.Immutable @kotlinx.parcelize.Parcelize public final class IconImage implements android.os.Parcelable {
    ctor public IconImage(String imageId);
    ctor public IconImage(android.graphics.Bitmap bitmap);
  }

  public final class IconImageKt {
    method @androidx.compose.runtime.Composable public static com.mapbox.maps.extension.compose.annotation.IconImage rememberIconImage(Object? key, androidx.compose.ui.graphics.painter.Painter painter);
    method @androidx.compose.runtime.Composable public static com.mapbox.maps.extension.compose.annotation.IconImage rememberIconImage(@DrawableRes int resourceId);
  }

  public final class ViewAnnotationKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static void ViewAnnotation(com.mapbox.maps.ViewAnnotationOptions options, androidx.compose.ui.Modifier modifier = Modifier, com.mapbox.maps.viewannotation.OnViewAnnotationUpdatedListener? onUpdatedListener = null, kotlin.jvm.functions.Function0<kotlin.Unit> content);
  }

}

package com.mapbox.maps.extension.compose.annotation.generated {

  public final class CircleAnnotationGroupKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static void CircleAnnotationGroup(java.util.List<com.mapbox.maps.plugin.annotation.generated.CircleAnnotationOptions> annotations, com.mapbox.maps.plugin.annotation.AnnotationConfig? annotationConfig = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.annotation.generated.CircleAnnotation,java.lang.Boolean> onClick = { it -> return false }, com.mapbox.maps.extension.compose.annotation.generated.CircleAnnotationGroupState circleAnnotationGroupState = remember({ 
    return <init>()
}));
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static inline void CircleAnnotationGroup(java.util.List<com.mapbox.maps.plugin.annotation.generated.CircleAnnotationOptions> annotations, com.mapbox.maps.plugin.annotation.AnnotationConfig? annotationConfig = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.annotation.generated.CircleAnnotation,java.lang.Boolean> onClick = { it -> return false }, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.annotation.generated.CircleAnnotationGroupState,kotlin.Unit> init);
  }

  @androidx.compose.runtime.Stable public final class CircleAnnotationGroupState {
    ctor public CircleAnnotationGroupState();
    method public Double? getCircleEmissiveStrength();
    method public com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchAlignment? getCirclePitchAlignment();
    method public com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchScale? getCirclePitchScale();
    method public java.util.List<java.lang.Double>? getCircleTranslate();
    method public com.mapbox.maps.extension.style.layers.properties.generated.CircleTranslateAnchor? getCircleTranslateAnchor();
    method public void setCircleEmissiveStrength(Double?);
    method public void setCirclePitchAlignment(com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchAlignment?);
    method public void setCirclePitchScale(com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchScale?);
    method public void setCircleTranslate(java.util.List<java.lang.Double>?);
    method public void setCircleTranslateAnchor(com.mapbox.maps.extension.style.layers.properties.generated.CircleTranslateAnchor?);
    property public final Double? circleEmissiveStrength;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchAlignment? circlePitchAlignment;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchScale? circlePitchScale;
    property public final java.util.List<java.lang.Double>? circleTranslate;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.CircleTranslateAnchor? circleTranslateAnchor;
  }

  public final class CircleAnnotationKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static void CircleAnnotation(com.mapbox.geojson.Point point, kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.annotation.generated.CircleAnnotation,java.lang.Boolean> onClick = { it -> return false }, com.mapbox.maps.extension.compose.annotation.generated.CircleAnnotationState circleAnnotationState = remember({ 
    return <init>()
}));
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static inline void CircleAnnotation(com.mapbox.geojson.Point point, kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.annotation.generated.CircleAnnotation,java.lang.Boolean> onClick = { it -> return false }, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.annotation.generated.CircleAnnotationState,kotlin.Unit> init);
  }

  public final class CircleAnnotationOptionsExtKt {
    method public static com.mapbox.maps.plugin.annotation.generated.CircleAnnotationOptions withCircleColor(com.mapbox.maps.plugin.annotation.generated.CircleAnnotationOptions, long circleColor);
    method public static com.mapbox.maps.plugin.annotation.generated.CircleAnnotationOptions withCircleStrokeColor(com.mapbox.maps.plugin.annotation.generated.CircleAnnotationOptions, long circleStrokeColor);
  }

  @androidx.compose.runtime.Stable public final class CircleAnnotationState {
    ctor public CircleAnnotationState();
    method public Double? getCircleBlur();
    method public androidx.compose.ui.graphics.Color? getCircleColor();
    method public Double? getCircleOpacity();
    method public Double? getCircleRadius();
    method public androidx.compose.ui.graphics.Color? getCircleStrokeColor();
    method public Double? getCircleStrokeOpacity();
    method public Double? getCircleStrokeWidth();
    method public void setCircleBlur(Double?);
    method public void setCircleColor(androidx.compose.ui.graphics.Color?);
    method public void setCircleOpacity(Double?);
    method public void setCircleRadius(Double?);
    method public void setCircleStrokeColor(androidx.compose.ui.graphics.Color?);
    method public void setCircleStrokeOpacity(Double?);
    method public void setCircleStrokeWidth(Double?);
    property public final Double? circleBlur;
    property public final androidx.compose.ui.graphics.Color? circleColor;
    property public final Double? circleOpacity;
    property public final Double? circleRadius;
    property public final androidx.compose.ui.graphics.Color? circleStrokeColor;
    property public final Double? circleStrokeOpacity;
    property public final Double? circleStrokeWidth;
  }

  public final class PointAnnotationGroupKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static void PointAnnotationGroup(java.util.List<com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions> annotations, com.mapbox.maps.plugin.annotation.AnnotationConfig? annotationConfig = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.annotation.generated.PointAnnotation,java.lang.Boolean> onClick = { it -> return false }, com.mapbox.maps.extension.compose.annotation.generated.PointAnnotationGroupState pointAnnotationGroupState = remember({ 
    return <init>()
}));
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static inline void PointAnnotationGroup(java.util.List<com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions> annotations, com.mapbox.maps.plugin.annotation.AnnotationConfig? annotationConfig = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.annotation.generated.PointAnnotation,java.lang.Boolean> onClick = { it -> return false }, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.annotation.generated.PointAnnotationGroupState,kotlin.Unit> init);
  }

  @androidx.compose.runtime.Stable public final class PointAnnotationGroupState {
    ctor public PointAnnotationGroupState();
    method public Boolean? getIconAllowOverlap();
    method public Double? getIconColorSaturation();
    method public Boolean? getIconIgnorePlacement();
    method public Boolean? getIconKeepUpright();
    method public Double? getIconOcclusionOpacity();
    method public Boolean? getIconOptional();
    method public Double? getIconPadding();
    method public com.mapbox.maps.extension.style.layers.properties.generated.IconPitchAlignment? getIconPitchAlignment();
    method public com.mapbox.maps.extension.style.layers.properties.generated.IconRotationAlignment? getIconRotationAlignment();
    method public java.util.List<java.lang.Double>? getIconTranslate();
    method public com.mapbox.maps.extension.style.layers.properties.generated.IconTranslateAnchor? getIconTranslateAnchor();
    method public Boolean? getSymbolAvoidEdges();
    method public com.mapbox.maps.extension.style.layers.properties.generated.SymbolPlacement? getSymbolPlacement();
    method public Double? getSymbolSpacing();
    method public Boolean? getSymbolZElevate();
    method public com.mapbox.maps.extension.style.layers.properties.generated.SymbolZOrder? getSymbolZOrder();
    method public Boolean? getTextAllowOverlap();
    method public java.util.List<java.lang.String>? getTextFont();
    method public Boolean? getTextIgnorePlacement();
    method public Boolean? getTextKeepUpright();
    method public Double? getTextMaxAngle();
    method public Double? getTextOcclusionOpacity();
    method public Boolean? getTextOptional();
    method public Double? getTextPadding();
    method public com.mapbox.maps.extension.style.layers.properties.generated.TextPitchAlignment? getTextPitchAlignment();
    method public com.mapbox.maps.extension.style.layers.properties.generated.TextRotationAlignment? getTextRotationAlignment();
    method public java.util.List<java.lang.Double>? getTextTranslate();
    method public com.mapbox.maps.extension.style.layers.properties.generated.TextTranslateAnchor? getTextTranslateAnchor();
    method public java.util.List<java.lang.String>? getTextVariableAnchor();
    method public java.util.List<java.lang.String>? getTextWritingMode();
    method public void setIconAllowOverlap(Boolean?);
    method public void setIconColorSaturation(Double?);
    method public void setIconIgnorePlacement(Boolean?);
    method public void setIconKeepUpright(Boolean?);
    method public void setIconOcclusionOpacity(Double?);
    method public void setIconOptional(Boolean?);
    method public void setIconPadding(Double?);
    method public void setIconPitchAlignment(com.mapbox.maps.extension.style.layers.properties.generated.IconPitchAlignment?);
    method public void setIconRotationAlignment(com.mapbox.maps.extension.style.layers.properties.generated.IconRotationAlignment?);
    method public void setIconTranslate(java.util.List<java.lang.Double>?);
    method public void setIconTranslateAnchor(com.mapbox.maps.extension.style.layers.properties.generated.IconTranslateAnchor?);
    method public void setSymbolAvoidEdges(Boolean?);
    method public void setSymbolPlacement(com.mapbox.maps.extension.style.layers.properties.generated.SymbolPlacement?);
    method public void setSymbolSpacing(Double?);
    method public void setSymbolZElevate(Boolean?);
    method public void setSymbolZOrder(com.mapbox.maps.extension.style.layers.properties.generated.SymbolZOrder?);
    method public void setTextAllowOverlap(Boolean?);
    method public void setTextFont(java.util.List<java.lang.String>?);
    method public void setTextIgnorePlacement(Boolean?);
    method public void setTextKeepUpright(Boolean?);
    method public void setTextMaxAngle(Double?);
    method public void setTextOcclusionOpacity(Double?);
    method public void setTextOptional(Boolean?);
    method public void setTextPadding(Double?);
    method public void setTextPitchAlignment(com.mapbox.maps.extension.style.layers.properties.generated.TextPitchAlignment?);
    method public void setTextRotationAlignment(com.mapbox.maps.extension.style.layers.properties.generated.TextRotationAlignment?);
    method public void setTextTranslate(java.util.List<java.lang.Double>?);
    method public void setTextTranslateAnchor(com.mapbox.maps.extension.style.layers.properties.generated.TextTranslateAnchor?);
    method public void setTextVariableAnchor(java.util.List<java.lang.String>?);
    method public void setTextWritingMode(java.util.List<java.lang.String>?);
    property public final Boolean? iconAllowOverlap;
    property public final Double? iconColorSaturation;
    property public final Boolean? iconIgnorePlacement;
    property public final Boolean? iconKeepUpright;
    property public final Double? iconOcclusionOpacity;
    property public final Boolean? iconOptional;
    property public final Double? iconPadding;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.IconPitchAlignment? iconPitchAlignment;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.IconRotationAlignment? iconRotationAlignment;
    property public final java.util.List<java.lang.Double>? iconTranslate;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.IconTranslateAnchor? iconTranslateAnchor;
    property public final Boolean? symbolAvoidEdges;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.SymbolPlacement? symbolPlacement;
    property public final Double? symbolSpacing;
    property public final Boolean? symbolZElevate;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.SymbolZOrder? symbolZOrder;
    property public final Boolean? textAllowOverlap;
    property public final java.util.List<java.lang.String>? textFont;
    property public final Boolean? textIgnorePlacement;
    property public final Boolean? textKeepUpright;
    property public final Double? textMaxAngle;
    property public final Double? textOcclusionOpacity;
    property public final Boolean? textOptional;
    property public final Double? textPadding;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.TextPitchAlignment? textPitchAlignment;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.TextRotationAlignment? textRotationAlignment;
    property public final java.util.List<java.lang.Double>? textTranslate;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.TextTranslateAnchor? textTranslateAnchor;
    property public final java.util.List<java.lang.String>? textVariableAnchor;
    property public final java.util.List<java.lang.String>? textWritingMode;
  }

  public final class PointAnnotationKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static void PointAnnotation(com.mapbox.geojson.Point point, kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.annotation.generated.PointAnnotation,java.lang.Boolean> onClick = { it -> return false }, com.mapbox.maps.extension.compose.annotation.generated.PointAnnotationState pointAnnotationState = remember({ 
    return <init>()
}));
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static inline void PointAnnotation(com.mapbox.geojson.Point point, kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.annotation.generated.PointAnnotation,java.lang.Boolean> onClick = { it -> return false }, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.annotation.generated.PointAnnotationState,kotlin.Unit> init);
  }

  public final class PointAnnotationOptionsExtKt {
    method public static com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions withIconColor(com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions, long iconColor);
    method public static com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions withIconHaloColor(com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions, long iconHaloColor);
    method public static com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions withTextColor(com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions, long textColor);
    method public static com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions withTextHaloColor(com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions, long textHaloColor);
  }

  @androidx.compose.runtime.Stable public final class PointAnnotationState {
    ctor public PointAnnotationState();
    method public com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor? getIconAnchor();
    method public androidx.compose.ui.graphics.Color? getIconColor();
    method public Double? getIconEmissiveStrength();
    method public Double? getIconHaloBlur();
    method public androidx.compose.ui.graphics.Color? getIconHaloColor();
    method public Double? getIconHaloWidth();
    method public com.mapbox.maps.extension.compose.annotation.IconImage? getIconImage();
    method public Double? getIconImageCrossFade();
    method public java.util.List<java.lang.Double>? getIconOffset();
    method public Double? getIconOpacity();
    method public Double? getIconRotate();
    method public Double? getIconSize();
    method public com.mapbox.maps.extension.style.layers.properties.generated.IconTextFit? getIconTextFit();
    method public java.util.List<java.lang.Double>? getIconTextFitPadding();
    method public com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor? getTextAnchor();
    method public androidx.compose.ui.graphics.Color? getTextColor();
    method public Double? getTextEmissiveStrength();
    method public String? getTextField();
    method public Double? getTextHaloBlur();
    method public androidx.compose.ui.graphics.Color? getTextHaloColor();
    method public Double? getTextHaloWidth();
    method public com.mapbox.maps.extension.style.layers.properties.generated.TextJustify? getTextJustify();
    method public Double? getTextLetterSpacing();
    method public Double? getTextLineHeight();
    method public Double? getTextMaxWidth();
    method public java.util.List<java.lang.Double>? getTextOffset();
    method public Double? getTextOpacity();
    method public Double? getTextRadialOffset();
    method public Double? getTextRotate();
    method public Double? getTextSize();
    method public com.mapbox.maps.extension.style.layers.properties.generated.TextTransform? getTextTransform();
    method public void setIconAnchor(com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor?);
    method public void setIconColor(androidx.compose.ui.graphics.Color?);
    method public void setIconEmissiveStrength(Double?);
    method public void setIconHaloBlur(Double?);
    method public void setIconHaloColor(androidx.compose.ui.graphics.Color?);
    method public void setIconHaloWidth(Double?);
    method public void setIconImage(com.mapbox.maps.extension.compose.annotation.IconImage?);
    method public void setIconImageCrossFade(Double?);
    method public void setIconOffset(java.util.List<java.lang.Double>?);
    method public void setIconOpacity(Double?);
    method public void setIconRotate(Double?);
    method public void setIconSize(Double?);
    method public void setIconTextFit(com.mapbox.maps.extension.style.layers.properties.generated.IconTextFit?);
    method public void setIconTextFitPadding(java.util.List<java.lang.Double>?);
    method public void setTextAnchor(com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor?);
    method public void setTextColor(androidx.compose.ui.graphics.Color?);
    method public void setTextEmissiveStrength(Double?);
    method public void setTextField(String?);
    method public void setTextHaloBlur(Double?);
    method public void setTextHaloColor(androidx.compose.ui.graphics.Color?);
    method public void setTextHaloWidth(Double?);
    method public void setTextJustify(com.mapbox.maps.extension.style.layers.properties.generated.TextJustify?);
    method public void setTextLetterSpacing(Double?);
    method public void setTextLineHeight(Double?);
    method public void setTextMaxWidth(Double?);
    method public void setTextOffset(java.util.List<java.lang.Double>?);
    method public void setTextOpacity(Double?);
    method public void setTextRadialOffset(Double?);
    method public void setTextRotate(Double?);
    method public void setTextSize(Double?);
    method public void setTextTransform(com.mapbox.maps.extension.style.layers.properties.generated.TextTransform?);
    property public final com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor? iconAnchor;
    property public final androidx.compose.ui.graphics.Color? iconColor;
    property public final Double? iconEmissiveStrength;
    property public final Double? iconHaloBlur;
    property public final androidx.compose.ui.graphics.Color? iconHaloColor;
    property public final Double? iconHaloWidth;
    property public final com.mapbox.maps.extension.compose.annotation.IconImage? iconImage;
    property public final Double? iconImageCrossFade;
    property public final java.util.List<java.lang.Double>? iconOffset;
    property public final Double? iconOpacity;
    property public final Double? iconRotate;
    property public final Double? iconSize;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.IconTextFit? iconTextFit;
    property public final java.util.List<java.lang.Double>? iconTextFitPadding;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor? textAnchor;
    property public final androidx.compose.ui.graphics.Color? textColor;
    property public final Double? textEmissiveStrength;
    property public final String? textField;
    property public final Double? textHaloBlur;
    property public final androidx.compose.ui.graphics.Color? textHaloColor;
    property public final Double? textHaloWidth;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.TextJustify? textJustify;
    property public final Double? textLetterSpacing;
    property public final Double? textLineHeight;
    property public final Double? textMaxWidth;
    property public final java.util.List<java.lang.Double>? textOffset;
    property public final Double? textOpacity;
    property public final Double? textRadialOffset;
    property public final Double? textRotate;
    property public final Double? textSize;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.TextTransform? textTransform;
  }

  public final class PolygonAnnotationGroupKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static void PolygonAnnotationGroup(java.util.List<com.mapbox.maps.plugin.annotation.generated.PolygonAnnotationOptions> annotations, com.mapbox.maps.plugin.annotation.AnnotationConfig? annotationConfig = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.annotation.generated.PolygonAnnotation,java.lang.Boolean> onClick = { it -> return false }, com.mapbox.maps.extension.compose.annotation.generated.PolygonAnnotationGroupState polygonAnnotationGroupState = remember({ 
    return <init>()
}));
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static inline void PolygonAnnotationGroup(java.util.List<com.mapbox.maps.plugin.annotation.generated.PolygonAnnotationOptions> annotations, com.mapbox.maps.plugin.annotation.AnnotationConfig? annotationConfig = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.annotation.generated.PolygonAnnotation,java.lang.Boolean> onClick = { it -> return false }, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.annotation.generated.PolygonAnnotationGroupState,kotlin.Unit> init);
  }

  @androidx.compose.runtime.Stable public final class PolygonAnnotationGroupState {
    ctor public PolygonAnnotationGroupState();
    method public Boolean? getFillAntialias();
    method public Double? getFillEmissiveStrength();
    method public java.util.List<java.lang.Double>? getFillTranslate();
    method public com.mapbox.maps.extension.style.layers.properties.generated.FillTranslateAnchor? getFillTranslateAnchor();
    method public void setFillAntialias(Boolean?);
    method public void setFillEmissiveStrength(Double?);
    method public void setFillTranslate(java.util.List<java.lang.Double>?);
    method public void setFillTranslateAnchor(com.mapbox.maps.extension.style.layers.properties.generated.FillTranslateAnchor?);
    property public final Boolean? fillAntialias;
    property public final Double? fillEmissiveStrength;
    property public final java.util.List<java.lang.Double>? fillTranslate;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.FillTranslateAnchor? fillTranslateAnchor;
  }

  public final class PolygonAnnotationKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static void PolygonAnnotation(java.util.List<? extends java.util.List<com.mapbox.geojson.Point>> points, kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.annotation.generated.PolygonAnnotation,java.lang.Boolean> onClick = { it -> return false }, com.mapbox.maps.extension.compose.annotation.generated.PolygonAnnotationState polygonAnnotationState = remember({ 
    return <init>()
}));
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static inline void PolygonAnnotation(java.util.List<? extends java.util.List<com.mapbox.geojson.Point>> points, kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.annotation.generated.PolygonAnnotation,java.lang.Boolean> onClick = { it -> return false }, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.annotation.generated.PolygonAnnotationState,kotlin.Unit> init);
  }

  public final class PolygonAnnotationOptionsExtKt {
    method public static com.mapbox.maps.plugin.annotation.generated.PolygonAnnotationOptions withFillColor(com.mapbox.maps.plugin.annotation.generated.PolygonAnnotationOptions, long fillColor);
    method public static com.mapbox.maps.plugin.annotation.generated.PolygonAnnotationOptions withFillOutlineColor(com.mapbox.maps.plugin.annotation.generated.PolygonAnnotationOptions, long fillOutlineColor);
  }

  @androidx.compose.runtime.Stable public final class PolygonAnnotationState {
    ctor public PolygonAnnotationState();
    method public androidx.compose.ui.graphics.Color? getFillColor();
    method public Double? getFillOpacity();
    method public androidx.compose.ui.graphics.Color? getFillOutlineColor();
    method public String? getFillPattern();
    method public void setFillColor(androidx.compose.ui.graphics.Color?);
    method public void setFillOpacity(Double?);
    method public void setFillOutlineColor(androidx.compose.ui.graphics.Color?);
    method public void setFillPattern(String?);
    property public final androidx.compose.ui.graphics.Color? fillColor;
    property public final Double? fillOpacity;
    property public final androidx.compose.ui.graphics.Color? fillOutlineColor;
    property public final String? fillPattern;
  }

  public final class PolylineAnnotationGroupKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static void PolylineAnnotationGroup(java.util.List<com.mapbox.maps.plugin.annotation.generated.PolylineAnnotationOptions> annotations, com.mapbox.maps.plugin.annotation.AnnotationConfig? annotationConfig = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.annotation.generated.PolylineAnnotation,java.lang.Boolean> onClick = { it -> return false }, com.mapbox.maps.extension.compose.annotation.generated.PolylineAnnotationGroupState polylineAnnotationGroupState = remember({ 
    return <init>()
}));
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static inline void PolylineAnnotationGroup(java.util.List<com.mapbox.maps.plugin.annotation.generated.PolylineAnnotationOptions> annotations, com.mapbox.maps.plugin.annotation.AnnotationConfig? annotationConfig = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.annotation.generated.PolylineAnnotation,java.lang.Boolean> onClick = { it -> return false }, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.annotation.generated.PolylineAnnotationGroupState,kotlin.Unit> init);
  }

  @androidx.compose.runtime.Stable public final class PolylineAnnotationGroupState {
    ctor public PolylineAnnotationGroupState();
    method public com.mapbox.maps.extension.style.layers.properties.generated.LineCap? getLineCap();
    method public java.util.List<java.lang.Double>? getLineDasharray();
    method public Double? getLineDepthOcclusionFactor();
    method public Double? getLineEmissiveStrength();
    method public Double? getLineMiterLimit();
    method public Double? getLineOcclusionOpacity();
    method public Double? getLineRoundLimit();
    method public java.util.List<java.lang.Double>? getLineTranslate();
    method public com.mapbox.maps.extension.style.layers.properties.generated.LineTranslateAnchor? getLineTranslateAnchor();
    method public java.util.List<java.lang.Double>? getLineTrimOffset();
    method public void setLineCap(com.mapbox.maps.extension.style.layers.properties.generated.LineCap?);
    method public void setLineDasharray(java.util.List<java.lang.Double>?);
    method public void setLineDepthOcclusionFactor(Double?);
    method public void setLineEmissiveStrength(Double?);
    method public void setLineMiterLimit(Double?);
    method public void setLineOcclusionOpacity(Double?);
    method public void setLineRoundLimit(Double?);
    method public void setLineTranslate(java.util.List<java.lang.Double>?);
    method public void setLineTranslateAnchor(com.mapbox.maps.extension.style.layers.properties.generated.LineTranslateAnchor?);
    method public void setLineTrimOffset(java.util.List<java.lang.Double>?);
    property public final com.mapbox.maps.extension.style.layers.properties.generated.LineCap? lineCap;
    property public final java.util.List<java.lang.Double>? lineDasharray;
    property public final Double? lineDepthOcclusionFactor;
    property public final Double? lineEmissiveStrength;
    property public final Double? lineMiterLimit;
    property public final Double? lineOcclusionOpacity;
    property public final Double? lineRoundLimit;
    property public final java.util.List<java.lang.Double>? lineTranslate;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.LineTranslateAnchor? lineTranslateAnchor;
    property public final java.util.List<java.lang.Double>? lineTrimOffset;
  }

  public final class PolylineAnnotationKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static void PolylineAnnotation(java.util.List<com.mapbox.geojson.Point> points, kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.annotation.generated.PolylineAnnotation,java.lang.Boolean> onClick = { it -> return false }, com.mapbox.maps.extension.compose.annotation.generated.PolylineAnnotationState polylineAnnotationState = remember({ 
    return <init>()
}));
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static inline void PolylineAnnotation(java.util.List<com.mapbox.geojson.Point> points, kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.annotation.generated.PolylineAnnotation,java.lang.Boolean> onClick = { it -> return false }, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.annotation.generated.PolylineAnnotationState,kotlin.Unit> init);
  }

  public final class PolylineAnnotationOptionsExtKt {
    method public static com.mapbox.maps.plugin.annotation.generated.PolylineAnnotationOptions withLineBorderColor(com.mapbox.maps.plugin.annotation.generated.PolylineAnnotationOptions, long lineBorderColor);
    method public static com.mapbox.maps.plugin.annotation.generated.PolylineAnnotationOptions withLineColor(com.mapbox.maps.plugin.annotation.generated.PolylineAnnotationOptions, long lineColor);
  }

  @androidx.compose.runtime.Stable public final class PolylineAnnotationState {
    ctor public PolylineAnnotationState();
    method public Double? getLineBlur();
    method public androidx.compose.ui.graphics.Color? getLineBorderColor();
    method public Double? getLineBorderWidth();
    method public androidx.compose.ui.graphics.Color? getLineColor();
    method public Double? getLineGapWidth();
    method public com.mapbox.maps.extension.style.layers.properties.generated.LineJoin? getLineJoin();
    method public Double? getLineOffset();
    method public Double? getLineOpacity();
    method public String? getLinePattern();
    method public Double? getLineWidth();
    method public Double? getLineZOffset();
    method public void setLineBlur(Double?);
    method public void setLineBorderColor(androidx.compose.ui.graphics.Color?);
    method public void setLineBorderWidth(Double?);
    method public void setLineColor(androidx.compose.ui.graphics.Color?);
    method public void setLineGapWidth(Double?);
    method public void setLineJoin(com.mapbox.maps.extension.style.layers.properties.generated.LineJoin?);
    method public void setLineOffset(Double?);
    method public void setLineOpacity(Double?);
    method public void setLinePattern(String?);
    method public void setLineWidth(Double?);
    method public void setLineZOffset(Double?);
    property public final Double? lineBlur;
    property public final androidx.compose.ui.graphics.Color? lineBorderColor;
    property public final Double? lineBorderWidth;
    property public final androidx.compose.ui.graphics.Color? lineColor;
    property public final Double? lineGapWidth;
    property public final com.mapbox.maps.extension.style.layers.properties.generated.LineJoin? lineJoin;
    property public final Double? lineOffset;
    property public final Double? lineOpacity;
    property public final String? linePattern;
    property public final Double? lineWidth;
    property public final Double? lineZOffset;
  }

}

package com.mapbox.maps.extension.compose.internal {

  public final class MapPreviewPlaceholderKt {
  }

  public final class MapViewLifecycleKt {
  }

  public final class MapboxMapNodeKt {
  }

  public final class SettingsUtilsKt {
  }

}

package com.mapbox.maps.extension.compose.ornaments.attribution {

  @androidx.compose.runtime.Immutable @com.mapbox.maps.extension.compose.MapboxMapScopeMarker public final class MapAttributionScope {
    method @androidx.compose.runtime.Composable public void Attribution(androidx.compose.ui.Modifier modifier = Modifier, androidx.compose.foundation.layout.PaddingValues contentPadding = PaddingValues(92.dp, 4.dp, 4.dp, 4.dp), androidx.compose.ui.Alignment alignment = androidx.compose.ui.Alignment.Companion.BottomStart, long iconColor = Color(4280192171), kotlin.jvm.functions.Function3<? super java.util.List<com.mapbox.maps.plugin.attribution.Attribution>,? super kotlin.jvm.functions.Function0<kotlin.Unit>,? super kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.attribution.Attribution,kotlin.Unit>,kotlin.Unit> attributionDialog = { attributions, onDismissRequest, onAttributionClick -> AttributionDialog(attributions, onDismissRequest, onAttributionClick) }, kotlin.jvm.functions.Function4<? super kotlin.jvm.functions.Function0<kotlin.Unit>,? super kotlin.jvm.functions.Function0<kotlin.Unit>,? super kotlin.jvm.functions.Function0<kotlin.Unit>,? super kotlin.jvm.functions.Function0<kotlin.Unit>,kotlin.Unit> telemetryDialog = { onDismissRequest, onMoreInfo, onDisagree, onAgree -> TelemetryDialog(onDismissRequest, onMoreInfo, onDisagree, onAgree) });
    method @androidx.compose.runtime.Composable public void AttributionDialog(java.util.List<com.mapbox.maps.plugin.attribution.Attribution> attributions, kotlin.jvm.functions.Function0<kotlin.Unit> onDismissRequest, kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.attribution.Attribution,kotlin.Unit> onAttributionClick);
    method @androidx.compose.runtime.Composable public void TelemetryDialog(kotlin.jvm.functions.Function0<kotlin.Unit> onDismissRequest, kotlin.jvm.functions.Function0<kotlin.Unit> onMoreInfo, kotlin.jvm.functions.Function0<kotlin.Unit> onDisagree, kotlin.jvm.functions.Function0<kotlin.Unit> onAgree);
  }

}

package com.mapbox.maps.extension.compose.ornaments.compass {

  @androidx.compose.runtime.Immutable @com.mapbox.maps.extension.compose.MapboxMapScopeMarker public final class MapCompassScope {
    method @androidx.compose.runtime.Composable public void Compass(androidx.compose.ui.Modifier modifier = Modifier, androidx.compose.foundation.layout.PaddingValues contentPadding = PaddingValues(4.dp), androidx.compose.ui.Alignment alignment = androidx.compose.ui.Alignment.Companion.TopEnd, boolean fadeWhenFacingNorth = true, boolean resetToNorthUponClick = true, kotlin.jvm.functions.Function0<kotlin.Unit> content = { Image(painterResource(R.drawable.mapbox_compass_icon), "Mapbox Compass") });
  }

}

package com.mapbox.maps.extension.compose.ornaments.logo {

  @androidx.compose.runtime.Immutable @com.mapbox.maps.extension.compose.MapboxMapScopeMarker public final class MapLogoScope {
    method @androidx.compose.runtime.Composable public void Logo(androidx.compose.ui.Modifier modifier = Modifier, androidx.compose.foundation.layout.PaddingValues contentPadding = PaddingValues(4.dp), androidx.compose.ui.Alignment alignment = androidx.compose.ui.Alignment.Companion.BottomStart);
  }

}

package com.mapbox.maps.extension.compose.ornaments.scalebar {

  @androidx.compose.runtime.Immutable @com.mapbox.maps.extension.compose.MapboxMapScopeMarker public final class MapScaleBarScope {
    method @androidx.compose.runtime.Composable public void ScaleBar(androidx.compose.ui.Modifier modifier = Modifier, androidx.compose.foundation.layout.PaddingValues contentPadding = PaddingValues(4.dp), androidx.compose.ui.Alignment alignment = androidx.compose.ui.Alignment.Companion.TopStart, long textColor = Color.Black, long primaryColor = Color.Black, long secondaryColor = Color.White, float borderWidth = 2.dp, float height = 2.dp, float textBarMargin = 8.dp, float textBorderWidth = 2.dp, long textSize = 8.sp, boolean isMetricUnit = true, long refreshInterval = 15.milliseconds, boolean showTextBorder = true, float ratio = 0.5f, boolean useContinuousRendering = false);
  }

}

package com.mapbox.maps.extension.compose.style {

  @androidx.compose.runtime.Immutable public final class BooleanValue {
    ctor public BooleanValue(com.mapbox.bindgen.Value value);
    ctor public BooleanValue(boolean value);
    ctor public BooleanValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.BooleanValue copy(com.mapbox.bindgen.Value value);
    method public Boolean? getBooleanOrNull();
    method public com.mapbox.bindgen.Value getValue();
    property public final Boolean? booleanOrNull;
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.BooleanValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.BooleanValue DEFAULT;
  }

  public static final class BooleanValue.Companion {
  }

  @androidx.compose.runtime.Immutable public final class ColorValue {
    ctor public ColorValue(com.mapbox.bindgen.Value value);
    ctor public ColorValue(long value);
    ctor public ColorValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.ColorValue copy(com.mapbox.bindgen.Value value);
    method public androidx.compose.ui.graphics.Color? getColorOrNull();
    method public com.mapbox.bindgen.Value getValue();
    property public final androidx.compose.ui.graphics.Color? colorOrNull;
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.ColorValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.ColorValue DEFAULT;
  }

  public static final class ColorValue.Companion {
  }

  public final class DoubleListValue {
    ctor public DoubleListValue(com.mapbox.bindgen.Value value);
    ctor public DoubleListValue(double... value);
    ctor public DoubleListValue(java.util.List<java.lang.Double> value);
    ctor public DoubleListValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.DoubleListValue copy(com.mapbox.bindgen.Value value);
    method public java.util.List<java.lang.Double>? getDoubleListOrNull();
    method public com.mapbox.bindgen.Value getValue();
    property public final java.util.List<java.lang.Double>? doubleListOrNull;
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.DoubleListValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.DoubleListValue DEFAULT;
  }

  public static final class DoubleListValue.Companion {
  }

  public final class DoubleRangeValue {
    ctor public DoubleRangeValue(com.mapbox.bindgen.Value value);
    ctor public DoubleRangeValue(double lower, double upper);
    ctor public DoubleRangeValue(android.util.Range<java.lang.Double> range);
    ctor public DoubleRangeValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.DoubleRangeValue copy(com.mapbox.bindgen.Value value);
    method public android.util.Range<java.lang.Double>? getRangeOrNull();
    method public com.mapbox.bindgen.Value getValue();
    property public final android.util.Range<java.lang.Double>? rangeOrNull;
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.DoubleRangeValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.DoubleRangeValue DEFAULT;
  }

  public static final class DoubleRangeValue.Companion {
  }

  @androidx.compose.runtime.Immutable public final class DoubleValue {
    ctor public DoubleValue(com.mapbox.bindgen.Value value);
    ctor public DoubleValue(double value);
    ctor public DoubleValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.DoubleValue copy(com.mapbox.bindgen.Value value);
    method public Double? getDoubleOrNull();
    method public com.mapbox.bindgen.Value getValue();
    property public final Double? doubleOrNull;
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.DoubleValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.DoubleValue DEFAULT;
  }

  public static final class DoubleValue.Companion {
  }

  public final class IdGenerator {
    method public String generateRandomLayerId(String layerType);
    method public String generateRandomLightId(String lightType);
    method public String generateRandomSourceId(String sourceType);
    field public static final com.mapbox.maps.extension.compose.style.IdGenerator INSTANCE;
  }

  @androidx.compose.runtime.Stable public final class ImportConfigs {
    method public void config(String name, com.mapbox.bindgen.Value value);
    method public com.mapbox.maps.extension.compose.style.ImportConfigs copy(java.util.HashMap<java.lang.String,com.mapbox.bindgen.Value> configs);
  }

  @androidx.compose.runtime.Stable public final class LayerPositionedContent {
    method public void aboveLayer(String layerId, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method public void atIndex(int index, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method public void belowLayer(String layerId, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method public com.mapbox.maps.extension.compose.style.LayerPositionedContent copy(java.util.Map<com.mapbox.maps.LayerPosition,kotlin.jvm.functions.Function0<kotlin.Unit>> entries);
    method public void layerPosition(com.mapbox.maps.LayerPosition layerPosition, kotlin.jvm.functions.Function0<kotlin.Unit> content);
  }

  @androidx.compose.runtime.Immutable public final class LongValue {
    ctor public LongValue(com.mapbox.bindgen.Value value);
    ctor public LongValue(long value);
    ctor public LongValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.LongValue copy(com.mapbox.bindgen.Value value);
    method public Long? getLongOrNull();
    method public com.mapbox.bindgen.Value getValue();
    property public final Long? longOrNull;
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.LongValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.LongValue DEFAULT;
  }

  public static final class LongValue.Companion {
  }

  @androidx.compose.runtime.ComposableTargetMarker(description="Mapbox Style Composable") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) @kotlin.annotation.Target(allowedTargets={kotlin.annotation.AnnotationTarget.FILE, kotlin.annotation.AnnotationTarget.FUNCTION, kotlin.annotation.AnnotationTarget.PROPERTY_GETTER, kotlin.annotation.AnnotationTarget.TYPE, kotlin.annotation.AnnotationTarget.TYPE_PARAMETER}) public @interface MapboxStyleComposable {
  }

  public final class PointListValue {
    ctor public PointListValue(com.mapbox.bindgen.Value value);
    ctor public PointListValue(com.mapbox.geojson.Point... point);
    ctor public PointListValue(kotlin.Pair<java.lang.Double,java.lang.Double>... point);
    ctor public PointListValue(java.util.List<? extends java.util.List<java.lang.Double>> points);
    ctor public PointListValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.PointListValue copy(com.mapbox.bindgen.Value value);
    method public java.util.List<com.mapbox.geojson.Point>? getPointsOrNull();
    method public com.mapbox.bindgen.Value getValue();
    property public final java.util.List<com.mapbox.geojson.Point>? pointsOrNull;
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.PointListValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.PointListValue DEFAULT;
  }

  public static final class PointListValue.Companion {
  }

  @androidx.compose.runtime.Stable public final class SlotsContent {
    method public com.mapbox.maps.extension.compose.style.SlotsContent copy(java.util.Map<java.lang.String,kotlin.jvm.functions.Function0<kotlin.Unit>> entries);
    method public void slot(String name, kotlin.jvm.functions.Function0<kotlin.Unit> content);
  }

  @androidx.compose.runtime.Immutable public final class StringListValue {
    ctor public StringListValue(com.mapbox.bindgen.Value value);
    ctor public StringListValue(java.lang.String... value);
    ctor public StringListValue(java.util.List<java.lang.String> value);
    ctor public StringListValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.StringListValue copy(com.mapbox.bindgen.Value value);
    method public java.util.List<java.lang.String>? getStringListOrNull();
    method public com.mapbox.bindgen.Value getValue();
    property public final java.util.List<java.lang.String>? stringListOrNull;
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.StringListValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.StringListValue DEFAULT;
  }

  public static final class StringListValue.Companion {
  }

  @androidx.compose.runtime.Immutable public final class StringValue {
    ctor public StringValue(com.mapbox.bindgen.Value value);
    ctor public StringValue(String value);
    ctor public StringValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.StringValue copy(com.mapbox.bindgen.Value value);
    method public String? getStringOrNull();
    method public com.mapbox.bindgen.Value getValue();
    property public final String? stringOrNull;
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.StringValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.StringValue DEFAULT;
  }

  public static final class StringValue.Companion {
  }

  @androidx.compose.runtime.Immutable public final class StyleImage {
    ctor public StyleImage(String imageId, com.mapbox.maps.Image image, Float? scale = null, boolean sdf = false, java.util.List<com.mapbox.maps.ImageStretches> stretchX = listOf(), java.util.List<com.mapbox.maps.ImageStretches> stretchY = listOf(), com.mapbox.maps.ImageContent? content = null);
    method public String component1();
    method public com.mapbox.maps.Image component2();
    method public Float? component3();
    method public boolean component4();
    method public java.util.List<com.mapbox.maps.ImageStretches> component5();
    method public java.util.List<com.mapbox.maps.ImageStretches> component6();
    method public com.mapbox.maps.ImageContent? component7();
    method public com.mapbox.maps.extension.compose.style.StyleImage copy(String imageId, com.mapbox.maps.Image image, Float? scale, boolean sdf, java.util.List<com.mapbox.maps.ImageStretches> stretchX, java.util.List<com.mapbox.maps.ImageStretches> stretchY, com.mapbox.maps.ImageContent? content);
    method public com.mapbox.maps.ImageContent? getContent();
    method public com.mapbox.maps.Image getImage();
    method public String getImageId();
    method public Float? getScale();
    method public boolean getSdf();
    method public java.util.List<com.mapbox.maps.ImageStretches> getStretchX();
    method public java.util.List<com.mapbox.maps.ImageStretches> getStretchY();
    property public final com.mapbox.maps.ImageContent? content;
    property public final com.mapbox.maps.Image image;
    property public final String imageId;
    property public final Float? scale;
    property public final boolean sdf;
    property public final java.util.List<com.mapbox.maps.ImageStretches> stretchX;
    property public final java.util.List<com.mapbox.maps.ImageStretches> stretchY;
  }

  public final class StyleImageKt {
    method @androidx.compose.runtime.Composable public static com.mapbox.maps.extension.compose.style.StyleImage rememberStyleImage(String imageId, androidx.compose.ui.graphics.ImageBitmap imageBitmap, Float? scale = null, boolean sdf = false, java.util.List<com.mapbox.maps.ImageStretches> stretchX = listOf(), java.util.List<com.mapbox.maps.ImageStretches> stretchY = listOf(), com.mapbox.maps.ImageContent? content = null);
    method @androidx.compose.runtime.Composable public static com.mapbox.maps.extension.compose.style.StyleImage rememberStyleImage(Object? key, String imageId, androidx.compose.ui.graphics.painter.Painter painter, Float? scale = null, boolean sdf = false, java.util.List<com.mapbox.maps.ImageStretches> stretchX = listOf(), java.util.List<com.mapbox.maps.ImageStretches> stretchY = listOf(), com.mapbox.maps.ImageContent? content = null);
    method @androidx.compose.runtime.Composable public static com.mapbox.maps.extension.compose.style.StyleImage rememberStyleImage(String imageId, @DrawableRes int resourceId, Float? scale = null, boolean sdf = false, java.util.List<com.mapbox.maps.ImageStretches> stretchX = listOf(), java.util.List<com.mapbox.maps.ImageStretches> stretchY = listOf(), com.mapbox.maps.ImageContent? content = null);
  }

  @androidx.compose.runtime.Stable public final class StyleImportsConfig {
    method public com.mapbox.maps.extension.compose.style.StyleImportsConfig copy(java.util.Map<java.lang.String,com.mapbox.maps.extension.compose.style.ImportConfigs> entries);
    method public void importConfig(String importId, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.ImportConfigs,kotlin.Unit> configs);
  }

  public final class StyleKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.style.MapboxStyleComposable public static void GenericStyle(String style, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.imports.StyleImportsScope,kotlin.Unit>? styleImportsContent = null, com.mapbox.maps.extension.compose.style.SlotsContent slotsContent = remember({ 
    return <init>()
}), com.mapbox.maps.extension.compose.style.LayerPositionedContent layerPositionedContent = remember({ 
    return <init>()
}), com.mapbox.maps.extension.compose.style.StyleImportsConfig styleImportsConfig = remember({ 
    return <init>()
}), com.mapbox.maps.extension.compose.style.projection.generated.Projection projection = com.mapbox.maps.extension.compose.style.projection.generated.Projection.INITIAL, com.mapbox.maps.extension.compose.style.atmosphere.generated.AtmosphereState atmosphereState = remember({ 
    return <init>()
}), com.mapbox.maps.extension.compose.style.terrain.generated.TerrainState terrainState = com.mapbox.maps.extension.compose.style.terrain.generated.TerrainState.INITIAL, com.mapbox.maps.extension.compose.style.lights.LightsState lightsState = com.mapbox.maps.extension.compose.style.lights.LightsState.INITIAL, com.mapbox.maps.TransitionOptions styleTransition = remember({ 
    return transition({ 
    
    })
}));
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.style.MapboxStyleComposable public static void MapStyle(String style, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.imports.StyleImportsScope,kotlin.Unit>? styleImportsContent = null, com.mapbox.maps.extension.compose.style.projection.generated.Projection projection = com.mapbox.maps.extension.compose.style.projection.generated.Projection.INITIAL, com.mapbox.maps.extension.compose.style.atmosphere.generated.AtmosphereState atmosphereState = remember({ 
    return <init>()
}), com.mapbox.maps.extension.compose.style.terrain.generated.TerrainState terrainState = com.mapbox.maps.extension.compose.style.terrain.generated.TerrainState.INITIAL, com.mapbox.maps.extension.compose.style.lights.LightsState lightsState = com.mapbox.maps.extension.compose.style.lights.LightsState.INITIAL, com.mapbox.maps.TransitionOptions styleTransition = remember({ 
    return transition({ 
    
    })
}));
    method public static com.mapbox.maps.extension.compose.style.ImportConfigs importConfigs(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.ImportConfigs,kotlin.Unit> init);
    method public static com.mapbox.maps.extension.compose.style.LayerPositionedContent layerPositionedContent(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.LayerPositionedContent,kotlin.Unit> init);
    method public static com.mapbox.maps.extension.compose.style.SlotsContent slotsContent(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.SlotsContent,kotlin.Unit> init);
    method public static com.mapbox.maps.extension.compose.style.StyleImportsConfig styleImportsConfig(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.StyleImportsConfig,kotlin.Unit> init);
  }

  public final class Transition {
    ctor public Transition(long durationMillis = 0L, long delayMillis = 0L);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.Transition copy(com.mapbox.bindgen.Value value);
    method public long getDelayMillis();
    method public long getDurationMillis();
    method public com.mapbox.bindgen.Value getValue();
    property public final long delayMillis;
    property public final long durationMillis;
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.Transition.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.Transition DEFAULT;
  }

  public static final class Transition.Companion {
  }

}

package com.mapbox.maps.extension.compose.style.atmosphere {

  public final class AtmosphereStateApplierKt {
  }

}

package com.mapbox.maps.extension.compose.style.atmosphere.generated {

  @androidx.compose.runtime.Stable public final class AtmosphereState {
    ctor public AtmosphereState();
    method public com.mapbox.maps.extension.compose.style.ColorValue getColor();
    method public com.mapbox.maps.extension.compose.style.Transition getColorTransition();
    method public com.mapbox.maps.extension.compose.style.ColorValue getHighColor();
    method public com.mapbox.maps.extension.compose.style.Transition getHighColorTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getHorizonBlend();
    method public com.mapbox.maps.extension.compose.style.Transition getHorizonBlendTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleRangeValue getRange();
    method public com.mapbox.maps.extension.compose.style.Transition getRangeTransition();
    method public com.mapbox.maps.extension.compose.style.ColorValue getSpaceColor();
    method public com.mapbox.maps.extension.compose.style.Transition getSpaceColorTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getStarIntensity();
    method public com.mapbox.maps.extension.compose.style.Transition getStarIntensityTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleRangeValue getVerticalRange();
    method public com.mapbox.maps.extension.compose.style.Transition getVerticalRangeTransition();
    method public void setColor(com.mapbox.maps.extension.compose.style.ColorValue);
    method public void setColorTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setHighColor(com.mapbox.maps.extension.compose.style.ColorValue);
    method public void setHighColorTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setHorizonBlend(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setHorizonBlendTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setRange(com.mapbox.maps.extension.compose.style.DoubleRangeValue);
    method public void setRangeTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setSpaceColor(com.mapbox.maps.extension.compose.style.ColorValue);
    method public void setSpaceColorTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setStarIntensity(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setStarIntensityTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setVerticalRange(com.mapbox.maps.extension.compose.style.DoubleRangeValue);
    method public void setVerticalRangeTransition(com.mapbox.maps.extension.compose.style.Transition);
    property public final com.mapbox.maps.extension.compose.style.ColorValue color;
    property public final com.mapbox.maps.extension.compose.style.Transition colorTransition;
    property public final com.mapbox.maps.extension.compose.style.ColorValue highColor;
    property public final com.mapbox.maps.extension.compose.style.Transition highColorTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue horizonBlend;
    property public final com.mapbox.maps.extension.compose.style.Transition horizonBlendTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleRangeValue range;
    property public final com.mapbox.maps.extension.compose.style.Transition rangeTransition;
    property public final com.mapbox.maps.extension.compose.style.ColorValue spaceColor;
    property public final com.mapbox.maps.extension.compose.style.Transition spaceColorTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue starIntensity;
    property public final com.mapbox.maps.extension.compose.style.Transition starIntensityTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleRangeValue verticalRange;
    property public final com.mapbox.maps.extension.compose.style.Transition verticalRangeTransition;
    field public static final com.mapbox.maps.extension.compose.style.atmosphere.generated.AtmosphereState.Companion Companion;
  }

  public static final class AtmosphereState.Companion {
    method public androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.style.atmosphere.generated.AtmosphereState,com.mapbox.maps.extension.compose.style.atmosphere.generated.AtmosphereState.Holder> getSaver();
    property public final androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.style.atmosphere.generated.AtmosphereState,com.mapbox.maps.extension.compose.style.atmosphere.generated.AtmosphereState.Holder> Saver;
  }

  @kotlinx.parcelize.Parcelize @kotlinx.parcelize.TypeParceler public static final class AtmosphereState.Holder implements android.os.Parcelable {
    method public java.util.Map<java.lang.String,com.mapbox.bindgen.Value> component1();
    method public com.mapbox.maps.extension.compose.style.atmosphere.generated.AtmosphereState.Holder copy(java.util.Map<java.lang.String,? extends com.mapbox.bindgen.Value> savedProperties);
    method public java.util.Map<java.lang.String,com.mapbox.bindgen.Value> getSavedProperties();
    property public final java.util.Map<java.lang.String,com.mapbox.bindgen.Value> savedProperties;
  }

  public final class AtmosphereStateKt {
    method @androidx.compose.runtime.Composable public static inline com.mapbox.maps.extension.compose.style.atmosphere.generated.AtmosphereState rememberAtmosphereState(String? key = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.atmosphere.generated.AtmosphereState,kotlin.Unit> init = {});
  }

}

package com.mapbox.maps.extension.compose.style.imports {

  @androidx.compose.runtime.ComposableTargetMarker(description="Mapbox Style Import Composable") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) @kotlin.annotation.Target(allowedTargets={kotlin.annotation.AnnotationTarget.FILE, kotlin.annotation.AnnotationTarget.FUNCTION, kotlin.annotation.AnnotationTarget.PROPERTY_GETTER, kotlin.annotation.AnnotationTarget.TYPE, kotlin.annotation.AnnotationTarget.TYPE_PARAMETER}) public @interface MapboxStyleImportComposable {
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.extension.compose.MapboxMapScopeMarker public final class StyleImportsScope {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.style.imports.MapboxStyleImportComposable public void StyleImport(String importId, String style, com.mapbox.maps.extension.compose.style.ImportConfigs? configs = null);
  }

}

package com.mapbox.maps.extension.compose.style.internal {

  public final class StyleConfigKt {
  }

  public final class StyleLayerPositionKt {
  }

  public final class StyleSlotKt {
  }

}

package com.mapbox.maps.extension.compose.style.layers {

  @androidx.compose.runtime.Immutable public final class Filter {
    ctor public Filter(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.Filter copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.Filter.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.Filter DEFAULT;
  }

  public static final class Filter.Companion {
  }

  @androidx.compose.runtime.Immutable public final class FormattedValue {
    ctor public FormattedValue(String value);
    ctor public FormattedValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.FormattedValue copy(com.mapbox.bindgen.Value value);
    method public String? getStringOrNull();
    method public com.mapbox.bindgen.Value getValue();
    property public final String? stringOrNull;
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.FormattedValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.FormattedValue DEFAULT;
  }

  public static final class FormattedValue.Companion {
  }

  @androidx.compose.runtime.Immutable public final class ImageValue {
    ctor public ImageValue(com.mapbox.maps.extension.compose.style.StyleImage styleImage);
    ctor public ImageValue(String imageId);
    ctor public ImageValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.StyleImage? component2();
    method public com.mapbox.maps.extension.compose.style.layers.ImageValue copy(com.mapbox.bindgen.Value value, com.mapbox.maps.extension.compose.style.StyleImage? styleImage);
    method public String? getImageIdOrNull();
    method public com.mapbox.maps.extension.compose.style.StyleImage? getStyleImage();
    method public com.mapbox.bindgen.Value getValue();
    property public final String? imageIdOrNull;
    property public final com.mapbox.maps.extension.compose.style.StyleImage? styleImage;
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.ImageValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.ImageValue DEFAULT;
  }

  public static final class ImageValue.Companion {
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class ModelIdValue {
    ctor public ModelIdValue(String value);
    ctor public ModelIdValue(String modelId, String uri);
    ctor public ModelIdValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public kotlin.Pair<java.lang.String,java.lang.String>? component2();
    method public com.mapbox.maps.extension.compose.style.layers.ModelIdValue copy(com.mapbox.bindgen.Value value, kotlin.Pair<java.lang.String,java.lang.String>? modelInfo);
    method public String? getModelIdOrNull();
    method public kotlin.Pair<java.lang.String,java.lang.String>? getModelInfo();
    method public String? getUriOrNull();
    method public com.mapbox.bindgen.Value getValue();
    property public final String? modelIdOrNull;
    property public final kotlin.Pair<java.lang.String,java.lang.String>? modelInfo;
    property public final String? uriOrNull;
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.ModelIdValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.ModelIdValue DEFAULT;
  }

  public static final class ModelIdValue.Companion {
  }

}

package com.mapbox.maps.extension.compose.style.layers.generated {

  public final class BackgroundLayerKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static void BackgroundLayer(String layerId = remember({ 
    return generateRandomLayerId("background")
}), com.mapbox.maps.extension.compose.style.layers.generated.BackgroundLayerState backgroundLayerState = remember({ 
    return <init>()
}));
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static inline void BackgroundLayer(String layerId = remember({ 
    return generateRandomLayerId("background")
}), kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.layers.generated.BackgroundLayerState,kotlin.Unit> init);
  }

  @androidx.compose.runtime.Stable public final class BackgroundLayerState {
    ctor public BackgroundLayerState();
    method public com.mapbox.maps.extension.compose.style.ColorValue getBackgroundColor();
    method public com.mapbox.maps.extension.compose.style.Transition getBackgroundColorTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getBackgroundEmissiveStrength();
    method public com.mapbox.maps.extension.compose.style.Transition getBackgroundEmissiveStrengthTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getBackgroundOpacity();
    method public com.mapbox.maps.extension.compose.style.Transition getBackgroundOpacityTransition();
    method public com.mapbox.maps.extension.compose.style.layers.ImageValue getBackgroundPattern();
    method public com.mapbox.maps.extension.compose.style.LongValue getMaxZoom();
    method public com.mapbox.maps.extension.compose.style.LongValue getMinZoom();
    method public com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue getVisibility();
    method public void setBackgroundColor(com.mapbox.maps.extension.compose.style.ColorValue);
    method public void setBackgroundColorTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setBackgroundEmissiveStrength(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setBackgroundEmissiveStrengthTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setBackgroundOpacity(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setBackgroundOpacityTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setBackgroundPattern(com.mapbox.maps.extension.compose.style.layers.ImageValue);
    method public void setMaxZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setMinZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setVisibility(com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue);
    property public final com.mapbox.maps.extension.compose.style.ColorValue backgroundColor;
    property public final com.mapbox.maps.extension.compose.style.Transition backgroundColorTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue backgroundEmissiveStrength;
    property public final com.mapbox.maps.extension.compose.style.Transition backgroundEmissiveStrengthTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue backgroundOpacity;
    property public final com.mapbox.maps.extension.compose.style.Transition backgroundOpacityTransition;
    property public final com.mapbox.maps.extension.compose.style.layers.ImageValue backgroundPattern;
    property public final com.mapbox.maps.extension.compose.style.LongValue maxZoom;
    property public final com.mapbox.maps.extension.compose.style.LongValue minZoom;
    property public final com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue visibility;
  }

  public final class CircleLayerKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static void CircleLayer(com.mapbox.maps.extension.compose.style.sources.SourceState sourceState, String layerId = remember({ 
    return generateRandomLayerId("circle")
}), com.mapbox.maps.extension.compose.style.layers.generated.CircleLayerState circleLayerState = remember({ 
    return <init>()
}));
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static inline void CircleLayer(com.mapbox.maps.extension.compose.style.sources.SourceState sourceState, String layerId = remember({ 
    return generateRandomLayerId("circle")
}), kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.layers.generated.CircleLayerState,kotlin.Unit> init);
  }

  @androidx.compose.runtime.Stable public final class CircleLayerState {
    ctor public CircleLayerState();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getCircleBlur();
    method public com.mapbox.maps.extension.compose.style.Transition getCircleBlurTransition();
    method public com.mapbox.maps.extension.compose.style.ColorValue getCircleColor();
    method public com.mapbox.maps.extension.compose.style.Transition getCircleColorTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getCircleEmissiveStrength();
    method public com.mapbox.maps.extension.compose.style.Transition getCircleEmissiveStrengthTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getCircleOpacity();
    method public com.mapbox.maps.extension.compose.style.Transition getCircleOpacityTransition();
    method public com.mapbox.maps.extension.compose.style.layers.generated.CirclePitchAlignmentValue getCirclePitchAlignment();
    method public com.mapbox.maps.extension.compose.style.layers.generated.CirclePitchScaleValue getCirclePitchScale();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getCircleRadius();
    method public com.mapbox.maps.extension.compose.style.Transition getCircleRadiusTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getCircleSortKey();
    method public com.mapbox.maps.extension.compose.style.ColorValue getCircleStrokeColor();
    method public com.mapbox.maps.extension.compose.style.Transition getCircleStrokeColorTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getCircleStrokeOpacity();
    method public com.mapbox.maps.extension.compose.style.Transition getCircleStrokeOpacityTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getCircleStrokeWidth();
    method public com.mapbox.maps.extension.compose.style.Transition getCircleStrokeWidthTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleListValue getCircleTranslate();
    method public com.mapbox.maps.extension.compose.style.layers.generated.CircleTranslateAnchorValue getCircleTranslateAnchor();
    method public com.mapbox.maps.extension.compose.style.Transition getCircleTranslateTransition();
    method public com.mapbox.maps.extension.compose.style.layers.Filter getFilter();
    method public com.mapbox.maps.extension.compose.style.LongValue getMaxZoom();
    method public com.mapbox.maps.extension.compose.style.LongValue getMinZoom();
    method public com.mapbox.maps.extension.compose.style.StringValue getSourceLayer();
    method public com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue getVisibility();
    method public void setCircleBlur(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setCircleBlurTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setCircleColor(com.mapbox.maps.extension.compose.style.ColorValue);
    method public void setCircleColorTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setCircleEmissiveStrength(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setCircleEmissiveStrengthTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setCircleOpacity(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setCircleOpacityTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setCirclePitchAlignment(com.mapbox.maps.extension.compose.style.layers.generated.CirclePitchAlignmentValue);
    method public void setCirclePitchScale(com.mapbox.maps.extension.compose.style.layers.generated.CirclePitchScaleValue);
    method public void setCircleRadius(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setCircleRadiusTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setCircleSortKey(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setCircleStrokeColor(com.mapbox.maps.extension.compose.style.ColorValue);
    method public void setCircleStrokeColorTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setCircleStrokeOpacity(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setCircleStrokeOpacityTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setCircleStrokeWidth(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setCircleStrokeWidthTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setCircleTranslate(com.mapbox.maps.extension.compose.style.DoubleListValue);
    method public void setCircleTranslateAnchor(com.mapbox.maps.extension.compose.style.layers.generated.CircleTranslateAnchorValue);
    method public void setCircleTranslateTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setFilter(com.mapbox.maps.extension.compose.style.layers.Filter);
    method public void setMaxZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setMinZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setSourceLayer(com.mapbox.maps.extension.compose.style.StringValue);
    method public void setVisibility(com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue);
    property public final com.mapbox.maps.extension.compose.style.DoubleValue circleBlur;
    property public final com.mapbox.maps.extension.compose.style.Transition circleBlurTransition;
    property public final com.mapbox.maps.extension.compose.style.ColorValue circleColor;
    property public final com.mapbox.maps.extension.compose.style.Transition circleColorTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue circleEmissiveStrength;
    property public final com.mapbox.maps.extension.compose.style.Transition circleEmissiveStrengthTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue circleOpacity;
    property public final com.mapbox.maps.extension.compose.style.Transition circleOpacityTransition;
    property public final com.mapbox.maps.extension.compose.style.layers.generated.CirclePitchAlignmentValue circlePitchAlignment;
    property public final com.mapbox.maps.extension.compose.style.layers.generated.CirclePitchScaleValue circlePitchScale;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue circleRadius;
    property public final com.mapbox.maps.extension.compose.style.Transition circleRadiusTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue circleSortKey;
    property public final com.mapbox.maps.extension.compose.style.ColorValue circleStrokeColor;
    property public final com.mapbox.maps.extension.compose.style.Transition circleStrokeColorTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue circleStrokeOpacity;
    property public final com.mapbox.maps.extension.compose.style.Transition circleStrokeOpacityTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue circleStrokeWidth;
    property public final com.mapbox.maps.extension.compose.style.Transition circleStrokeWidthTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleListValue circleTranslate;
    property public final com.mapbox.maps.extension.compose.style.layers.generated.CircleTranslateAnchorValue circleTranslateAnchor;
    property public final com.mapbox.maps.extension.compose.style.Transition circleTranslateTransition;
    property public final com.mapbox.maps.extension.compose.style.layers.Filter filter;
    property public final com.mapbox.maps.extension.compose.style.LongValue maxZoom;
    property public final com.mapbox.maps.extension.compose.style.LongValue minZoom;
    property public final com.mapbox.maps.extension.compose.style.StringValue sourceLayer;
    property public final com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue visibility;
  }

  @androidx.compose.runtime.Immutable public final class CirclePitchAlignmentValue {
    ctor public CirclePitchAlignmentValue(com.mapbox.bindgen.Value value);
    ctor public CirclePitchAlignmentValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.CirclePitchAlignmentValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.CirclePitchAlignmentValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.CirclePitchAlignmentValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.CirclePitchAlignmentValue MAP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.CirclePitchAlignmentValue VIEWPORT;
  }

  public static final class CirclePitchAlignmentValue.Companion {
  }

  @androidx.compose.runtime.Immutable public final class CirclePitchScaleValue {
    ctor public CirclePitchScaleValue(com.mapbox.bindgen.Value value);
    ctor public CirclePitchScaleValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.CirclePitchScaleValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.CirclePitchScaleValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.CirclePitchScaleValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.CirclePitchScaleValue MAP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.CirclePitchScaleValue VIEWPORT;
  }

  public static final class CirclePitchScaleValue.Companion {
  }

  @androidx.compose.runtime.Immutable public final class CircleTranslateAnchorValue {
    ctor public CircleTranslateAnchorValue(com.mapbox.bindgen.Value value);
    ctor public CircleTranslateAnchorValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.CircleTranslateAnchorValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.CircleTranslateAnchorValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.CircleTranslateAnchorValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.CircleTranslateAnchorValue MAP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.CircleTranslateAnchorValue VIEWPORT;
  }

  public static final class CircleTranslateAnchorValue.Companion {
  }

  public final class ClipLayerKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void ClipLayer(com.mapbox.maps.extension.compose.style.sources.SourceState sourceState, String layerId = remember({ 
    return generateRandomLayerId("clip")
}), com.mapbox.maps.extension.compose.style.layers.generated.ClipLayerState clipLayerState = remember({ 
    return <init>()
}));
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static inline void ClipLayer(com.mapbox.maps.extension.compose.style.sources.SourceState sourceState, String layerId = remember({ 
    return generateRandomLayerId("clip")
}), kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.layers.generated.ClipLayerState,kotlin.Unit> init);
  }

  @androidx.compose.runtime.Stable @com.mapbox.maps.MapboxExperimental public final class ClipLayerState {
    ctor public ClipLayerState();
    method public com.mapbox.maps.extension.compose.style.layers.generated.ClipLayerTypesListValue getClipLayerTypes();
    method public com.mapbox.maps.extension.compose.style.layers.Filter getFilter();
    method public com.mapbox.maps.extension.compose.style.LongValue getMaxZoom();
    method public com.mapbox.maps.extension.compose.style.LongValue getMinZoom();
    method public com.mapbox.maps.extension.compose.style.StringValue getSourceLayer();
    method public com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue getVisibility();
    method public void setClipLayerTypes(com.mapbox.maps.extension.compose.style.layers.generated.ClipLayerTypesListValue);
    method public void setFilter(com.mapbox.maps.extension.compose.style.layers.Filter);
    method public void setMaxZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setMinZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setSourceLayer(com.mapbox.maps.extension.compose.style.StringValue);
    method public void setVisibility(com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue);
    property public final com.mapbox.maps.extension.compose.style.layers.generated.ClipLayerTypesListValue clipLayerTypes;
    property public final com.mapbox.maps.extension.compose.style.layers.Filter filter;
    property public final com.mapbox.maps.extension.compose.style.LongValue maxZoom;
    property public final com.mapbox.maps.extension.compose.style.LongValue minZoom;
    property public final com.mapbox.maps.extension.compose.style.StringValue sourceLayer;
    property public final com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue visibility;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class ClipLayerTypes {
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.ClipLayerTypes copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.ClipLayerTypes.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.ClipLayerTypes MODEL;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.ClipLayerTypes SYMBOL;
  }

  public static final class ClipLayerTypes.Companion {
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class ClipLayerTypesListValue {
    ctor public ClipLayerTypesListValue(com.mapbox.bindgen.Value value);
    ctor public ClipLayerTypesListValue(java.util.List<com.mapbox.maps.extension.compose.style.layers.generated.ClipLayerTypes> value);
    ctor public ClipLayerTypesListValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.ClipLayerTypesListValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.ClipLayerTypesListValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.ClipLayerTypesListValue DEFAULT;
  }

  public static final class ClipLayerTypesListValue.Companion {
  }

  public final class FillExtrusionLayerKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static void FillExtrusionLayer(com.mapbox.maps.extension.compose.style.sources.SourceState sourceState, String layerId = remember({ 
    return generateRandomLayerId("fill-extrusion")
}), com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionLayerState fillExtrusionLayerState = remember({ 
    return <init>()
}));
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static inline void FillExtrusionLayer(com.mapbox.maps.extension.compose.style.sources.SourceState sourceState, String layerId = remember({ 
    return generateRandomLayerId("fill-extrusion")
}), kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionLayerState,kotlin.Unit> init);
  }

  @androidx.compose.runtime.Stable public final class FillExtrusionLayerState {
    ctor public FillExtrusionLayerState();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getFillExtrusionAmbientOcclusionGroundAttenuation();
    method public com.mapbox.maps.extension.compose.style.Transition getFillExtrusionAmbientOcclusionGroundAttenuationTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getFillExtrusionAmbientOcclusionGroundRadius();
    method public com.mapbox.maps.extension.compose.style.Transition getFillExtrusionAmbientOcclusionGroundRadiusTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getFillExtrusionAmbientOcclusionIntensity();
    method public com.mapbox.maps.extension.compose.style.Transition getFillExtrusionAmbientOcclusionIntensityTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getFillExtrusionAmbientOcclusionRadius();
    method public com.mapbox.maps.extension.compose.style.Transition getFillExtrusionAmbientOcclusionRadiusTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getFillExtrusionAmbientOcclusionWallRadius();
    method public com.mapbox.maps.extension.compose.style.Transition getFillExtrusionAmbientOcclusionWallRadiusTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getFillExtrusionBase();
    method public com.mapbox.maps.extension.compose.style.Transition getFillExtrusionBaseTransition();
    method public com.mapbox.maps.extension.compose.style.ColorValue getFillExtrusionColor();
    method public com.mapbox.maps.extension.compose.style.Transition getFillExtrusionColorTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getFillExtrusionCutoffFadeRange();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getFillExtrusionEdgeRadius();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getFillExtrusionEmissiveStrength();
    method public com.mapbox.maps.extension.compose.style.Transition getFillExtrusionEmissiveStrengthTransition();
    method public com.mapbox.maps.extension.compose.style.ColorValue getFillExtrusionFloodLightColor();
    method public com.mapbox.maps.extension.compose.style.Transition getFillExtrusionFloodLightColorTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getFillExtrusionFloodLightGroundAttenuation();
    method public com.mapbox.maps.extension.compose.style.Transition getFillExtrusionFloodLightGroundAttenuationTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getFillExtrusionFloodLightGroundRadius();
    method public com.mapbox.maps.extension.compose.style.Transition getFillExtrusionFloodLightGroundRadiusTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getFillExtrusionFloodLightIntensity();
    method public com.mapbox.maps.extension.compose.style.Transition getFillExtrusionFloodLightIntensityTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getFillExtrusionFloodLightWallRadius();
    method public com.mapbox.maps.extension.compose.style.Transition getFillExtrusionFloodLightWallRadiusTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getFillExtrusionHeight();
    method public com.mapbox.maps.extension.compose.style.Transition getFillExtrusionHeightTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getFillExtrusionOpacity();
    method public com.mapbox.maps.extension.compose.style.Transition getFillExtrusionOpacityTransition();
    method public com.mapbox.maps.extension.compose.style.layers.ImageValue getFillExtrusionPattern();
    method public com.mapbox.maps.extension.compose.style.BooleanValue getFillExtrusionRoundedRoof();
    method public com.mapbox.maps.extension.compose.style.DoubleListValue getFillExtrusionTranslate();
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionTranslateAnchorValue getFillExtrusionTranslateAnchor();
    method public com.mapbox.maps.extension.compose.style.Transition getFillExtrusionTranslateTransition();
    method public com.mapbox.maps.extension.compose.style.BooleanValue getFillExtrusionVerticalGradient();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getFillExtrusionVerticalScale();
    method public com.mapbox.maps.extension.compose.style.Transition getFillExtrusionVerticalScaleTransition();
    method public com.mapbox.maps.extension.compose.style.layers.Filter getFilter();
    method public com.mapbox.maps.extension.compose.style.LongValue getMaxZoom();
    method public com.mapbox.maps.extension.compose.style.LongValue getMinZoom();
    method public com.mapbox.maps.extension.compose.style.StringValue getSourceLayer();
    method public com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue getVisibility();
    method public void setFillExtrusionAmbientOcclusionGroundAttenuation(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setFillExtrusionAmbientOcclusionGroundAttenuationTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setFillExtrusionAmbientOcclusionGroundRadius(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setFillExtrusionAmbientOcclusionGroundRadiusTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setFillExtrusionAmbientOcclusionIntensity(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setFillExtrusionAmbientOcclusionIntensityTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setFillExtrusionAmbientOcclusionRadius(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setFillExtrusionAmbientOcclusionRadiusTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setFillExtrusionAmbientOcclusionWallRadius(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setFillExtrusionAmbientOcclusionWallRadiusTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setFillExtrusionBase(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setFillExtrusionBaseTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setFillExtrusionColor(com.mapbox.maps.extension.compose.style.ColorValue);
    method public void setFillExtrusionColorTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setFillExtrusionCutoffFadeRange(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setFillExtrusionEdgeRadius(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setFillExtrusionEmissiveStrength(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setFillExtrusionEmissiveStrengthTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setFillExtrusionFloodLightColor(com.mapbox.maps.extension.compose.style.ColorValue);
    method public void setFillExtrusionFloodLightColorTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setFillExtrusionFloodLightGroundAttenuation(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setFillExtrusionFloodLightGroundAttenuationTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setFillExtrusionFloodLightGroundRadius(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setFillExtrusionFloodLightGroundRadiusTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setFillExtrusionFloodLightIntensity(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setFillExtrusionFloodLightIntensityTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setFillExtrusionFloodLightWallRadius(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setFillExtrusionFloodLightWallRadiusTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setFillExtrusionHeight(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setFillExtrusionHeightTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setFillExtrusionOpacity(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setFillExtrusionOpacityTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setFillExtrusionPattern(com.mapbox.maps.extension.compose.style.layers.ImageValue);
    method public void setFillExtrusionRoundedRoof(com.mapbox.maps.extension.compose.style.BooleanValue);
    method public void setFillExtrusionTranslate(com.mapbox.maps.extension.compose.style.DoubleListValue);
    method public void setFillExtrusionTranslateAnchor(com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionTranslateAnchorValue);
    method public void setFillExtrusionTranslateTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setFillExtrusionVerticalGradient(com.mapbox.maps.extension.compose.style.BooleanValue);
    method public void setFillExtrusionVerticalScale(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setFillExtrusionVerticalScaleTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setFilter(com.mapbox.maps.extension.compose.style.layers.Filter);
    method public void setMaxZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setMinZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setSourceLayer(com.mapbox.maps.extension.compose.style.StringValue);
    method public void setVisibility(com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue);
    property public final com.mapbox.maps.extension.compose.style.DoubleValue fillExtrusionAmbientOcclusionGroundAttenuation;
    property public final com.mapbox.maps.extension.compose.style.Transition fillExtrusionAmbientOcclusionGroundAttenuationTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue fillExtrusionAmbientOcclusionGroundRadius;
    property public final com.mapbox.maps.extension.compose.style.Transition fillExtrusionAmbientOcclusionGroundRadiusTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue fillExtrusionAmbientOcclusionIntensity;
    property public final com.mapbox.maps.extension.compose.style.Transition fillExtrusionAmbientOcclusionIntensityTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue fillExtrusionAmbientOcclusionRadius;
    property public final com.mapbox.maps.extension.compose.style.Transition fillExtrusionAmbientOcclusionRadiusTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue fillExtrusionAmbientOcclusionWallRadius;
    property public final com.mapbox.maps.extension.compose.style.Transition fillExtrusionAmbientOcclusionWallRadiusTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue fillExtrusionBase;
    property public final com.mapbox.maps.extension.compose.style.Transition fillExtrusionBaseTransition;
    property public final com.mapbox.maps.extension.compose.style.ColorValue fillExtrusionColor;
    property public final com.mapbox.maps.extension.compose.style.Transition fillExtrusionColorTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue fillExtrusionCutoffFadeRange;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue fillExtrusionEdgeRadius;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue fillExtrusionEmissiveStrength;
    property public final com.mapbox.maps.extension.compose.style.Transition fillExtrusionEmissiveStrengthTransition;
    property public final com.mapbox.maps.extension.compose.style.ColorValue fillExtrusionFloodLightColor;
    property public final com.mapbox.maps.extension.compose.style.Transition fillExtrusionFloodLightColorTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue fillExtrusionFloodLightGroundAttenuation;
    property public final com.mapbox.maps.extension.compose.style.Transition fillExtrusionFloodLightGroundAttenuationTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue fillExtrusionFloodLightGroundRadius;
    property public final com.mapbox.maps.extension.compose.style.Transition fillExtrusionFloodLightGroundRadiusTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue fillExtrusionFloodLightIntensity;
    property public final com.mapbox.maps.extension.compose.style.Transition fillExtrusionFloodLightIntensityTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue fillExtrusionFloodLightWallRadius;
    property public final com.mapbox.maps.extension.compose.style.Transition fillExtrusionFloodLightWallRadiusTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue fillExtrusionHeight;
    property public final com.mapbox.maps.extension.compose.style.Transition fillExtrusionHeightTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue fillExtrusionOpacity;
    property public final com.mapbox.maps.extension.compose.style.Transition fillExtrusionOpacityTransition;
    property public final com.mapbox.maps.extension.compose.style.layers.ImageValue fillExtrusionPattern;
    property public final com.mapbox.maps.extension.compose.style.BooleanValue fillExtrusionRoundedRoof;
    property public final com.mapbox.maps.extension.compose.style.DoubleListValue fillExtrusionTranslate;
    property public final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionTranslateAnchorValue fillExtrusionTranslateAnchor;
    property public final com.mapbox.maps.extension.compose.style.Transition fillExtrusionTranslateTransition;
    property public final com.mapbox.maps.extension.compose.style.BooleanValue fillExtrusionVerticalGradient;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue fillExtrusionVerticalScale;
    property public final com.mapbox.maps.extension.compose.style.Transition fillExtrusionVerticalScaleTransition;
    property public final com.mapbox.maps.extension.compose.style.layers.Filter filter;
    property public final com.mapbox.maps.extension.compose.style.LongValue maxZoom;
    property public final com.mapbox.maps.extension.compose.style.LongValue minZoom;
    property public final com.mapbox.maps.extension.compose.style.StringValue sourceLayer;
    property public final com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue visibility;
  }

  @androidx.compose.runtime.Immutable public final class FillExtrusionTranslateAnchorValue {
    ctor public FillExtrusionTranslateAnchorValue(com.mapbox.bindgen.Value value);
    ctor public FillExtrusionTranslateAnchorValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionTranslateAnchorValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionTranslateAnchorValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionTranslateAnchorValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionTranslateAnchorValue MAP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillExtrusionTranslateAnchorValue VIEWPORT;
  }

  public static final class FillExtrusionTranslateAnchorValue.Companion {
  }

  public final class FillLayerKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static void FillLayer(com.mapbox.maps.extension.compose.style.sources.SourceState sourceState, String layerId = remember({ 
    return generateRandomLayerId("fill")
}), com.mapbox.maps.extension.compose.style.layers.generated.FillLayerState fillLayerState = remember({ 
    return <init>()
}));
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static inline void FillLayer(com.mapbox.maps.extension.compose.style.sources.SourceState sourceState, String layerId = remember({ 
    return generateRandomLayerId("fill")
}), kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.layers.generated.FillLayerState,kotlin.Unit> init);
  }

  @androidx.compose.runtime.Stable public final class FillLayerState {
    ctor public FillLayerState();
    method public com.mapbox.maps.extension.compose.style.BooleanValue getFillAntialias();
    method public com.mapbox.maps.extension.compose.style.ColorValue getFillColor();
    method public com.mapbox.maps.extension.compose.style.Transition getFillColorTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getFillEmissiveStrength();
    method public com.mapbox.maps.extension.compose.style.Transition getFillEmissiveStrengthTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getFillOpacity();
    method public com.mapbox.maps.extension.compose.style.Transition getFillOpacityTransition();
    method public com.mapbox.maps.extension.compose.style.ColorValue getFillOutlineColor();
    method public com.mapbox.maps.extension.compose.style.Transition getFillOutlineColorTransition();
    method public com.mapbox.maps.extension.compose.style.layers.ImageValue getFillPattern();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getFillSortKey();
    method public com.mapbox.maps.extension.compose.style.DoubleListValue getFillTranslate();
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillTranslateAnchorValue getFillTranslateAnchor();
    method public com.mapbox.maps.extension.compose.style.Transition getFillTranslateTransition();
    method public com.mapbox.maps.extension.compose.style.layers.Filter getFilter();
    method public com.mapbox.maps.extension.compose.style.LongValue getMaxZoom();
    method public com.mapbox.maps.extension.compose.style.LongValue getMinZoom();
    method public com.mapbox.maps.extension.compose.style.StringValue getSourceLayer();
    method public com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue getVisibility();
    method public void setFillAntialias(com.mapbox.maps.extension.compose.style.BooleanValue);
    method public void setFillColor(com.mapbox.maps.extension.compose.style.ColorValue);
    method public void setFillColorTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setFillEmissiveStrength(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setFillEmissiveStrengthTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setFillOpacity(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setFillOpacityTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setFillOutlineColor(com.mapbox.maps.extension.compose.style.ColorValue);
    method public void setFillOutlineColorTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setFillPattern(com.mapbox.maps.extension.compose.style.layers.ImageValue);
    method public void setFillSortKey(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setFillTranslate(com.mapbox.maps.extension.compose.style.DoubleListValue);
    method public void setFillTranslateAnchor(com.mapbox.maps.extension.compose.style.layers.generated.FillTranslateAnchorValue);
    method public void setFillTranslateTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setFilter(com.mapbox.maps.extension.compose.style.layers.Filter);
    method public void setMaxZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setMinZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setSourceLayer(com.mapbox.maps.extension.compose.style.StringValue);
    method public void setVisibility(com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue);
    property public final com.mapbox.maps.extension.compose.style.BooleanValue fillAntialias;
    property public final com.mapbox.maps.extension.compose.style.ColorValue fillColor;
    property public final com.mapbox.maps.extension.compose.style.Transition fillColorTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue fillEmissiveStrength;
    property public final com.mapbox.maps.extension.compose.style.Transition fillEmissiveStrengthTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue fillOpacity;
    property public final com.mapbox.maps.extension.compose.style.Transition fillOpacityTransition;
    property public final com.mapbox.maps.extension.compose.style.ColorValue fillOutlineColor;
    property public final com.mapbox.maps.extension.compose.style.Transition fillOutlineColorTransition;
    property public final com.mapbox.maps.extension.compose.style.layers.ImageValue fillPattern;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue fillSortKey;
    property public final com.mapbox.maps.extension.compose.style.DoubleListValue fillTranslate;
    property public final com.mapbox.maps.extension.compose.style.layers.generated.FillTranslateAnchorValue fillTranslateAnchor;
    property public final com.mapbox.maps.extension.compose.style.Transition fillTranslateTransition;
    property public final com.mapbox.maps.extension.compose.style.layers.Filter filter;
    property public final com.mapbox.maps.extension.compose.style.LongValue maxZoom;
    property public final com.mapbox.maps.extension.compose.style.LongValue minZoom;
    property public final com.mapbox.maps.extension.compose.style.StringValue sourceLayer;
    property public final com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue visibility;
  }

  @androidx.compose.runtime.Immutable public final class FillTranslateAnchorValue {
    ctor public FillTranslateAnchorValue(com.mapbox.bindgen.Value value);
    ctor public FillTranslateAnchorValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.FillTranslateAnchorValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillTranslateAnchorValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillTranslateAnchorValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillTranslateAnchorValue MAP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.FillTranslateAnchorValue VIEWPORT;
  }

  public static final class FillTranslateAnchorValue.Companion {
  }

  public final class HeatmapLayerKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static void HeatmapLayer(com.mapbox.maps.extension.compose.style.sources.SourceState sourceState, String layerId = remember({ 
    return generateRandomLayerId("heatmap")
}), com.mapbox.maps.extension.compose.style.layers.generated.HeatmapLayerState heatmapLayerState = remember({ 
    return <init>()
}));
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static inline void HeatmapLayer(com.mapbox.maps.extension.compose.style.sources.SourceState sourceState, String layerId = remember({ 
    return generateRandomLayerId("heatmap")
}), kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.layers.generated.HeatmapLayerState,kotlin.Unit> init);
  }

  @androidx.compose.runtime.Stable public final class HeatmapLayerState {
    ctor public HeatmapLayerState();
    method public com.mapbox.maps.extension.compose.style.layers.Filter getFilter();
    method public com.mapbox.maps.extension.compose.style.ColorValue getHeatmapColor();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getHeatmapIntensity();
    method public com.mapbox.maps.extension.compose.style.Transition getHeatmapIntensityTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getHeatmapOpacity();
    method public com.mapbox.maps.extension.compose.style.Transition getHeatmapOpacityTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getHeatmapRadius();
    method public com.mapbox.maps.extension.compose.style.Transition getHeatmapRadiusTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getHeatmapWeight();
    method public com.mapbox.maps.extension.compose.style.LongValue getMaxZoom();
    method public com.mapbox.maps.extension.compose.style.LongValue getMinZoom();
    method public com.mapbox.maps.extension.compose.style.StringValue getSourceLayer();
    method public com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue getVisibility();
    method public void setFilter(com.mapbox.maps.extension.compose.style.layers.Filter);
    method public void setHeatmapColor(com.mapbox.maps.extension.compose.style.ColorValue);
    method public void setHeatmapIntensity(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setHeatmapIntensityTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setHeatmapOpacity(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setHeatmapOpacityTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setHeatmapRadius(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setHeatmapRadiusTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setHeatmapWeight(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setMaxZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setMinZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setSourceLayer(com.mapbox.maps.extension.compose.style.StringValue);
    method public void setVisibility(com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue);
    property public final com.mapbox.maps.extension.compose.style.layers.Filter filter;
    property public final com.mapbox.maps.extension.compose.style.ColorValue heatmapColor;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue heatmapIntensity;
    property public final com.mapbox.maps.extension.compose.style.Transition heatmapIntensityTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue heatmapOpacity;
    property public final com.mapbox.maps.extension.compose.style.Transition heatmapOpacityTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue heatmapRadius;
    property public final com.mapbox.maps.extension.compose.style.Transition heatmapRadiusTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue heatmapWeight;
    property public final com.mapbox.maps.extension.compose.style.LongValue maxZoom;
    property public final com.mapbox.maps.extension.compose.style.LongValue minZoom;
    property public final com.mapbox.maps.extension.compose.style.StringValue sourceLayer;
    property public final com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue visibility;
  }

  @androidx.compose.runtime.Immutable public final class HillshadeIlluminationAnchorValue {
    ctor public HillshadeIlluminationAnchorValue(com.mapbox.bindgen.Value value);
    ctor public HillshadeIlluminationAnchorValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.HillshadeIlluminationAnchorValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.HillshadeIlluminationAnchorValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.HillshadeIlluminationAnchorValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.HillshadeIlluminationAnchorValue MAP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.HillshadeIlluminationAnchorValue VIEWPORT;
  }

  public static final class HillshadeIlluminationAnchorValue.Companion {
  }

  public final class HillshadeLayerKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static void HillshadeLayer(com.mapbox.maps.extension.compose.style.sources.SourceState sourceState, String layerId = remember({ 
    return generateRandomLayerId("hillshade")
}), com.mapbox.maps.extension.compose.style.layers.generated.HillshadeLayerState hillshadeLayerState = remember({ 
    return <init>()
}));
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static inline void HillshadeLayer(com.mapbox.maps.extension.compose.style.sources.SourceState sourceState, String layerId = remember({ 
    return generateRandomLayerId("hillshade")
}), kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.layers.generated.HillshadeLayerState,kotlin.Unit> init);
  }

  @androidx.compose.runtime.Stable public final class HillshadeLayerState {
    ctor public HillshadeLayerState();
    method public com.mapbox.maps.extension.compose.style.layers.Filter getFilter();
    method public com.mapbox.maps.extension.compose.style.ColorValue getHillshadeAccentColor();
    method public com.mapbox.maps.extension.compose.style.Transition getHillshadeAccentColorTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getHillshadeEmissiveStrength();
    method public com.mapbox.maps.extension.compose.style.Transition getHillshadeEmissiveStrengthTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getHillshadeExaggeration();
    method public com.mapbox.maps.extension.compose.style.Transition getHillshadeExaggerationTransition();
    method public com.mapbox.maps.extension.compose.style.ColorValue getHillshadeHighlightColor();
    method public com.mapbox.maps.extension.compose.style.Transition getHillshadeHighlightColorTransition();
    method public com.mapbox.maps.extension.compose.style.layers.generated.HillshadeIlluminationAnchorValue getHillshadeIlluminationAnchor();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getHillshadeIlluminationDirection();
    method public com.mapbox.maps.extension.compose.style.ColorValue getHillshadeShadowColor();
    method public com.mapbox.maps.extension.compose.style.Transition getHillshadeShadowColorTransition();
    method public com.mapbox.maps.extension.compose.style.LongValue getMaxZoom();
    method public com.mapbox.maps.extension.compose.style.LongValue getMinZoom();
    method public com.mapbox.maps.extension.compose.style.StringValue getSourceLayer();
    method public com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue getVisibility();
    method public void setFilter(com.mapbox.maps.extension.compose.style.layers.Filter);
    method public void setHillshadeAccentColor(com.mapbox.maps.extension.compose.style.ColorValue);
    method public void setHillshadeAccentColorTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setHillshadeEmissiveStrength(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setHillshadeEmissiveStrengthTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setHillshadeExaggeration(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setHillshadeExaggerationTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setHillshadeHighlightColor(com.mapbox.maps.extension.compose.style.ColorValue);
    method public void setHillshadeHighlightColorTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setHillshadeIlluminationAnchor(com.mapbox.maps.extension.compose.style.layers.generated.HillshadeIlluminationAnchorValue);
    method public void setHillshadeIlluminationDirection(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setHillshadeShadowColor(com.mapbox.maps.extension.compose.style.ColorValue);
    method public void setHillshadeShadowColorTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setMaxZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setMinZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setSourceLayer(com.mapbox.maps.extension.compose.style.StringValue);
    method public void setVisibility(com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue);
    property public final com.mapbox.maps.extension.compose.style.layers.Filter filter;
    property public final com.mapbox.maps.extension.compose.style.ColorValue hillshadeAccentColor;
    property public final com.mapbox.maps.extension.compose.style.Transition hillshadeAccentColorTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue hillshadeEmissiveStrength;
    property public final com.mapbox.maps.extension.compose.style.Transition hillshadeEmissiveStrengthTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue hillshadeExaggeration;
    property public final com.mapbox.maps.extension.compose.style.Transition hillshadeExaggerationTransition;
    property public final com.mapbox.maps.extension.compose.style.ColorValue hillshadeHighlightColor;
    property public final com.mapbox.maps.extension.compose.style.Transition hillshadeHighlightColorTransition;
    property public final com.mapbox.maps.extension.compose.style.layers.generated.HillshadeIlluminationAnchorValue hillshadeIlluminationAnchor;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue hillshadeIlluminationDirection;
    property public final com.mapbox.maps.extension.compose.style.ColorValue hillshadeShadowColor;
    property public final com.mapbox.maps.extension.compose.style.Transition hillshadeShadowColorTransition;
    property public final com.mapbox.maps.extension.compose.style.LongValue maxZoom;
    property public final com.mapbox.maps.extension.compose.style.LongValue minZoom;
    property public final com.mapbox.maps.extension.compose.style.StringValue sourceLayer;
    property public final com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue visibility;
  }

  @androidx.compose.runtime.Immutable public final class IconAnchorValue {
    ctor public IconAnchorValue(com.mapbox.bindgen.Value value);
    ctor public IconAnchorValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconAnchorValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconAnchorValue BOTTOM;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconAnchorValue BOTTOM_LEFT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconAnchorValue BOTTOM_RIGHT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconAnchorValue CENTER;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconAnchorValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconAnchorValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconAnchorValue LEFT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconAnchorValue RIGHT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconAnchorValue TOP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconAnchorValue TOP_LEFT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconAnchorValue TOP_RIGHT;
  }

  public static final class IconAnchorValue.Companion {
  }

  @androidx.compose.runtime.Immutable public final class IconPitchAlignmentValue {
    ctor public IconPitchAlignmentValue(com.mapbox.bindgen.Value value);
    ctor public IconPitchAlignmentValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconPitchAlignmentValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconPitchAlignmentValue AUTO;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconPitchAlignmentValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconPitchAlignmentValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconPitchAlignmentValue MAP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconPitchAlignmentValue VIEWPORT;
  }

  public static final class IconPitchAlignmentValue.Companion {
  }

  @androidx.compose.runtime.Immutable public final class IconRotationAlignmentValue {
    ctor public IconRotationAlignmentValue(com.mapbox.bindgen.Value value);
    ctor public IconRotationAlignmentValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconRotationAlignmentValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconRotationAlignmentValue AUTO;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconRotationAlignmentValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconRotationAlignmentValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconRotationAlignmentValue MAP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconRotationAlignmentValue VIEWPORT;
  }

  public static final class IconRotationAlignmentValue.Companion {
  }

  @androidx.compose.runtime.Immutable public final class IconTextFitValue {
    ctor public IconTextFitValue(com.mapbox.bindgen.Value value);
    ctor public IconTextFitValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconTextFitValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconTextFitValue BOTH;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconTextFitValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconTextFitValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconTextFitValue HEIGHT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconTextFitValue NONE;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconTextFitValue WIDTH;
  }

  public static final class IconTextFitValue.Companion {
  }

  @androidx.compose.runtime.Immutable public final class IconTranslateAnchorValue {
    ctor public IconTranslateAnchorValue(com.mapbox.bindgen.Value value);
    ctor public IconTranslateAnchorValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconTranslateAnchorValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconTranslateAnchorValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconTranslateAnchorValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconTranslateAnchorValue MAP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.IconTranslateAnchorValue VIEWPORT;
  }

  public static final class IconTranslateAnchorValue.Companion {
  }

  @androidx.compose.runtime.Immutable public final class LineCapValue {
    ctor public LineCapValue(com.mapbox.bindgen.Value value);
    ctor public LineCapValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineCapValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineCapValue BUTT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineCapValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineCapValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineCapValue ROUND;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineCapValue SQUARE;
  }

  public static final class LineCapValue.Companion {
  }

  @androidx.compose.runtime.Immutable public final class LineJoinValue {
    ctor public LineJoinValue(com.mapbox.bindgen.Value value);
    ctor public LineJoinValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineJoinValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineJoinValue BEVEL;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineJoinValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineJoinValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineJoinValue MITER;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineJoinValue NONE;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineJoinValue ROUND;
  }

  public static final class LineJoinValue.Companion {
  }

  public final class LineLayerKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static void LineLayer(com.mapbox.maps.extension.compose.style.sources.SourceState sourceState, String layerId = remember({ 
    return generateRandomLayerId("line")
}), com.mapbox.maps.extension.compose.style.layers.generated.LineLayerState lineLayerState = remember({ 
    return <init>()
}));
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static inline void LineLayer(com.mapbox.maps.extension.compose.style.sources.SourceState sourceState, String layerId = remember({ 
    return generateRandomLayerId("line")
}), kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.layers.generated.LineLayerState,kotlin.Unit> init);
  }

  @androidx.compose.runtime.Stable public final class LineLayerState {
    ctor public LineLayerState();
    method public com.mapbox.maps.extension.compose.style.layers.Filter getFilter();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getLineBlur();
    method public com.mapbox.maps.extension.compose.style.Transition getLineBlurTransition();
    method public com.mapbox.maps.extension.compose.style.ColorValue getLineBorderColor();
    method public com.mapbox.maps.extension.compose.style.Transition getLineBorderColorTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getLineBorderWidth();
    method public com.mapbox.maps.extension.compose.style.Transition getLineBorderWidthTransition();
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineCapValue getLineCap();
    method public com.mapbox.maps.extension.compose.style.ColorValue getLineColor();
    method public com.mapbox.maps.extension.compose.style.Transition getLineColorTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleListValue getLineDasharray();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getLineDepthOcclusionFactor();
    method public com.mapbox.maps.extension.compose.style.Transition getLineDepthOcclusionFactorTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getLineEmissiveStrength();
    method public com.mapbox.maps.extension.compose.style.Transition getLineEmissiveStrengthTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getLineGapWidth();
    method public com.mapbox.maps.extension.compose.style.Transition getLineGapWidthTransition();
    method public com.mapbox.maps.extension.compose.style.ColorValue getLineGradient();
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineJoinValue getLineJoin();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getLineMiterLimit();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getLineOcclusionOpacity();
    method public com.mapbox.maps.extension.compose.style.Transition getLineOcclusionOpacityTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getLineOffset();
    method public com.mapbox.maps.extension.compose.style.Transition getLineOffsetTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getLineOpacity();
    method public com.mapbox.maps.extension.compose.style.Transition getLineOpacityTransition();
    method public com.mapbox.maps.extension.compose.style.layers.ImageValue getLinePattern();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getLineRoundLimit();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getLineSortKey();
    method public com.mapbox.maps.extension.compose.style.DoubleListValue getLineTranslate();
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineTranslateAnchorValue getLineTranslateAnchor();
    method public com.mapbox.maps.extension.compose.style.Transition getLineTranslateTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleListValue getLineTrimOffset();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getLineWidth();
    method public com.mapbox.maps.extension.compose.style.Transition getLineWidthTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getLineZOffset();
    method public com.mapbox.maps.extension.compose.style.LongValue getMaxZoom();
    method public com.mapbox.maps.extension.compose.style.LongValue getMinZoom();
    method public com.mapbox.maps.extension.compose.style.StringValue getSourceLayer();
    method public com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue getVisibility();
    method public void setFilter(com.mapbox.maps.extension.compose.style.layers.Filter);
    method public void setLineBlur(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setLineBlurTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setLineBorderColor(com.mapbox.maps.extension.compose.style.ColorValue);
    method public void setLineBorderColorTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setLineBorderWidth(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setLineBorderWidthTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setLineCap(com.mapbox.maps.extension.compose.style.layers.generated.LineCapValue);
    method public void setLineColor(com.mapbox.maps.extension.compose.style.ColorValue);
    method public void setLineColorTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setLineDasharray(com.mapbox.maps.extension.compose.style.DoubleListValue);
    method public void setLineDepthOcclusionFactor(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setLineDepthOcclusionFactorTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setLineEmissiveStrength(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setLineEmissiveStrengthTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setLineGapWidth(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setLineGapWidthTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setLineGradient(com.mapbox.maps.extension.compose.style.ColorValue);
    method public void setLineJoin(com.mapbox.maps.extension.compose.style.layers.generated.LineJoinValue);
    method public void setLineMiterLimit(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setLineOcclusionOpacity(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setLineOcclusionOpacityTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setLineOffset(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setLineOffsetTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setLineOpacity(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setLineOpacityTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setLinePattern(com.mapbox.maps.extension.compose.style.layers.ImageValue);
    method public void setLineRoundLimit(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setLineSortKey(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setLineTranslate(com.mapbox.maps.extension.compose.style.DoubleListValue);
    method public void setLineTranslateAnchor(com.mapbox.maps.extension.compose.style.layers.generated.LineTranslateAnchorValue);
    method public void setLineTranslateTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setLineTrimOffset(com.mapbox.maps.extension.compose.style.DoubleListValue);
    method public void setLineWidth(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setLineWidthTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setLineZOffset(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setMaxZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setMinZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setSourceLayer(com.mapbox.maps.extension.compose.style.StringValue);
    method public void setVisibility(com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue);
    property public final com.mapbox.maps.extension.compose.style.layers.Filter filter;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue lineBlur;
    property public final com.mapbox.maps.extension.compose.style.Transition lineBlurTransition;
    property public final com.mapbox.maps.extension.compose.style.ColorValue lineBorderColor;
    property public final com.mapbox.maps.extension.compose.style.Transition lineBorderColorTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue lineBorderWidth;
    property public final com.mapbox.maps.extension.compose.style.Transition lineBorderWidthTransition;
    property public final com.mapbox.maps.extension.compose.style.layers.generated.LineCapValue lineCap;
    property public final com.mapbox.maps.extension.compose.style.ColorValue lineColor;
    property public final com.mapbox.maps.extension.compose.style.Transition lineColorTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleListValue lineDasharray;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue lineDepthOcclusionFactor;
    property public final com.mapbox.maps.extension.compose.style.Transition lineDepthOcclusionFactorTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue lineEmissiveStrength;
    property public final com.mapbox.maps.extension.compose.style.Transition lineEmissiveStrengthTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue lineGapWidth;
    property public final com.mapbox.maps.extension.compose.style.Transition lineGapWidthTransition;
    property public final com.mapbox.maps.extension.compose.style.ColorValue lineGradient;
    property public final com.mapbox.maps.extension.compose.style.layers.generated.LineJoinValue lineJoin;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue lineMiterLimit;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue lineOcclusionOpacity;
    property public final com.mapbox.maps.extension.compose.style.Transition lineOcclusionOpacityTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue lineOffset;
    property public final com.mapbox.maps.extension.compose.style.Transition lineOffsetTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue lineOpacity;
    property public final com.mapbox.maps.extension.compose.style.Transition lineOpacityTransition;
    property public final com.mapbox.maps.extension.compose.style.layers.ImageValue linePattern;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue lineRoundLimit;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue lineSortKey;
    property public final com.mapbox.maps.extension.compose.style.DoubleListValue lineTranslate;
    property public final com.mapbox.maps.extension.compose.style.layers.generated.LineTranslateAnchorValue lineTranslateAnchor;
    property public final com.mapbox.maps.extension.compose.style.Transition lineTranslateTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleListValue lineTrimOffset;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue lineWidth;
    property public final com.mapbox.maps.extension.compose.style.Transition lineWidthTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue lineZOffset;
    property public final com.mapbox.maps.extension.compose.style.LongValue maxZoom;
    property public final com.mapbox.maps.extension.compose.style.LongValue minZoom;
    property public final com.mapbox.maps.extension.compose.style.StringValue sourceLayer;
    property public final com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue visibility;
  }

  @androidx.compose.runtime.Immutable public final class LineTranslateAnchorValue {
    ctor public LineTranslateAnchorValue(com.mapbox.bindgen.Value value);
    ctor public LineTranslateAnchorValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.LineTranslateAnchorValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineTranslateAnchorValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineTranslateAnchorValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineTranslateAnchorValue MAP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.LineTranslateAnchorValue VIEWPORT;
  }

  public static final class LineTranslateAnchorValue.Companion {
  }

  public final class LocationIndicatorLayerKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static void LocationIndicatorLayer(String layerId = remember({ 
    return generateRandomLayerId("location-indicator")
}), com.mapbox.maps.extension.compose.style.layers.generated.LocationIndicatorLayerState locationIndicatorLayerState = remember({ 
    return <init>()
}));
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static inline void LocationIndicatorLayer(String layerId = remember({ 
    return generateRandomLayerId("location-indicator")
}), kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.layers.generated.LocationIndicatorLayerState,kotlin.Unit> init);
  }

  @androidx.compose.runtime.Stable public final class LocationIndicatorLayerState {
    ctor public LocationIndicatorLayerState();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getAccuracyRadius();
    method public com.mapbox.maps.extension.compose.style.ColorValue getAccuracyRadiusBorderColor();
    method public com.mapbox.maps.extension.compose.style.Transition getAccuracyRadiusBorderColorTransition();
    method public com.mapbox.maps.extension.compose.style.ColorValue getAccuracyRadiusColor();
    method public com.mapbox.maps.extension.compose.style.Transition getAccuracyRadiusColorTransition();
    method public com.mapbox.maps.extension.compose.style.Transition getAccuracyRadiusTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getBearing();
    method public com.mapbox.maps.extension.compose.style.layers.ImageValue getBearingImage();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getBearingImageSize();
    method public com.mapbox.maps.extension.compose.style.Transition getBearingImageSizeTransition();
    method public com.mapbox.maps.extension.compose.style.Transition getBearingTransition();
    method public com.mapbox.maps.extension.compose.style.ColorValue getEmphasisCircleColor();
    method public com.mapbox.maps.extension.compose.style.Transition getEmphasisCircleColorTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getEmphasisCircleRadius();
    method public com.mapbox.maps.extension.compose.style.Transition getEmphasisCircleRadiusTransition();
    method public com.mapbox.maps.extension.compose.style.layers.Filter getFilter();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getImagePitchDisplacement();
    method public com.mapbox.maps.extension.compose.style.DoubleListValue getLocation();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getLocationIndicatorOpacity();
    method public com.mapbox.maps.extension.compose.style.Transition getLocationIndicatorOpacityTransition();
    method public com.mapbox.maps.extension.compose.style.Transition getLocationTransition();
    method public com.mapbox.maps.extension.compose.style.LongValue getMaxZoom();
    method public com.mapbox.maps.extension.compose.style.LongValue getMinZoom();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getPerspectiveCompensation();
    method public com.mapbox.maps.extension.compose.style.layers.ImageValue getShadowImage();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getShadowImageSize();
    method public com.mapbox.maps.extension.compose.style.Transition getShadowImageSizeTransition();
    method public com.mapbox.maps.extension.compose.style.StringValue getSourceLayer();
    method public com.mapbox.maps.extension.compose.style.layers.ImageValue getTopImage();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getTopImageSize();
    method public com.mapbox.maps.extension.compose.style.Transition getTopImageSizeTransition();
    method public com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue getVisibility();
    method public void setAccuracyRadius(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setAccuracyRadiusBorderColor(com.mapbox.maps.extension.compose.style.ColorValue);
    method public void setAccuracyRadiusBorderColorTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setAccuracyRadiusColor(com.mapbox.maps.extension.compose.style.ColorValue);
    method public void setAccuracyRadiusColorTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setAccuracyRadiusTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setBearing(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setBearingImage(com.mapbox.maps.extension.compose.style.layers.ImageValue);
    method public void setBearingImageSize(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setBearingImageSizeTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setBearingTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setEmphasisCircleColor(com.mapbox.maps.extension.compose.style.ColorValue);
    method public void setEmphasisCircleColorTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setEmphasisCircleRadius(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setEmphasisCircleRadiusTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setFilter(com.mapbox.maps.extension.compose.style.layers.Filter);
    method public void setImagePitchDisplacement(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setLocation(com.mapbox.maps.extension.compose.style.DoubleListValue);
    method public void setLocationIndicatorOpacity(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setLocationIndicatorOpacityTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setLocationTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setMaxZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setMinZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setPerspectiveCompensation(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setShadowImage(com.mapbox.maps.extension.compose.style.layers.ImageValue);
    method public void setShadowImageSize(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setShadowImageSizeTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setSourceLayer(com.mapbox.maps.extension.compose.style.StringValue);
    method public void setTopImage(com.mapbox.maps.extension.compose.style.layers.ImageValue);
    method public void setTopImageSize(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setTopImageSizeTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setVisibility(com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue);
    property public final com.mapbox.maps.extension.compose.style.DoubleValue accuracyRadius;
    property public final com.mapbox.maps.extension.compose.style.ColorValue accuracyRadiusBorderColor;
    property public final com.mapbox.maps.extension.compose.style.Transition accuracyRadiusBorderColorTransition;
    property public final com.mapbox.maps.extension.compose.style.ColorValue accuracyRadiusColor;
    property public final com.mapbox.maps.extension.compose.style.Transition accuracyRadiusColorTransition;
    property public final com.mapbox.maps.extension.compose.style.Transition accuracyRadiusTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue bearing;
    property public final com.mapbox.maps.extension.compose.style.layers.ImageValue bearingImage;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue bearingImageSize;
    property public final com.mapbox.maps.extension.compose.style.Transition bearingImageSizeTransition;
    property public final com.mapbox.maps.extension.compose.style.Transition bearingTransition;
    property public final com.mapbox.maps.extension.compose.style.ColorValue emphasisCircleColor;
    property public final com.mapbox.maps.extension.compose.style.Transition emphasisCircleColorTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue emphasisCircleRadius;
    property public final com.mapbox.maps.extension.compose.style.Transition emphasisCircleRadiusTransition;
    property public final com.mapbox.maps.extension.compose.style.layers.Filter filter;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue imagePitchDisplacement;
    property public final com.mapbox.maps.extension.compose.style.DoubleListValue location;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue locationIndicatorOpacity;
    property public final com.mapbox.maps.extension.compose.style.Transition locationIndicatorOpacityTransition;
    property public final com.mapbox.maps.extension.compose.style.Transition locationTransition;
    property public final com.mapbox.maps.extension.compose.style.LongValue maxZoom;
    property public final com.mapbox.maps.extension.compose.style.LongValue minZoom;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue perspectiveCompensation;
    property public final com.mapbox.maps.extension.compose.style.layers.ImageValue shadowImage;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue shadowImageSize;
    property public final com.mapbox.maps.extension.compose.style.Transition shadowImageSizeTransition;
    property public final com.mapbox.maps.extension.compose.style.StringValue sourceLayer;
    property public final com.mapbox.maps.extension.compose.style.layers.ImageValue topImage;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue topImageSize;
    property public final com.mapbox.maps.extension.compose.style.Transition topImageSizeTransition;
    property public final com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue visibility;
  }

  public final class ModelLayerKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void ModelLayer(com.mapbox.maps.extension.compose.style.sources.SourceState sourceState, String layerId = remember({ 
    return generateRandomLayerId("model")
}), com.mapbox.maps.extension.compose.style.layers.generated.ModelLayerState modelLayerState = remember({ 
    return <init>()
}));
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static inline void ModelLayer(com.mapbox.maps.extension.compose.style.sources.SourceState sourceState, String layerId = remember({ 
    return generateRandomLayerId("model")
}), kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.layers.generated.ModelLayerState,kotlin.Unit> init);
  }

  @androidx.compose.runtime.Stable @com.mapbox.maps.MapboxExperimental public final class ModelLayerState {
    ctor public ModelLayerState();
    method public com.mapbox.maps.extension.compose.style.layers.Filter getFilter();
    method public com.mapbox.maps.extension.compose.style.LongValue getMaxZoom();
    method public com.mapbox.maps.extension.compose.style.LongValue getMinZoom();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getModelAmbientOcclusionIntensity();
    method public com.mapbox.maps.extension.compose.style.Transition getModelAmbientOcclusionIntensityTransition();
    method public com.mapbox.maps.extension.compose.style.BooleanValue getModelCastShadows();
    method public com.mapbox.maps.extension.compose.style.ColorValue getModelColor();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getModelColorMixIntensity();
    method public com.mapbox.maps.extension.compose.style.Transition getModelColorMixIntensityTransition();
    method public com.mapbox.maps.extension.compose.style.Transition getModelColorTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getModelCutoffFadeRange();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getModelEmissiveStrength();
    method public com.mapbox.maps.extension.compose.style.Transition getModelEmissiveStrengthTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleListValue getModelFrontCutoff();
    method public com.mapbox.maps.extension.compose.style.DoubleListValue getModelHeightBasedEmissiveStrengthMultiplier();
    method public com.mapbox.maps.extension.compose.style.Transition getModelHeightBasedEmissiveStrengthMultiplierTransition();
    method public com.mapbox.maps.extension.compose.style.layers.ModelIdValue getModelId();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getModelOpacity();
    method public com.mapbox.maps.extension.compose.style.Transition getModelOpacityTransition();
    method public com.mapbox.maps.extension.compose.style.BooleanValue getModelReceiveShadows();
    method public com.mapbox.maps.extension.compose.style.DoubleListValue getModelRotation();
    method public com.mapbox.maps.extension.compose.style.Transition getModelRotationTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getModelRoughness();
    method public com.mapbox.maps.extension.compose.style.Transition getModelRoughnessTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleListValue getModelScale();
    method public com.mapbox.maps.extension.compose.style.layers.generated.ModelScaleModeValue getModelScaleMode();
    method public com.mapbox.maps.extension.compose.style.Transition getModelScaleTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleListValue getModelTranslation();
    method public com.mapbox.maps.extension.compose.style.Transition getModelTranslationTransition();
    method public com.mapbox.maps.extension.compose.style.layers.generated.ModelTypeValue getModelType();
    method public com.mapbox.maps.extension.compose.style.StringValue getSourceLayer();
    method public com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue getVisibility();
    method public void setFilter(com.mapbox.maps.extension.compose.style.layers.Filter);
    method public void setMaxZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setMinZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setModelAmbientOcclusionIntensity(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setModelAmbientOcclusionIntensityTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setModelCastShadows(com.mapbox.maps.extension.compose.style.BooleanValue);
    method public void setModelColor(com.mapbox.maps.extension.compose.style.ColorValue);
    method public void setModelColorMixIntensity(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setModelColorMixIntensityTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setModelColorTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setModelCutoffFadeRange(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setModelEmissiveStrength(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setModelEmissiveStrengthTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setModelFrontCutoff(com.mapbox.maps.extension.compose.style.DoubleListValue);
    method public void setModelHeightBasedEmissiveStrengthMultiplier(com.mapbox.maps.extension.compose.style.DoubleListValue);
    method public void setModelHeightBasedEmissiveStrengthMultiplierTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setModelId(com.mapbox.maps.extension.compose.style.layers.ModelIdValue);
    method public void setModelOpacity(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setModelOpacityTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setModelReceiveShadows(com.mapbox.maps.extension.compose.style.BooleanValue);
    method public void setModelRotation(com.mapbox.maps.extension.compose.style.DoubleListValue);
    method public void setModelRotationTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setModelRoughness(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setModelRoughnessTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setModelScale(com.mapbox.maps.extension.compose.style.DoubleListValue);
    method public void setModelScaleMode(com.mapbox.maps.extension.compose.style.layers.generated.ModelScaleModeValue);
    method public void setModelScaleTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setModelTranslation(com.mapbox.maps.extension.compose.style.DoubleListValue);
    method public void setModelTranslationTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setModelType(com.mapbox.maps.extension.compose.style.layers.generated.ModelTypeValue);
    method public void setSourceLayer(com.mapbox.maps.extension.compose.style.StringValue);
    method public void setVisibility(com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue);
    property public final com.mapbox.maps.extension.compose.style.layers.Filter filter;
    property public final com.mapbox.maps.extension.compose.style.LongValue maxZoom;
    property public final com.mapbox.maps.extension.compose.style.LongValue minZoom;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue modelAmbientOcclusionIntensity;
    property public final com.mapbox.maps.extension.compose.style.Transition modelAmbientOcclusionIntensityTransition;
    property public final com.mapbox.maps.extension.compose.style.BooleanValue modelCastShadows;
    property public final com.mapbox.maps.extension.compose.style.ColorValue modelColor;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue modelColorMixIntensity;
    property public final com.mapbox.maps.extension.compose.style.Transition modelColorMixIntensityTransition;
    property public final com.mapbox.maps.extension.compose.style.Transition modelColorTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue modelCutoffFadeRange;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue modelEmissiveStrength;
    property public final com.mapbox.maps.extension.compose.style.Transition modelEmissiveStrengthTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleListValue modelFrontCutoff;
    property public final com.mapbox.maps.extension.compose.style.DoubleListValue modelHeightBasedEmissiveStrengthMultiplier;
    property public final com.mapbox.maps.extension.compose.style.Transition modelHeightBasedEmissiveStrengthMultiplierTransition;
    property public final com.mapbox.maps.extension.compose.style.layers.ModelIdValue modelId;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue modelOpacity;
    property public final com.mapbox.maps.extension.compose.style.Transition modelOpacityTransition;
    property public final com.mapbox.maps.extension.compose.style.BooleanValue modelReceiveShadows;
    property public final com.mapbox.maps.extension.compose.style.DoubleListValue modelRotation;
    property public final com.mapbox.maps.extension.compose.style.Transition modelRotationTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue modelRoughness;
    property public final com.mapbox.maps.extension.compose.style.Transition modelRoughnessTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleListValue modelScale;
    property public final com.mapbox.maps.extension.compose.style.layers.generated.ModelScaleModeValue modelScaleMode;
    property public final com.mapbox.maps.extension.compose.style.Transition modelScaleTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleListValue modelTranslation;
    property public final com.mapbox.maps.extension.compose.style.Transition modelTranslationTransition;
    property public final com.mapbox.maps.extension.compose.style.layers.generated.ModelTypeValue modelType;
    property public final com.mapbox.maps.extension.compose.style.StringValue sourceLayer;
    property public final com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue visibility;
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class ModelScaleModeValue {
    ctor public ModelScaleModeValue(com.mapbox.bindgen.Value value);
    ctor public ModelScaleModeValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.ModelScaleModeValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.ModelScaleModeValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.ModelScaleModeValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.ModelScaleModeValue MAP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.ModelScaleModeValue VIEWPORT;
  }

  public static final class ModelScaleModeValue.Companion {
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental public final class ModelTypeValue {
    ctor public ModelTypeValue(com.mapbox.bindgen.Value value);
    ctor public ModelTypeValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.ModelTypeValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.ModelTypeValue COMMON_3D;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.ModelTypeValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.ModelTypeValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.ModelTypeValue LOCATION_INDICATOR;
  }

  public static final class ModelTypeValue.Companion {
  }

  public final class RasterLayerKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static void RasterLayer(com.mapbox.maps.extension.compose.style.sources.SourceState sourceState, String layerId = remember({ 
    return generateRandomLayerId("raster")
}), com.mapbox.maps.extension.compose.style.layers.generated.RasterLayerState rasterLayerState = remember({ 
    return <init>()
}));
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static inline void RasterLayer(com.mapbox.maps.extension.compose.style.sources.SourceState sourceState, String layerId = remember({ 
    return generateRandomLayerId("raster")
}), kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.layers.generated.RasterLayerState,kotlin.Unit> init);
  }

  @androidx.compose.runtime.Stable public final class RasterLayerState {
    ctor public RasterLayerState();
    method public com.mapbox.maps.extension.compose.style.layers.Filter getFilter();
    method public com.mapbox.maps.extension.compose.style.LongValue getMaxZoom();
    method public com.mapbox.maps.extension.compose.style.LongValue getMinZoom();
    method public com.mapbox.maps.extension.compose.style.StringValue getRasterArrayBand();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getRasterBrightnessMax();
    method public com.mapbox.maps.extension.compose.style.Transition getRasterBrightnessMaxTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getRasterBrightnessMin();
    method public com.mapbox.maps.extension.compose.style.Transition getRasterBrightnessMinTransition();
    method public com.mapbox.maps.extension.compose.style.ColorValue getRasterColor();
    method public com.mapbox.maps.extension.compose.style.DoubleListValue getRasterColorMix();
    method public com.mapbox.maps.extension.compose.style.Transition getRasterColorMixTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleRangeValue getRasterColorRange();
    method public com.mapbox.maps.extension.compose.style.Transition getRasterColorRangeTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getRasterContrast();
    method public com.mapbox.maps.extension.compose.style.Transition getRasterContrastTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getRasterElevation();
    method public com.mapbox.maps.extension.compose.style.Transition getRasterElevationTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getRasterEmissiveStrength();
    method public com.mapbox.maps.extension.compose.style.Transition getRasterEmissiveStrengthTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getRasterFadeDuration();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getRasterHueRotate();
    method public com.mapbox.maps.extension.compose.style.Transition getRasterHueRotateTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getRasterOpacity();
    method public com.mapbox.maps.extension.compose.style.Transition getRasterOpacityTransition();
    method public com.mapbox.maps.extension.compose.style.layers.generated.RasterResamplingValue getRasterResampling();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getRasterSaturation();
    method public com.mapbox.maps.extension.compose.style.Transition getRasterSaturationTransition();
    method public com.mapbox.maps.extension.compose.style.StringValue getSourceLayer();
    method public com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue getVisibility();
    method public void setFilter(com.mapbox.maps.extension.compose.style.layers.Filter);
    method public void setMaxZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setMinZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setRasterArrayBand(com.mapbox.maps.extension.compose.style.StringValue);
    method public void setRasterBrightnessMax(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setRasterBrightnessMaxTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setRasterBrightnessMin(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setRasterBrightnessMinTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setRasterColor(com.mapbox.maps.extension.compose.style.ColorValue);
    method public void setRasterColorMix(com.mapbox.maps.extension.compose.style.DoubleListValue);
    method public void setRasterColorMixTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setRasterColorRange(com.mapbox.maps.extension.compose.style.DoubleRangeValue);
    method public void setRasterColorRangeTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setRasterContrast(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setRasterContrastTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setRasterElevation(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setRasterElevationTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setRasterEmissiveStrength(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setRasterEmissiveStrengthTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setRasterFadeDuration(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setRasterHueRotate(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setRasterHueRotateTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setRasterOpacity(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setRasterOpacityTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setRasterResampling(com.mapbox.maps.extension.compose.style.layers.generated.RasterResamplingValue);
    method public void setRasterSaturation(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setRasterSaturationTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setSourceLayer(com.mapbox.maps.extension.compose.style.StringValue);
    method public void setVisibility(com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue);
    property public final com.mapbox.maps.extension.compose.style.layers.Filter filter;
    property public final com.mapbox.maps.extension.compose.style.LongValue maxZoom;
    property public final com.mapbox.maps.extension.compose.style.LongValue minZoom;
    property public final com.mapbox.maps.extension.compose.style.StringValue rasterArrayBand;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue rasterBrightnessMax;
    property public final com.mapbox.maps.extension.compose.style.Transition rasterBrightnessMaxTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue rasterBrightnessMin;
    property public final com.mapbox.maps.extension.compose.style.Transition rasterBrightnessMinTransition;
    property public final com.mapbox.maps.extension.compose.style.ColorValue rasterColor;
    property public final com.mapbox.maps.extension.compose.style.DoubleListValue rasterColorMix;
    property public final com.mapbox.maps.extension.compose.style.Transition rasterColorMixTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleRangeValue rasterColorRange;
    property public final com.mapbox.maps.extension.compose.style.Transition rasterColorRangeTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue rasterContrast;
    property public final com.mapbox.maps.extension.compose.style.Transition rasterContrastTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue rasterElevation;
    property public final com.mapbox.maps.extension.compose.style.Transition rasterElevationTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue rasterEmissiveStrength;
    property public final com.mapbox.maps.extension.compose.style.Transition rasterEmissiveStrengthTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue rasterFadeDuration;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue rasterHueRotate;
    property public final com.mapbox.maps.extension.compose.style.Transition rasterHueRotateTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue rasterOpacity;
    property public final com.mapbox.maps.extension.compose.style.Transition rasterOpacityTransition;
    property public final com.mapbox.maps.extension.compose.style.layers.generated.RasterResamplingValue rasterResampling;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue rasterSaturation;
    property public final com.mapbox.maps.extension.compose.style.Transition rasterSaturationTransition;
    property public final com.mapbox.maps.extension.compose.style.StringValue sourceLayer;
    property public final com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue visibility;
  }

  public final class RasterParticleLayerKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void RasterParticleLayer(com.mapbox.maps.extension.compose.style.sources.SourceState sourceState, String layerId = remember({ 
    return generateRandomLayerId("raster-particle")
}), com.mapbox.maps.extension.compose.style.layers.generated.RasterParticleLayerState rasterParticleLayerState = remember({ 
    return <init>()
}));
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static inline void RasterParticleLayer(com.mapbox.maps.extension.compose.style.sources.SourceState sourceState, String layerId = remember({ 
    return generateRandomLayerId("raster-particle")
}), kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.layers.generated.RasterParticleLayerState,kotlin.Unit> init);
  }

  @androidx.compose.runtime.Stable @com.mapbox.maps.MapboxExperimental public final class RasterParticleLayerState {
    ctor public RasterParticleLayerState();
    method public com.mapbox.maps.extension.compose.style.layers.Filter getFilter();
    method public com.mapbox.maps.extension.compose.style.LongValue getMaxZoom();
    method public com.mapbox.maps.extension.compose.style.LongValue getMinZoom();
    method public com.mapbox.maps.extension.compose.style.StringValue getRasterParticleArrayBand();
    method public com.mapbox.maps.extension.compose.style.ColorValue getRasterParticleColor();
    method public com.mapbox.maps.extension.compose.style.LongValue getRasterParticleCount();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getRasterParticleFadeOpacityFactor();
    method public com.mapbox.maps.extension.compose.style.Transition getRasterParticleFadeOpacityFactorTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getRasterParticleMaxSpeed();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getRasterParticleResetRateFactor();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getRasterParticleSpeedFactor();
    method public com.mapbox.maps.extension.compose.style.Transition getRasterParticleSpeedFactorTransition();
    method public com.mapbox.maps.extension.compose.style.StringValue getSourceLayer();
    method public com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue getVisibility();
    method public void setFilter(com.mapbox.maps.extension.compose.style.layers.Filter);
    method public void setMaxZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setMinZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setRasterParticleArrayBand(com.mapbox.maps.extension.compose.style.StringValue);
    method public void setRasterParticleColor(com.mapbox.maps.extension.compose.style.ColorValue);
    method public void setRasterParticleCount(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setRasterParticleFadeOpacityFactor(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setRasterParticleFadeOpacityFactorTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setRasterParticleMaxSpeed(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setRasterParticleResetRateFactor(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setRasterParticleSpeedFactor(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setRasterParticleSpeedFactorTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setSourceLayer(com.mapbox.maps.extension.compose.style.StringValue);
    method public void setVisibility(com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue);
    property public final com.mapbox.maps.extension.compose.style.layers.Filter filter;
    property public final com.mapbox.maps.extension.compose.style.LongValue maxZoom;
    property public final com.mapbox.maps.extension.compose.style.LongValue minZoom;
    property public final com.mapbox.maps.extension.compose.style.StringValue rasterParticleArrayBand;
    property public final com.mapbox.maps.extension.compose.style.ColorValue rasterParticleColor;
    property public final com.mapbox.maps.extension.compose.style.LongValue rasterParticleCount;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue rasterParticleFadeOpacityFactor;
    property public final com.mapbox.maps.extension.compose.style.Transition rasterParticleFadeOpacityFactorTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue rasterParticleMaxSpeed;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue rasterParticleResetRateFactor;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue rasterParticleSpeedFactor;
    property public final com.mapbox.maps.extension.compose.style.Transition rasterParticleSpeedFactorTransition;
    property public final com.mapbox.maps.extension.compose.style.StringValue sourceLayer;
    property public final com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue visibility;
  }

  @androidx.compose.runtime.Immutable public final class RasterResamplingValue {
    ctor public RasterResamplingValue(com.mapbox.bindgen.Value value);
    ctor public RasterResamplingValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.RasterResamplingValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.RasterResamplingValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.RasterResamplingValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.RasterResamplingValue LINEAR;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.RasterResamplingValue NEAREST;
  }

  public static final class RasterResamplingValue.Companion {
  }

  public final class SkyLayerKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static void SkyLayer(String layerId = remember({ 
    return generateRandomLayerId("sky")
}), com.mapbox.maps.extension.compose.style.layers.generated.SkyLayerState skyLayerState = remember({ 
    return <init>()
}));
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static inline void SkyLayer(String layerId = remember({ 
    return generateRandomLayerId("sky")
}), kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.layers.generated.SkyLayerState,kotlin.Unit> init);
  }

  @androidx.compose.runtime.Stable public final class SkyLayerState {
    ctor public SkyLayerState();
    method public com.mapbox.maps.extension.compose.style.layers.Filter getFilter();
    method public com.mapbox.maps.extension.compose.style.LongValue getMaxZoom();
    method public com.mapbox.maps.extension.compose.style.LongValue getMinZoom();
    method public com.mapbox.maps.extension.compose.style.ColorValue getSkyAtmosphereColor();
    method public com.mapbox.maps.extension.compose.style.ColorValue getSkyAtmosphereHaloColor();
    method public com.mapbox.maps.extension.compose.style.DoubleListValue getSkyAtmosphereSun();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getSkyAtmosphereSunIntensity();
    method public com.mapbox.maps.extension.compose.style.ColorValue getSkyGradient();
    method public com.mapbox.maps.extension.compose.style.DoubleListValue getSkyGradientCenter();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getSkyGradientRadius();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getSkyOpacity();
    method public com.mapbox.maps.extension.compose.style.Transition getSkyOpacityTransition();
    method public com.mapbox.maps.extension.compose.style.layers.generated.SkyTypeValue getSkyType();
    method public com.mapbox.maps.extension.compose.style.StringValue getSourceLayer();
    method public com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue getVisibility();
    method public void setFilter(com.mapbox.maps.extension.compose.style.layers.Filter);
    method public void setMaxZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setMinZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setSkyAtmosphereColor(com.mapbox.maps.extension.compose.style.ColorValue);
    method public void setSkyAtmosphereHaloColor(com.mapbox.maps.extension.compose.style.ColorValue);
    method public void setSkyAtmosphereSun(com.mapbox.maps.extension.compose.style.DoubleListValue);
    method public void setSkyAtmosphereSunIntensity(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setSkyGradient(com.mapbox.maps.extension.compose.style.ColorValue);
    method public void setSkyGradientCenter(com.mapbox.maps.extension.compose.style.DoubleListValue);
    method public void setSkyGradientRadius(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setSkyOpacity(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setSkyOpacityTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setSkyType(com.mapbox.maps.extension.compose.style.layers.generated.SkyTypeValue);
    method public void setSourceLayer(com.mapbox.maps.extension.compose.style.StringValue);
    method public void setVisibility(com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue);
    property public final com.mapbox.maps.extension.compose.style.layers.Filter filter;
    property public final com.mapbox.maps.extension.compose.style.LongValue maxZoom;
    property public final com.mapbox.maps.extension.compose.style.LongValue minZoom;
    property public final com.mapbox.maps.extension.compose.style.ColorValue skyAtmosphereColor;
    property public final com.mapbox.maps.extension.compose.style.ColorValue skyAtmosphereHaloColor;
    property public final com.mapbox.maps.extension.compose.style.DoubleListValue skyAtmosphereSun;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue skyAtmosphereSunIntensity;
    property public final com.mapbox.maps.extension.compose.style.ColorValue skyGradient;
    property public final com.mapbox.maps.extension.compose.style.DoubleListValue skyGradientCenter;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue skyGradientRadius;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue skyOpacity;
    property public final com.mapbox.maps.extension.compose.style.Transition skyOpacityTransition;
    property public final com.mapbox.maps.extension.compose.style.layers.generated.SkyTypeValue skyType;
    property public final com.mapbox.maps.extension.compose.style.StringValue sourceLayer;
    property public final com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue visibility;
  }

  @androidx.compose.runtime.Immutable public final class SkyTypeValue {
    ctor public SkyTypeValue(com.mapbox.bindgen.Value value);
    ctor public SkyTypeValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.SkyTypeValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SkyTypeValue ATMOSPHERE;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SkyTypeValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SkyTypeValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SkyTypeValue GRADIENT;
  }

  public static final class SkyTypeValue.Companion {
  }

  public final class SymbolLayerKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static void SymbolLayer(com.mapbox.maps.extension.compose.style.sources.SourceState sourceState, String layerId = remember({ 
    return generateRandomLayerId("symbol")
}), com.mapbox.maps.extension.compose.style.layers.generated.SymbolLayerState symbolLayerState = remember({ 
    return <init>()
}));
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.MapboxMapComposable public static inline void SymbolLayer(com.mapbox.maps.extension.compose.style.sources.SourceState sourceState, String layerId = remember({ 
    return generateRandomLayerId("symbol")
}), kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.layers.generated.SymbolLayerState,kotlin.Unit> init);
  }

  @androidx.compose.runtime.Stable public final class SymbolLayerState {
    ctor public SymbolLayerState();
    method public com.mapbox.maps.extension.compose.style.layers.Filter getFilter();
    method public com.mapbox.maps.extension.compose.style.BooleanValue getIconAllowOverlap();
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconAnchorValue getIconAnchor();
    method public com.mapbox.maps.extension.compose.style.ColorValue getIconColor();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getIconColorSaturation();
    method public com.mapbox.maps.extension.compose.style.Transition getIconColorSaturationTransition();
    method public com.mapbox.maps.extension.compose.style.Transition getIconColorTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getIconEmissiveStrength();
    method public com.mapbox.maps.extension.compose.style.Transition getIconEmissiveStrengthTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getIconHaloBlur();
    method public com.mapbox.maps.extension.compose.style.Transition getIconHaloBlurTransition();
    method public com.mapbox.maps.extension.compose.style.ColorValue getIconHaloColor();
    method public com.mapbox.maps.extension.compose.style.Transition getIconHaloColorTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getIconHaloWidth();
    method public com.mapbox.maps.extension.compose.style.Transition getIconHaloWidthTransition();
    method public com.mapbox.maps.extension.compose.style.BooleanValue getIconIgnorePlacement();
    method public com.mapbox.maps.extension.compose.style.layers.ImageValue getIconImage();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getIconImageCrossFade();
    method public com.mapbox.maps.extension.compose.style.Transition getIconImageCrossFadeTransition();
    method public com.mapbox.maps.extension.compose.style.BooleanValue getIconKeepUpright();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getIconOcclusionOpacity();
    method public com.mapbox.maps.extension.compose.style.Transition getIconOcclusionOpacityTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleListValue getIconOffset();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getIconOpacity();
    method public com.mapbox.maps.extension.compose.style.Transition getIconOpacityTransition();
    method public com.mapbox.maps.extension.compose.style.BooleanValue getIconOptional();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getIconPadding();
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconPitchAlignmentValue getIconPitchAlignment();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getIconRotate();
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconRotationAlignmentValue getIconRotationAlignment();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getIconSize();
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconTextFitValue getIconTextFit();
    method public com.mapbox.maps.extension.compose.style.DoubleListValue getIconTextFitPadding();
    method public com.mapbox.maps.extension.compose.style.DoubleListValue getIconTranslate();
    method public com.mapbox.maps.extension.compose.style.layers.generated.IconTranslateAnchorValue getIconTranslateAnchor();
    method public com.mapbox.maps.extension.compose.style.Transition getIconTranslateTransition();
    method public com.mapbox.maps.extension.compose.style.LongValue getMaxZoom();
    method public com.mapbox.maps.extension.compose.style.LongValue getMinZoom();
    method public com.mapbox.maps.extension.compose.style.StringValue getSourceLayer();
    method public com.mapbox.maps.extension.compose.style.BooleanValue getSymbolAvoidEdges();
    method public com.mapbox.maps.extension.compose.style.layers.generated.SymbolPlacementValue getSymbolPlacement();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getSymbolSortKey();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getSymbolSpacing();
    method public com.mapbox.maps.extension.compose.style.BooleanValue getSymbolZElevate();
    method public com.mapbox.maps.extension.compose.style.layers.generated.SymbolZOrderValue getSymbolZOrder();
    method public com.mapbox.maps.extension.compose.style.BooleanValue getTextAllowOverlap();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextAnchorValue getTextAnchor();
    method public com.mapbox.maps.extension.compose.style.ColorValue getTextColor();
    method public com.mapbox.maps.extension.compose.style.Transition getTextColorTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getTextEmissiveStrength();
    method public com.mapbox.maps.extension.compose.style.Transition getTextEmissiveStrengthTransition();
    method public com.mapbox.maps.extension.compose.style.layers.FormattedValue getTextField();
    method public com.mapbox.maps.extension.compose.style.StringListValue getTextFont();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getTextHaloBlur();
    method public com.mapbox.maps.extension.compose.style.Transition getTextHaloBlurTransition();
    method public com.mapbox.maps.extension.compose.style.ColorValue getTextHaloColor();
    method public com.mapbox.maps.extension.compose.style.Transition getTextHaloColorTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getTextHaloWidth();
    method public com.mapbox.maps.extension.compose.style.Transition getTextHaloWidthTransition();
    method public com.mapbox.maps.extension.compose.style.BooleanValue getTextIgnorePlacement();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextJustifyValue getTextJustify();
    method public com.mapbox.maps.extension.compose.style.BooleanValue getTextKeepUpright();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getTextLetterSpacing();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getTextLineHeight();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getTextMaxAngle();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getTextMaxWidth();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getTextOcclusionOpacity();
    method public com.mapbox.maps.extension.compose.style.Transition getTextOcclusionOpacityTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleListValue getTextOffset();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getTextOpacity();
    method public com.mapbox.maps.extension.compose.style.Transition getTextOpacityTransition();
    method public com.mapbox.maps.extension.compose.style.BooleanValue getTextOptional();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getTextPadding();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextPitchAlignmentValue getTextPitchAlignment();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getTextRadialOffset();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getTextRotate();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextRotationAlignmentValue getTextRotationAlignment();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getTextSize();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextTransformValue getTextTransform();
    method public com.mapbox.maps.extension.compose.style.DoubleListValue getTextTranslate();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextTranslateAnchorValue getTextTranslateAnchor();
    method public com.mapbox.maps.extension.compose.style.Transition getTextTranslateTransition();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchorListValue getTextVariableAnchor();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextWritingModeListValue getTextWritingMode();
    method public com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue getVisibility();
    method public void setFilter(com.mapbox.maps.extension.compose.style.layers.Filter);
    method public void setIconAllowOverlap(com.mapbox.maps.extension.compose.style.BooleanValue);
    method public void setIconAnchor(com.mapbox.maps.extension.compose.style.layers.generated.IconAnchorValue);
    method public void setIconColor(com.mapbox.maps.extension.compose.style.ColorValue);
    method public void setIconColorSaturation(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setIconColorSaturationTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setIconColorTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setIconEmissiveStrength(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setIconEmissiveStrengthTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setIconHaloBlur(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setIconHaloBlurTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setIconHaloColor(com.mapbox.maps.extension.compose.style.ColorValue);
    method public void setIconHaloColorTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setIconHaloWidth(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setIconHaloWidthTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setIconIgnorePlacement(com.mapbox.maps.extension.compose.style.BooleanValue);
    method public void setIconImage(com.mapbox.maps.extension.compose.style.layers.ImageValue);
    method public void setIconImageCrossFade(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setIconImageCrossFadeTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setIconKeepUpright(com.mapbox.maps.extension.compose.style.BooleanValue);
    method public void setIconOcclusionOpacity(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setIconOcclusionOpacityTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setIconOffset(com.mapbox.maps.extension.compose.style.DoubleListValue);
    method public void setIconOpacity(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setIconOpacityTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setIconOptional(com.mapbox.maps.extension.compose.style.BooleanValue);
    method public void setIconPadding(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setIconPitchAlignment(com.mapbox.maps.extension.compose.style.layers.generated.IconPitchAlignmentValue);
    method public void setIconRotate(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setIconRotationAlignment(com.mapbox.maps.extension.compose.style.layers.generated.IconRotationAlignmentValue);
    method public void setIconSize(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setIconTextFit(com.mapbox.maps.extension.compose.style.layers.generated.IconTextFitValue);
    method public void setIconTextFitPadding(com.mapbox.maps.extension.compose.style.DoubleListValue);
    method public void setIconTranslate(com.mapbox.maps.extension.compose.style.DoubleListValue);
    method public void setIconTranslateAnchor(com.mapbox.maps.extension.compose.style.layers.generated.IconTranslateAnchorValue);
    method public void setIconTranslateTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setMaxZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setMinZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setSourceLayer(com.mapbox.maps.extension.compose.style.StringValue);
    method public void setSymbolAvoidEdges(com.mapbox.maps.extension.compose.style.BooleanValue);
    method public void setSymbolPlacement(com.mapbox.maps.extension.compose.style.layers.generated.SymbolPlacementValue);
    method public void setSymbolSortKey(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setSymbolSpacing(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setSymbolZElevate(com.mapbox.maps.extension.compose.style.BooleanValue);
    method public void setSymbolZOrder(com.mapbox.maps.extension.compose.style.layers.generated.SymbolZOrderValue);
    method public void setTextAllowOverlap(com.mapbox.maps.extension.compose.style.BooleanValue);
    method public void setTextAnchor(com.mapbox.maps.extension.compose.style.layers.generated.TextAnchorValue);
    method public void setTextColor(com.mapbox.maps.extension.compose.style.ColorValue);
    method public void setTextColorTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setTextEmissiveStrength(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setTextEmissiveStrengthTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setTextField(com.mapbox.maps.extension.compose.style.layers.FormattedValue);
    method public void setTextFont(com.mapbox.maps.extension.compose.style.StringListValue);
    method public void setTextHaloBlur(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setTextHaloBlurTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setTextHaloColor(com.mapbox.maps.extension.compose.style.ColorValue);
    method public void setTextHaloColorTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setTextHaloWidth(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setTextHaloWidthTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setTextIgnorePlacement(com.mapbox.maps.extension.compose.style.BooleanValue);
    method public void setTextJustify(com.mapbox.maps.extension.compose.style.layers.generated.TextJustifyValue);
    method public void setTextKeepUpright(com.mapbox.maps.extension.compose.style.BooleanValue);
    method public void setTextLetterSpacing(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setTextLineHeight(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setTextMaxAngle(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setTextMaxWidth(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setTextOcclusionOpacity(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setTextOcclusionOpacityTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setTextOffset(com.mapbox.maps.extension.compose.style.DoubleListValue);
    method public void setTextOpacity(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setTextOpacityTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setTextOptional(com.mapbox.maps.extension.compose.style.BooleanValue);
    method public void setTextPadding(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setTextPitchAlignment(com.mapbox.maps.extension.compose.style.layers.generated.TextPitchAlignmentValue);
    method public void setTextRadialOffset(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setTextRotate(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setTextRotationAlignment(com.mapbox.maps.extension.compose.style.layers.generated.TextRotationAlignmentValue);
    method public void setTextSize(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setTextTransform(com.mapbox.maps.extension.compose.style.layers.generated.TextTransformValue);
    method public void setTextTranslate(com.mapbox.maps.extension.compose.style.DoubleListValue);
    method public void setTextTranslateAnchor(com.mapbox.maps.extension.compose.style.layers.generated.TextTranslateAnchorValue);
    method public void setTextTranslateTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setTextVariableAnchor(com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchorListValue);
    method public void setTextWritingMode(com.mapbox.maps.extension.compose.style.layers.generated.TextWritingModeListValue);
    method public void setVisibility(com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue);
    property public final com.mapbox.maps.extension.compose.style.layers.Filter filter;
    property public final com.mapbox.maps.extension.compose.style.BooleanValue iconAllowOverlap;
    property public final com.mapbox.maps.extension.compose.style.layers.generated.IconAnchorValue iconAnchor;
    property public final com.mapbox.maps.extension.compose.style.ColorValue iconColor;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue iconColorSaturation;
    property public final com.mapbox.maps.extension.compose.style.Transition iconColorSaturationTransition;
    property public final com.mapbox.maps.extension.compose.style.Transition iconColorTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue iconEmissiveStrength;
    property public final com.mapbox.maps.extension.compose.style.Transition iconEmissiveStrengthTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue iconHaloBlur;
    property public final com.mapbox.maps.extension.compose.style.Transition iconHaloBlurTransition;
    property public final com.mapbox.maps.extension.compose.style.ColorValue iconHaloColor;
    property public final com.mapbox.maps.extension.compose.style.Transition iconHaloColorTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue iconHaloWidth;
    property public final com.mapbox.maps.extension.compose.style.Transition iconHaloWidthTransition;
    property public final com.mapbox.maps.extension.compose.style.BooleanValue iconIgnorePlacement;
    property public final com.mapbox.maps.extension.compose.style.layers.ImageValue iconImage;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue iconImageCrossFade;
    property public final com.mapbox.maps.extension.compose.style.Transition iconImageCrossFadeTransition;
    property public final com.mapbox.maps.extension.compose.style.BooleanValue iconKeepUpright;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue iconOcclusionOpacity;
    property public final com.mapbox.maps.extension.compose.style.Transition iconOcclusionOpacityTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleListValue iconOffset;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue iconOpacity;
    property public final com.mapbox.maps.extension.compose.style.Transition iconOpacityTransition;
    property public final com.mapbox.maps.extension.compose.style.BooleanValue iconOptional;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue iconPadding;
    property public final com.mapbox.maps.extension.compose.style.layers.generated.IconPitchAlignmentValue iconPitchAlignment;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue iconRotate;
    property public final com.mapbox.maps.extension.compose.style.layers.generated.IconRotationAlignmentValue iconRotationAlignment;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue iconSize;
    property public final com.mapbox.maps.extension.compose.style.layers.generated.IconTextFitValue iconTextFit;
    property public final com.mapbox.maps.extension.compose.style.DoubleListValue iconTextFitPadding;
    property public final com.mapbox.maps.extension.compose.style.DoubleListValue iconTranslate;
    property public final com.mapbox.maps.extension.compose.style.layers.generated.IconTranslateAnchorValue iconTranslateAnchor;
    property public final com.mapbox.maps.extension.compose.style.Transition iconTranslateTransition;
    property public final com.mapbox.maps.extension.compose.style.LongValue maxZoom;
    property public final com.mapbox.maps.extension.compose.style.LongValue minZoom;
    property public final com.mapbox.maps.extension.compose.style.StringValue sourceLayer;
    property public final com.mapbox.maps.extension.compose.style.BooleanValue symbolAvoidEdges;
    property public final com.mapbox.maps.extension.compose.style.layers.generated.SymbolPlacementValue symbolPlacement;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue symbolSortKey;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue symbolSpacing;
    property public final com.mapbox.maps.extension.compose.style.BooleanValue symbolZElevate;
    property public final com.mapbox.maps.extension.compose.style.layers.generated.SymbolZOrderValue symbolZOrder;
    property public final com.mapbox.maps.extension.compose.style.BooleanValue textAllowOverlap;
    property public final com.mapbox.maps.extension.compose.style.layers.generated.TextAnchorValue textAnchor;
    property public final com.mapbox.maps.extension.compose.style.ColorValue textColor;
    property public final com.mapbox.maps.extension.compose.style.Transition textColorTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue textEmissiveStrength;
    property public final com.mapbox.maps.extension.compose.style.Transition textEmissiveStrengthTransition;
    property public final com.mapbox.maps.extension.compose.style.layers.FormattedValue textField;
    property public final com.mapbox.maps.extension.compose.style.StringListValue textFont;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue textHaloBlur;
    property public final com.mapbox.maps.extension.compose.style.Transition textHaloBlurTransition;
    property public final com.mapbox.maps.extension.compose.style.ColorValue textHaloColor;
    property public final com.mapbox.maps.extension.compose.style.Transition textHaloColorTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue textHaloWidth;
    property public final com.mapbox.maps.extension.compose.style.Transition textHaloWidthTransition;
    property public final com.mapbox.maps.extension.compose.style.BooleanValue textIgnorePlacement;
    property public final com.mapbox.maps.extension.compose.style.layers.generated.TextJustifyValue textJustify;
    property public final com.mapbox.maps.extension.compose.style.BooleanValue textKeepUpright;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue textLetterSpacing;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue textLineHeight;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue textMaxAngle;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue textMaxWidth;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue textOcclusionOpacity;
    property public final com.mapbox.maps.extension.compose.style.Transition textOcclusionOpacityTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleListValue textOffset;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue textOpacity;
    property public final com.mapbox.maps.extension.compose.style.Transition textOpacityTransition;
    property public final com.mapbox.maps.extension.compose.style.BooleanValue textOptional;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue textPadding;
    property public final com.mapbox.maps.extension.compose.style.layers.generated.TextPitchAlignmentValue textPitchAlignment;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue textRadialOffset;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue textRotate;
    property public final com.mapbox.maps.extension.compose.style.layers.generated.TextRotationAlignmentValue textRotationAlignment;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue textSize;
    property public final com.mapbox.maps.extension.compose.style.layers.generated.TextTransformValue textTransform;
    property public final com.mapbox.maps.extension.compose.style.DoubleListValue textTranslate;
    property public final com.mapbox.maps.extension.compose.style.layers.generated.TextTranslateAnchorValue textTranslateAnchor;
    property public final com.mapbox.maps.extension.compose.style.Transition textTranslateTransition;
    property public final com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchorListValue textVariableAnchor;
    property public final com.mapbox.maps.extension.compose.style.layers.generated.TextWritingModeListValue textWritingMode;
    property public final com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue visibility;
  }

  @androidx.compose.runtime.Immutable public final class SymbolPlacementValue {
    ctor public SymbolPlacementValue(com.mapbox.bindgen.Value value);
    ctor public SymbolPlacementValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.SymbolPlacementValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SymbolPlacementValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SymbolPlacementValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SymbolPlacementValue LINE;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SymbolPlacementValue LINE_CENTER;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SymbolPlacementValue POINT;
  }

  public static final class SymbolPlacementValue.Companion {
  }

  @androidx.compose.runtime.Immutable public final class SymbolZOrderValue {
    ctor public SymbolZOrderValue(com.mapbox.bindgen.Value value);
    ctor public SymbolZOrderValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.SymbolZOrderValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SymbolZOrderValue AUTO;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SymbolZOrderValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SymbolZOrderValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SymbolZOrderValue SOURCE;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.SymbolZOrderValue VIEWPORT_Y;
  }

  public static final class SymbolZOrderValue.Companion {
  }

  @androidx.compose.runtime.Immutable public final class TextAnchorValue {
    ctor public TextAnchorValue(com.mapbox.bindgen.Value value);
    ctor public TextAnchorValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextAnchorValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextAnchorValue BOTTOM;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextAnchorValue BOTTOM_LEFT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextAnchorValue BOTTOM_RIGHT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextAnchorValue CENTER;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextAnchorValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextAnchorValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextAnchorValue LEFT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextAnchorValue RIGHT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextAnchorValue TOP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextAnchorValue TOP_LEFT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextAnchorValue TOP_RIGHT;
  }

  public static final class TextAnchorValue.Companion {
  }

  @androidx.compose.runtime.Immutable public final class TextJustifyValue {
    ctor public TextJustifyValue(com.mapbox.bindgen.Value value);
    ctor public TextJustifyValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextJustifyValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextJustifyValue AUTO;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextJustifyValue CENTER;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextJustifyValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextJustifyValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextJustifyValue LEFT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextJustifyValue RIGHT;
  }

  public static final class TextJustifyValue.Companion {
  }

  @androidx.compose.runtime.Immutable public final class TextPitchAlignmentValue {
    ctor public TextPitchAlignmentValue(com.mapbox.bindgen.Value value);
    ctor public TextPitchAlignmentValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextPitchAlignmentValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextPitchAlignmentValue AUTO;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextPitchAlignmentValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextPitchAlignmentValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextPitchAlignmentValue MAP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextPitchAlignmentValue VIEWPORT;
  }

  public static final class TextPitchAlignmentValue.Companion {
  }

  @androidx.compose.runtime.Immutable public final class TextRotationAlignmentValue {
    ctor public TextRotationAlignmentValue(com.mapbox.bindgen.Value value);
    ctor public TextRotationAlignmentValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextRotationAlignmentValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextRotationAlignmentValue AUTO;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextRotationAlignmentValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextRotationAlignmentValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextRotationAlignmentValue MAP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextRotationAlignmentValue VIEWPORT;
  }

  public static final class TextRotationAlignmentValue.Companion {
  }

  @androidx.compose.runtime.Immutable public final class TextTransformValue {
    ctor public TextTransformValue(com.mapbox.bindgen.Value value);
    ctor public TextTransformValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextTransformValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextTransformValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextTransformValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextTransformValue LOWERCASE;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextTransformValue NONE;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextTransformValue UPPERCASE;
  }

  public static final class TextTransformValue.Companion {
  }

  @androidx.compose.runtime.Immutable public final class TextTranslateAnchorValue {
    ctor public TextTranslateAnchorValue(com.mapbox.bindgen.Value value);
    ctor public TextTranslateAnchorValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextTranslateAnchorValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextTranslateAnchorValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextTranslateAnchorValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextTranslateAnchorValue MAP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextTranslateAnchorValue VIEWPORT;
  }

  public static final class TextTranslateAnchorValue.Companion {
  }

  @androidx.compose.runtime.Immutable public final class TextVariableAnchor {
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchor copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchor BOTTOM;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchor BOTTOM_LEFT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchor BOTTOM_RIGHT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchor CENTER;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchor.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchor LEFT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchor RIGHT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchor TOP;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchor TOP_LEFT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchor TOP_RIGHT;
  }

  public static final class TextVariableAnchor.Companion {
  }

  @androidx.compose.runtime.Immutable public final class TextVariableAnchorListValue {
    ctor public TextVariableAnchorListValue(com.mapbox.bindgen.Value value);
    ctor public TextVariableAnchorListValue(java.util.List<com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchor> value);
    ctor public TextVariableAnchorListValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchorListValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchorListValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextVariableAnchorListValue DEFAULT;
  }

  public static final class TextVariableAnchorListValue.Companion {
  }

  @androidx.compose.runtime.Immutable public final class TextWritingMode {
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextWritingMode copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextWritingMode.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextWritingMode HORIZONTAL;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextWritingMode VERTICAL;
  }

  public static final class TextWritingMode.Companion {
  }

  @androidx.compose.runtime.Immutable public final class TextWritingModeListValue {
    ctor public TextWritingModeListValue(com.mapbox.bindgen.Value value);
    ctor public TextWritingModeListValue(java.util.List<com.mapbox.maps.extension.compose.style.layers.generated.TextWritingMode> value);
    ctor public TextWritingModeListValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.TextWritingModeListValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextWritingModeListValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.TextWritingModeListValue DEFAULT;
  }

  public static final class TextWritingModeListValue.Companion {
  }

  @androidx.compose.runtime.Immutable public final class VisibilityValue {
    ctor public VisibilityValue(com.mapbox.bindgen.Value value);
    ctor public VisibilityValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue NONE;
    field public static final com.mapbox.maps.extension.compose.style.layers.generated.VisibilityValue VISIBLE;
  }

  public static final class VisibilityValue.Companion {
  }

}

package com.mapbox.maps.extension.compose.style.lights {

  public final class LightsState {
    ctor public LightsState(com.mapbox.maps.extension.compose.style.lights.generated.DirectionalLightState directionalLightState, com.mapbox.maps.extension.compose.style.lights.generated.AmbientLightState ambientLightState);
    ctor public LightsState(com.mapbox.maps.extension.compose.style.lights.generated.FlatLightState flatLightState);
    field public static final com.mapbox.maps.extension.compose.style.lights.LightsState.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.lights.LightsState DEFAULT;
  }

  public static final class LightsState.Companion {
  }

}

package com.mapbox.maps.extension.compose.style.lights.generated {

  @androidx.compose.runtime.Stable public final class AmbientLightState {
    ctor public AmbientLightState(String id = generateRandomLightId("ambient"));
    method public com.mapbox.maps.extension.compose.style.ColorValue getColor();
    method public com.mapbox.maps.extension.compose.style.Transition getColorTransition();
    method public String getId();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getIntensity();
    method public com.mapbox.maps.extension.compose.style.Transition getIntensityTransition();
    method public void setColor(com.mapbox.maps.extension.compose.style.ColorValue);
    method public void setColorTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setIntensity(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setIntensityTransition(com.mapbox.maps.extension.compose.style.Transition);
    property public final com.mapbox.maps.extension.compose.style.ColorValue color;
    property public final com.mapbox.maps.extension.compose.style.Transition colorTransition;
    property public final String id;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue intensity;
    property public final com.mapbox.maps.extension.compose.style.Transition intensityTransition;
    field public static final com.mapbox.maps.extension.compose.style.lights.generated.AmbientLightState.Companion Companion;
  }

  public static final class AmbientLightState.Companion {
    method public androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.style.lights.generated.AmbientLightState,com.mapbox.maps.extension.compose.style.lights.generated.AmbientLightState.Holder> getSaver();
    property public final androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.style.lights.generated.AmbientLightState,com.mapbox.maps.extension.compose.style.lights.generated.AmbientLightState.Holder> Saver;
  }

  @kotlinx.parcelize.Parcelize @kotlinx.parcelize.TypeParceler public static final class AmbientLightState.Holder implements android.os.Parcelable {
    ctor public AmbientLightState.Holder(java.util.Map<java.lang.String,? extends com.mapbox.bindgen.Value> savedProperties);
    method public java.util.Map<java.lang.String,com.mapbox.bindgen.Value> component1();
    method public com.mapbox.maps.extension.compose.style.lights.generated.AmbientLightState.Holder copy(java.util.Map<java.lang.String,? extends com.mapbox.bindgen.Value> savedProperties);
    method public java.util.Map<java.lang.String,com.mapbox.bindgen.Value> getSavedProperties();
    property public final java.util.Map<java.lang.String,com.mapbox.bindgen.Value> savedProperties;
  }

  public final class AmbientLightStateKt {
    method @androidx.compose.runtime.Composable public static inline com.mapbox.maps.extension.compose.style.lights.generated.AmbientLightState rememberAmbientLightState(String id = remember({ 
    return generateRandomLightId("ambient")
}), String? key = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.lights.generated.AmbientLightState,kotlin.Unit> init = {});
  }

  @androidx.compose.runtime.Immutable public final class AnchorValue {
    ctor public AnchorValue(com.mapbox.bindgen.Value value);
    ctor public AnchorValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.lights.generated.AnchorValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.lights.generated.AnchorValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.lights.generated.AnchorValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.lights.generated.AnchorValue MAP;
    field public static final com.mapbox.maps.extension.compose.style.lights.generated.AnchorValue VIEWPORT;
  }

  public static final class AnchorValue.Companion {
  }

  @androidx.compose.runtime.Stable public final class DirectionalLightState {
    ctor public DirectionalLightState(String id = generateRandomLightId("directional"));
    method public com.mapbox.maps.extension.compose.style.BooleanValue getCastShadows();
    method public com.mapbox.maps.extension.compose.style.ColorValue getColor();
    method public com.mapbox.maps.extension.compose.style.Transition getColorTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleListValue getDirection();
    method public com.mapbox.maps.extension.compose.style.Transition getDirectionTransition();
    method public String getId();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getIntensity();
    method public com.mapbox.maps.extension.compose.style.Transition getIntensityTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getShadowIntensity();
    method public com.mapbox.maps.extension.compose.style.Transition getShadowIntensityTransition();
    method public void setCastShadows(com.mapbox.maps.extension.compose.style.BooleanValue);
    method public void setColor(com.mapbox.maps.extension.compose.style.ColorValue);
    method public void setColorTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setDirection(com.mapbox.maps.extension.compose.style.DoubleListValue);
    method public void setDirectionTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setIntensity(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setIntensityTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setShadowIntensity(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setShadowIntensityTransition(com.mapbox.maps.extension.compose.style.Transition);
    property public final com.mapbox.maps.extension.compose.style.BooleanValue castShadows;
    property public final com.mapbox.maps.extension.compose.style.ColorValue color;
    property public final com.mapbox.maps.extension.compose.style.Transition colorTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleListValue direction;
    property public final com.mapbox.maps.extension.compose.style.Transition directionTransition;
    property public final String id;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue intensity;
    property public final com.mapbox.maps.extension.compose.style.Transition intensityTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue shadowIntensity;
    property public final com.mapbox.maps.extension.compose.style.Transition shadowIntensityTransition;
    field public static final com.mapbox.maps.extension.compose.style.lights.generated.DirectionalLightState.Companion Companion;
  }

  public static final class DirectionalLightState.Companion {
    method public androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.style.lights.generated.DirectionalLightState,com.mapbox.maps.extension.compose.style.lights.generated.DirectionalLightState.Holder> getSaver();
    property public final androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.style.lights.generated.DirectionalLightState,com.mapbox.maps.extension.compose.style.lights.generated.DirectionalLightState.Holder> Saver;
  }

  @kotlinx.parcelize.Parcelize @kotlinx.parcelize.TypeParceler public static final class DirectionalLightState.Holder implements android.os.Parcelable {
    ctor public DirectionalLightState.Holder(java.util.Map<java.lang.String,? extends com.mapbox.bindgen.Value> savedProperties);
    method public java.util.Map<java.lang.String,com.mapbox.bindgen.Value> component1();
    method public com.mapbox.maps.extension.compose.style.lights.generated.DirectionalLightState.Holder copy(java.util.Map<java.lang.String,? extends com.mapbox.bindgen.Value> savedProperties);
    method public java.util.Map<java.lang.String,com.mapbox.bindgen.Value> getSavedProperties();
    property public final java.util.Map<java.lang.String,com.mapbox.bindgen.Value> savedProperties;
  }

  public final class DirectionalLightStateKt {
    method @androidx.compose.runtime.Composable public static inline com.mapbox.maps.extension.compose.style.lights.generated.DirectionalLightState rememberDirectionalLightState(String id = remember({ 
    return generateRandomLightId("directional")
}), String? key = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.lights.generated.DirectionalLightState,kotlin.Unit> init = {});
  }

  @androidx.compose.runtime.Stable public final class FlatLightState {
    ctor public FlatLightState(String id = generateRandomLightId("flat"));
    method public com.mapbox.maps.extension.compose.style.lights.generated.AnchorValue getAnchor();
    method public com.mapbox.maps.extension.compose.style.ColorValue getColor();
    method public com.mapbox.maps.extension.compose.style.Transition getColorTransition();
    method public String getId();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getIntensity();
    method public com.mapbox.maps.extension.compose.style.Transition getIntensityTransition();
    method public com.mapbox.maps.extension.compose.style.DoubleListValue getPosition();
    method public com.mapbox.maps.extension.compose.style.Transition getPositionTransition();
    method public void setAnchor(com.mapbox.maps.extension.compose.style.lights.generated.AnchorValue);
    method public void setColor(com.mapbox.maps.extension.compose.style.ColorValue);
    method public void setColorTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setIntensity(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setIntensityTransition(com.mapbox.maps.extension.compose.style.Transition);
    method public void setPosition(com.mapbox.maps.extension.compose.style.DoubleListValue);
    method public void setPositionTransition(com.mapbox.maps.extension.compose.style.Transition);
    property public final com.mapbox.maps.extension.compose.style.lights.generated.AnchorValue anchor;
    property public final com.mapbox.maps.extension.compose.style.ColorValue color;
    property public final com.mapbox.maps.extension.compose.style.Transition colorTransition;
    property public final String id;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue intensity;
    property public final com.mapbox.maps.extension.compose.style.Transition intensityTransition;
    property public final com.mapbox.maps.extension.compose.style.DoubleListValue position;
    property public final com.mapbox.maps.extension.compose.style.Transition positionTransition;
    field public static final com.mapbox.maps.extension.compose.style.lights.generated.FlatLightState.Companion Companion;
  }

  public static final class FlatLightState.Companion {
    method public androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.style.lights.generated.FlatLightState,com.mapbox.maps.extension.compose.style.lights.generated.FlatLightState.Holder> getSaver();
    property public final androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.style.lights.generated.FlatLightState,com.mapbox.maps.extension.compose.style.lights.generated.FlatLightState.Holder> Saver;
  }

  @kotlinx.parcelize.Parcelize @kotlinx.parcelize.TypeParceler public static final class FlatLightState.Holder implements android.os.Parcelable {
    ctor public FlatLightState.Holder(java.util.Map<java.lang.String,? extends com.mapbox.bindgen.Value> savedProperties);
    method public java.util.Map<java.lang.String,com.mapbox.bindgen.Value> component1();
    method public com.mapbox.maps.extension.compose.style.lights.generated.FlatLightState.Holder copy(java.util.Map<java.lang.String,? extends com.mapbox.bindgen.Value> savedProperties);
    method public java.util.Map<java.lang.String,com.mapbox.bindgen.Value> getSavedProperties();
    property public final java.util.Map<java.lang.String,com.mapbox.bindgen.Value> savedProperties;
  }

  public final class FlatLightStateKt {
    method @androidx.compose.runtime.Composable public static inline com.mapbox.maps.extension.compose.style.lights.generated.FlatLightState rememberFlatLightState(String id = remember({ 
    return generateRandomLightId("flat")
}), String? key = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.lights.generated.FlatLightState,kotlin.Unit> init = {});
  }

}

package com.mapbox.maps.extension.compose.style.projection.generated {

  @androidx.compose.runtime.Immutable public final class Projection {
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.projection.generated.Projection copy(com.mapbox.bindgen.Value value);
    method public String? getProjectionNameOrNull();
    method public com.mapbox.bindgen.Value getValue();
    property public final String? projectionNameOrNull;
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.projection.generated.Projection.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.projection.generated.Projection DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.projection.generated.Projection GLOBE;
    field public static final com.mapbox.maps.extension.compose.style.projection.generated.Projection MERCATOR;
  }

  public static final class Projection.Companion {
  }

}

package com.mapbox.maps.extension.compose.style.sources {

  @androidx.compose.runtime.Immutable public final class ClusterProperties {
    ctor public ClusterProperties(com.mapbox.bindgen.Value value);
    ctor public ClusterProperties(java.util.HashMap<java.lang.String,java.lang.Object> value);
    ctor public ClusterProperties(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.sources.ClusterProperties copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.sources.ClusterProperties.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.sources.ClusterProperties DEFAULT;
  }

  public static final class ClusterProperties.Companion {
  }

  @androidx.compose.runtime.Immutable public final class GeoJSONData {
    ctor public GeoJSONData(com.mapbox.maps.GeoJSONSourceData data);
    ctor public GeoJSONData(String value);
    ctor public GeoJSONData(com.mapbox.geojson.Feature value);
    ctor public GeoJSONData(java.util.List<com.mapbox.geojson.Feature> value);
    ctor public GeoJSONData(com.mapbox.geojson.Geometry value);
    method public com.mapbox.maps.extension.compose.style.sources.GeoJSONData copy(com.mapbox.maps.GeoJSONSourceData data);
    field public static final com.mapbox.maps.extension.compose.style.sources.GeoJSONData.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.sources.GeoJSONData DEFAULT;
  }

  public static final class GeoJSONData.Companion {
  }

  @androidx.compose.runtime.Immutable public final class PromoteIdValue {
    ctor public PromoteIdValue(com.mapbox.bindgen.Value value);
    ctor public PromoteIdValue(String propertyName, String? sourceId = null);
    ctor public PromoteIdValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.sources.PromoteIdValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.sources.PromoteIdValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.sources.PromoteIdValue DEFAULT;
  }

  public static final class PromoteIdValue.Companion {
  }

  @androidx.compose.runtime.Immutable public final class RasterLayers {
    ctor public RasterLayers(com.mapbox.bindgen.Value value);
    ctor public RasterLayers(java.util.List<com.mapbox.maps.extension.style.sources.generated.RasterArraySource.RasterDataLayer> value);
    ctor public RasterLayers(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.sources.RasterLayers copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.sources.RasterLayers.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.sources.RasterLayers DEFAULT;
  }

  public static final class RasterLayers.Companion {
  }

  public abstract class SourceState {
    method protected final com.mapbox.maps.extension.compose.style.sources.GeoJSONData getGeoJSONData();
    method protected final com.mapbox.bindgen.Value? getProperty(String name);
    method public final String getSourceId();
    method protected final void setGeoJSONData(com.mapbox.maps.extension.compose.style.sources.GeoJSONData);
    property protected final com.mapbox.maps.extension.compose.style.sources.GeoJSONData geoJSONData;
    property public final String sourceId;
  }

  @kotlinx.parcelize.Parcelize @kotlinx.parcelize.TypeParceler @kotlinx.parcelize.TypeParceler @kotlinx.parcelize.TypeParceler public static final class SourceState.Holder implements android.os.Parcelable {
    ctor public SourceState.Holder(String sourcedId, java.util.Map<java.lang.String,? extends kotlin.Pair<java.lang.Boolean,? extends com.mapbox.bindgen.Value>> savedProperties, com.mapbox.maps.extension.compose.style.sources.GeoJSONData geoJSONData);
    method public String component1();
    method public java.util.Map<java.lang.String,kotlin.Pair<java.lang.Boolean,com.mapbox.bindgen.Value>> component2();
    method public com.mapbox.maps.extension.compose.style.sources.GeoJSONData component3();
    method public com.mapbox.maps.extension.compose.style.sources.SourceState.Holder copy(String sourcedId, java.util.Map<java.lang.String,? extends kotlin.Pair<java.lang.Boolean,? extends com.mapbox.bindgen.Value>> savedProperties, com.mapbox.maps.extension.compose.style.sources.GeoJSONData geoJSONData);
    method public com.mapbox.maps.extension.compose.style.sources.GeoJSONData getGeoJSONData();
    method public java.util.Map<java.lang.String,kotlin.Pair<java.lang.Boolean,com.mapbox.bindgen.Value>> getSavedProperties();
    method public String getSourcedId();
    property public final com.mapbox.maps.extension.compose.style.sources.GeoJSONData geoJSONData;
    property public final java.util.Map<java.lang.String,kotlin.Pair<java.lang.Boolean,com.mapbox.bindgen.Value>> savedProperties;
    property public final String sourcedId;
  }

  public final class SourceStateKt {
  }

  @androidx.compose.runtime.Immutable public final class TileCacheBudget {
    ctor public TileCacheBudget(com.mapbox.bindgen.Value value);
    ctor public TileCacheBudget(com.mapbox.maps.TileCacheBudgetInMegabytes value);
    ctor public TileCacheBudget(com.mapbox.maps.TileCacheBudgetInTiles value);
    ctor public TileCacheBudget(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.sources.TileCacheBudget copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.sources.TileCacheBudget.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.sources.TileCacheBudget DEFAULT;
  }

  public static final class TileCacheBudget.Companion {
  }

}

package com.mapbox.maps.extension.compose.style.sources.generated {

  @androidx.compose.runtime.Immutable public final class EncodingValue {
    ctor public EncodingValue(com.mapbox.bindgen.Value value);
    ctor public EncodingValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.sources.generated.EncodingValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.EncodingValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.EncodingValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.EncodingValue MAPBOX;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.EncodingValue TERRARIUM;
  }

  public static final class EncodingValue.Companion {
  }

  @androidx.compose.runtime.Stable public final class GeoJsonSourceState extends com.mapbox.maps.extension.compose.style.sources.SourceState {
    ctor public GeoJsonSourceState(String sourceId = generateRandomSourceId("geojson"));
    method public com.mapbox.maps.extension.compose.style.StringValue getAttribution();
    method public com.mapbox.maps.extension.compose.style.LongValue getBuffer();
    method public com.mapbox.maps.extension.compose.style.BooleanValue getCluster();
    method public com.mapbox.maps.extension.compose.style.LongValue getClusterMaxZoom();
    method public com.mapbox.maps.extension.compose.style.LongValue getClusterMinPoints();
    method public com.mapbox.maps.extension.compose.style.sources.ClusterProperties getClusterProperties();
    method public com.mapbox.maps.extension.compose.style.LongValue getClusterRadius();
    method public com.mapbox.maps.extension.compose.style.sources.GeoJSONData getData();
    method public com.mapbox.maps.extension.compose.style.BooleanValue getGenerateId();
    method public com.mapbox.maps.extension.compose.style.BooleanValue getLineMetrics();
    method public com.mapbox.maps.extension.compose.style.LongValue getMaxZoom();
    method public com.mapbox.maps.extension.compose.style.LongValue getPrefetchZoomDelta();
    method public com.mapbox.maps.extension.compose.style.sources.PromoteIdValue getPromoteId();
    method public com.mapbox.maps.extension.compose.style.sources.TileCacheBudget getTileCacheBudget();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getTolerance();
    method public void setAttribution(com.mapbox.maps.extension.compose.style.StringValue);
    method public void setBuffer(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setCluster(com.mapbox.maps.extension.compose.style.BooleanValue);
    method public void setClusterMaxZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setClusterMinPoints(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setClusterProperties(com.mapbox.maps.extension.compose.style.sources.ClusterProperties);
    method public void setClusterRadius(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setData(com.mapbox.maps.extension.compose.style.sources.GeoJSONData);
    method public void setGenerateId(com.mapbox.maps.extension.compose.style.BooleanValue);
    method public void setLineMetrics(com.mapbox.maps.extension.compose.style.BooleanValue);
    method public void setMaxZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setPrefetchZoomDelta(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setPromoteId(com.mapbox.maps.extension.compose.style.sources.PromoteIdValue);
    method public void setTileCacheBudget(com.mapbox.maps.extension.compose.style.sources.TileCacheBudget);
    method public void setTolerance(com.mapbox.maps.extension.compose.style.DoubleValue);
    property public final com.mapbox.maps.extension.compose.style.StringValue attribution;
    property public final com.mapbox.maps.extension.compose.style.LongValue buffer;
    property public final com.mapbox.maps.extension.compose.style.BooleanValue cluster;
    property public final com.mapbox.maps.extension.compose.style.LongValue clusterMaxZoom;
    property public final com.mapbox.maps.extension.compose.style.LongValue clusterMinPoints;
    property public final com.mapbox.maps.extension.compose.style.sources.ClusterProperties clusterProperties;
    property public final com.mapbox.maps.extension.compose.style.LongValue clusterRadius;
    property public final com.mapbox.maps.extension.compose.style.sources.GeoJSONData data;
    property public final com.mapbox.maps.extension.compose.style.BooleanValue generateId;
    property public final com.mapbox.maps.extension.compose.style.BooleanValue lineMetrics;
    property public final com.mapbox.maps.extension.compose.style.LongValue maxZoom;
    property public final com.mapbox.maps.extension.compose.style.LongValue prefetchZoomDelta;
    property public final com.mapbox.maps.extension.compose.style.sources.PromoteIdValue promoteId;
    property public final com.mapbox.maps.extension.compose.style.sources.TileCacheBudget tileCacheBudget;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue tolerance;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.GeoJsonSourceState.Companion Companion;
  }

  public static final class GeoJsonSourceState.Companion {
    method public androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.style.sources.generated.GeoJsonSourceState,com.mapbox.maps.extension.compose.style.sources.SourceState.Holder> getSaver();
    property public final androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.style.sources.generated.GeoJsonSourceState,com.mapbox.maps.extension.compose.style.sources.SourceState.Holder> Saver;
  }

  public final class GeoJsonSourceStateKt {
    method @androidx.compose.runtime.Composable public static inline com.mapbox.maps.extension.compose.style.sources.generated.GeoJsonSourceState rememberGeoJsonSourceState(String? key = null, String sourceId = remember({ 
    return generateRandomSourceId("geojson")
}), kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.sources.generated.GeoJsonSourceState,kotlin.Unit> init = {});
  }

  @androidx.compose.runtime.Stable public final class ImageSourceState extends com.mapbox.maps.extension.compose.style.sources.SourceState {
    ctor public ImageSourceState(String sourceId = generateRandomSourceId("image"));
    method public com.mapbox.maps.extension.compose.style.PointListValue getCoordinates();
    method public com.mapbox.maps.extension.compose.style.LongValue getPrefetchZoomDelta();
    method public com.mapbox.maps.extension.compose.style.StringValue getUrl();
    method public void setCoordinates(com.mapbox.maps.extension.compose.style.PointListValue);
    method public void setPrefetchZoomDelta(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setUrl(com.mapbox.maps.extension.compose.style.StringValue);
    property public final com.mapbox.maps.extension.compose.style.PointListValue coordinates;
    property public final com.mapbox.maps.extension.compose.style.LongValue prefetchZoomDelta;
    property public final com.mapbox.maps.extension.compose.style.StringValue url;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.ImageSourceState.Companion Companion;
  }

  public static final class ImageSourceState.Companion {
    method public androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.style.sources.generated.ImageSourceState,com.mapbox.maps.extension.compose.style.sources.SourceState.Holder> getSaver();
    property public final androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.style.sources.generated.ImageSourceState,com.mapbox.maps.extension.compose.style.sources.SourceState.Holder> Saver;
  }

  public final class ImageSourceStateKt {
    method @androidx.compose.runtime.Composable public static inline com.mapbox.maps.extension.compose.style.sources.generated.ImageSourceState rememberImageSourceState(String? key = null, String sourceId = remember({ 
    return generateRandomSourceId("image")
}), kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.sources.generated.ImageSourceState,kotlin.Unit> init = {});
  }

  @androidx.compose.runtime.Stable @com.mapbox.maps.MapboxExperimental public final class RasterArraySourceState extends com.mapbox.maps.extension.compose.style.sources.SourceState {
    ctor public RasterArraySourceState(String sourceId = generateRandomSourceId("raster-array"));
    method public com.mapbox.maps.extension.compose.style.StringValue getAttribution();
    method public com.mapbox.maps.extension.compose.style.DoubleListValue getBounds();
    method public com.mapbox.maps.extension.compose.style.LongValue getMaxZoom();
    method public com.mapbox.maps.extension.compose.style.LongValue getMinZoom();
    method public com.mapbox.maps.extension.compose.style.sources.RasterLayers getRasterLayers();
    method public com.mapbox.maps.extension.compose.style.sources.TileCacheBudget getTileCacheBudget();
    method public com.mapbox.maps.extension.compose.style.LongValue getTileSize();
    method public com.mapbox.maps.extension.compose.style.StringListValue getTiles();
    method public com.mapbox.maps.extension.compose.style.StringValue getUrl();
    method public void setAttribution(com.mapbox.maps.extension.compose.style.StringValue);
    method public void setBounds(com.mapbox.maps.extension.compose.style.DoubleListValue);
    method public void setMaxZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setMinZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setRasterLayers(com.mapbox.maps.extension.compose.style.sources.RasterLayers);
    method public void setTileCacheBudget(com.mapbox.maps.extension.compose.style.sources.TileCacheBudget);
    method public void setTileSize(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setTiles(com.mapbox.maps.extension.compose.style.StringListValue);
    method public void setUrl(com.mapbox.maps.extension.compose.style.StringValue);
    property public final com.mapbox.maps.extension.compose.style.StringValue attribution;
    property public final com.mapbox.maps.extension.compose.style.DoubleListValue bounds;
    property public final com.mapbox.maps.extension.compose.style.LongValue maxZoom;
    property public final com.mapbox.maps.extension.compose.style.LongValue minZoom;
    property public final com.mapbox.maps.extension.compose.style.sources.RasterLayers rasterLayers;
    property public final com.mapbox.maps.extension.compose.style.sources.TileCacheBudget tileCacheBudget;
    property public final com.mapbox.maps.extension.compose.style.LongValue tileSize;
    property public final com.mapbox.maps.extension.compose.style.StringListValue tiles;
    property public final com.mapbox.maps.extension.compose.style.StringValue url;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.RasterArraySourceState.Companion Companion;
  }

  public static final class RasterArraySourceState.Companion {
    method public androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.style.sources.generated.RasterArraySourceState,com.mapbox.maps.extension.compose.style.sources.SourceState.Holder> getSaver();
    property public final androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.style.sources.generated.RasterArraySourceState,com.mapbox.maps.extension.compose.style.sources.SourceState.Holder> Saver;
  }

  public final class RasterArraySourceStateKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental public static inline com.mapbox.maps.extension.compose.style.sources.generated.RasterArraySourceState rememberRasterArraySourceState(String? key = null, String sourceId = remember({ 
    return generateRandomSourceId("raster-array")
}), kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.sources.generated.RasterArraySourceState,kotlin.Unit> init = {});
  }

  @androidx.compose.runtime.Stable public final class RasterDemSourceState extends com.mapbox.maps.extension.compose.style.sources.SourceState {
    ctor public RasterDemSourceState(String sourceId = generateRandomSourceId("raster-dem"));
    method public com.mapbox.maps.extension.compose.style.StringValue getAttribution();
    method public com.mapbox.maps.extension.compose.style.DoubleListValue getBounds();
    method public com.mapbox.maps.extension.compose.style.sources.generated.EncodingValue getEncoding();
    method public com.mapbox.maps.extension.compose.style.LongValue getMaxOverscaleFactorForParentTiles();
    method public com.mapbox.maps.extension.compose.style.LongValue getMaxZoom();
    method public com.mapbox.maps.extension.compose.style.LongValue getMinZoom();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getMinimumTileUpdateInterval();
    method public com.mapbox.maps.extension.compose.style.LongValue getPrefetchZoomDelta();
    method public com.mapbox.maps.extension.compose.style.sources.TileCacheBudget getTileCacheBudget();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getTileNetworkRequestsDelay();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getTileRequestsDelay();
    method public com.mapbox.maps.extension.compose.style.LongValue getTileSize();
    method public com.mapbox.maps.extension.compose.style.StringListValue getTiles();
    method public com.mapbox.maps.extension.compose.style.StringValue getUrl();
    method public com.mapbox.maps.extension.compose.style.BooleanValue getVolatile();
    method public void setAttribution(com.mapbox.maps.extension.compose.style.StringValue);
    method public void setBounds(com.mapbox.maps.extension.compose.style.DoubleListValue);
    method public void setEncoding(com.mapbox.maps.extension.compose.style.sources.generated.EncodingValue);
    method public void setMaxOverscaleFactorForParentTiles(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setMaxZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setMinZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setMinimumTileUpdateInterval(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setPrefetchZoomDelta(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setTileCacheBudget(com.mapbox.maps.extension.compose.style.sources.TileCacheBudget);
    method public void setTileNetworkRequestsDelay(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setTileRequestsDelay(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setTileSize(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setTiles(com.mapbox.maps.extension.compose.style.StringListValue);
    method public void setUrl(com.mapbox.maps.extension.compose.style.StringValue);
    method public void setVolatile(com.mapbox.maps.extension.compose.style.BooleanValue);
    property public final com.mapbox.maps.extension.compose.style.StringValue attribution;
    property public final com.mapbox.maps.extension.compose.style.DoubleListValue bounds;
    property public final com.mapbox.maps.extension.compose.style.sources.generated.EncodingValue encoding;
    property public final com.mapbox.maps.extension.compose.style.LongValue maxOverscaleFactorForParentTiles;
    property public final com.mapbox.maps.extension.compose.style.LongValue maxZoom;
    property public final com.mapbox.maps.extension.compose.style.LongValue minZoom;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue minimumTileUpdateInterval;
    property public final com.mapbox.maps.extension.compose.style.LongValue prefetchZoomDelta;
    property public final com.mapbox.maps.extension.compose.style.sources.TileCacheBudget tileCacheBudget;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue tileNetworkRequestsDelay;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue tileRequestsDelay;
    property public final com.mapbox.maps.extension.compose.style.LongValue tileSize;
    property public final com.mapbox.maps.extension.compose.style.StringListValue tiles;
    property public final com.mapbox.maps.extension.compose.style.StringValue url;
    property public final com.mapbox.maps.extension.compose.style.BooleanValue volatile;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.RasterDemSourceState.Companion Companion;
  }

  public static final class RasterDemSourceState.Companion {
    method public androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.style.sources.generated.RasterDemSourceState,com.mapbox.maps.extension.compose.style.sources.SourceState.Holder> getSaver();
    property public final androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.style.sources.generated.RasterDemSourceState,com.mapbox.maps.extension.compose.style.sources.SourceState.Holder> Saver;
  }

  public final class RasterDemSourceStateKt {
    method @androidx.compose.runtime.Composable public static inline com.mapbox.maps.extension.compose.style.sources.generated.RasterDemSourceState rememberRasterDemSourceState(String? key = null, String sourceId = remember({ 
    return generateRandomSourceId("raster-dem")
}), kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.sources.generated.RasterDemSourceState,kotlin.Unit> init = {});
  }

  @androidx.compose.runtime.Stable public final class RasterSourceState extends com.mapbox.maps.extension.compose.style.sources.SourceState {
    ctor public RasterSourceState(String sourceId = generateRandomSourceId("raster"));
    method public com.mapbox.maps.extension.compose.style.StringValue getAttribution();
    method public com.mapbox.maps.extension.compose.style.DoubleListValue getBounds();
    method public com.mapbox.maps.extension.compose.style.LongValue getMaxOverscaleFactorForParentTiles();
    method public com.mapbox.maps.extension.compose.style.LongValue getMaxZoom();
    method public com.mapbox.maps.extension.compose.style.LongValue getMinZoom();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getMinimumTileUpdateInterval();
    method public com.mapbox.maps.extension.compose.style.LongValue getPrefetchZoomDelta();
    method public com.mapbox.maps.extension.compose.style.sources.generated.SchemeValue getScheme();
    method public com.mapbox.maps.extension.compose.style.sources.TileCacheBudget getTileCacheBudget();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getTileNetworkRequestsDelay();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getTileRequestsDelay();
    method public com.mapbox.maps.extension.compose.style.LongValue getTileSize();
    method public com.mapbox.maps.extension.compose.style.StringListValue getTiles();
    method public com.mapbox.maps.extension.compose.style.StringValue getUrl();
    method public com.mapbox.maps.extension.compose.style.BooleanValue getVolatile();
    method public void setAttribution(com.mapbox.maps.extension.compose.style.StringValue);
    method public void setBounds(com.mapbox.maps.extension.compose.style.DoubleListValue);
    method public void setMaxOverscaleFactorForParentTiles(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setMaxZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setMinZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setMinimumTileUpdateInterval(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setPrefetchZoomDelta(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setScheme(com.mapbox.maps.extension.compose.style.sources.generated.SchemeValue);
    method public void setTileCacheBudget(com.mapbox.maps.extension.compose.style.sources.TileCacheBudget);
    method public void setTileNetworkRequestsDelay(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setTileRequestsDelay(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setTileSize(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setTiles(com.mapbox.maps.extension.compose.style.StringListValue);
    method public void setUrl(com.mapbox.maps.extension.compose.style.StringValue);
    method public void setVolatile(com.mapbox.maps.extension.compose.style.BooleanValue);
    property public final com.mapbox.maps.extension.compose.style.StringValue attribution;
    property public final com.mapbox.maps.extension.compose.style.DoubleListValue bounds;
    property public final com.mapbox.maps.extension.compose.style.LongValue maxOverscaleFactorForParentTiles;
    property public final com.mapbox.maps.extension.compose.style.LongValue maxZoom;
    property public final com.mapbox.maps.extension.compose.style.LongValue minZoom;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue minimumTileUpdateInterval;
    property public final com.mapbox.maps.extension.compose.style.LongValue prefetchZoomDelta;
    property public final com.mapbox.maps.extension.compose.style.sources.generated.SchemeValue scheme;
    property public final com.mapbox.maps.extension.compose.style.sources.TileCacheBudget tileCacheBudget;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue tileNetworkRequestsDelay;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue tileRequestsDelay;
    property public final com.mapbox.maps.extension.compose.style.LongValue tileSize;
    property public final com.mapbox.maps.extension.compose.style.StringListValue tiles;
    property public final com.mapbox.maps.extension.compose.style.StringValue url;
    property public final com.mapbox.maps.extension.compose.style.BooleanValue volatile;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.RasterSourceState.Companion Companion;
  }

  public static final class RasterSourceState.Companion {
    method public androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.style.sources.generated.RasterSourceState,com.mapbox.maps.extension.compose.style.sources.SourceState.Holder> getSaver();
    property public final androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.style.sources.generated.RasterSourceState,com.mapbox.maps.extension.compose.style.sources.SourceState.Holder> Saver;
  }

  public final class RasterSourceStateKt {
    method @androidx.compose.runtime.Composable public static inline com.mapbox.maps.extension.compose.style.sources.generated.RasterSourceState rememberRasterSourceState(String? key = null, String sourceId = remember({ 
    return generateRandomSourceId("raster")
}), kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.sources.generated.RasterSourceState,kotlin.Unit> init = {});
  }

  @androidx.compose.runtime.Immutable public final class SchemeValue {
    ctor public SchemeValue(com.mapbox.bindgen.Value value);
    ctor public SchemeValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.sources.generated.SchemeValue copy(com.mapbox.bindgen.Value value);
    method public com.mapbox.bindgen.Value getValue();
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.SchemeValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.SchemeValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.SchemeValue TMS;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.SchemeValue XYZ;
  }

  public static final class SchemeValue.Companion {
  }

  @androidx.compose.runtime.Stable public final class VectorSourceState extends com.mapbox.maps.extension.compose.style.sources.SourceState {
    ctor public VectorSourceState(String sourceId = generateRandomSourceId("vector"));
    method public com.mapbox.maps.extension.compose.style.StringValue getAttribution();
    method public com.mapbox.maps.extension.compose.style.DoubleListValue getBounds();
    method public com.mapbox.maps.extension.compose.style.LongValue getMaxOverscaleFactorForParentTiles();
    method public com.mapbox.maps.extension.compose.style.LongValue getMaxZoom();
    method public com.mapbox.maps.extension.compose.style.LongValue getMinZoom();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getMinimumTileUpdateInterval();
    method public com.mapbox.maps.extension.compose.style.LongValue getPrefetchZoomDelta();
    method public com.mapbox.maps.extension.compose.style.sources.PromoteIdValue getPromoteId();
    method public com.mapbox.maps.extension.compose.style.sources.generated.SchemeValue getScheme();
    method public com.mapbox.maps.extension.compose.style.sources.TileCacheBudget getTileCacheBudget();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getTileNetworkRequestsDelay();
    method public com.mapbox.maps.extension.compose.style.DoubleValue getTileRequestsDelay();
    method public com.mapbox.maps.extension.compose.style.StringListValue getTiles();
    method public com.mapbox.maps.extension.compose.style.StringValue getUrl();
    method public com.mapbox.maps.extension.compose.style.BooleanValue getVolatile();
    method public void setAttribution(com.mapbox.maps.extension.compose.style.StringValue);
    method public void setBounds(com.mapbox.maps.extension.compose.style.DoubleListValue);
    method public void setMaxOverscaleFactorForParentTiles(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setMaxZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setMinZoom(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setMinimumTileUpdateInterval(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setPrefetchZoomDelta(com.mapbox.maps.extension.compose.style.LongValue);
    method public void setPromoteId(com.mapbox.maps.extension.compose.style.sources.PromoteIdValue);
    method public void setScheme(com.mapbox.maps.extension.compose.style.sources.generated.SchemeValue);
    method public void setTileCacheBudget(com.mapbox.maps.extension.compose.style.sources.TileCacheBudget);
    method public void setTileNetworkRequestsDelay(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setTileRequestsDelay(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setTiles(com.mapbox.maps.extension.compose.style.StringListValue);
    method public void setUrl(com.mapbox.maps.extension.compose.style.StringValue);
    method public void setVolatile(com.mapbox.maps.extension.compose.style.BooleanValue);
    property public final com.mapbox.maps.extension.compose.style.StringValue attribution;
    property public final com.mapbox.maps.extension.compose.style.DoubleListValue bounds;
    property public final com.mapbox.maps.extension.compose.style.LongValue maxOverscaleFactorForParentTiles;
    property public final com.mapbox.maps.extension.compose.style.LongValue maxZoom;
    property public final com.mapbox.maps.extension.compose.style.LongValue minZoom;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue minimumTileUpdateInterval;
    property public final com.mapbox.maps.extension.compose.style.LongValue prefetchZoomDelta;
    property public final com.mapbox.maps.extension.compose.style.sources.PromoteIdValue promoteId;
    property public final com.mapbox.maps.extension.compose.style.sources.generated.SchemeValue scheme;
    property public final com.mapbox.maps.extension.compose.style.sources.TileCacheBudget tileCacheBudget;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue tileNetworkRequestsDelay;
    property public final com.mapbox.maps.extension.compose.style.DoubleValue tileRequestsDelay;
    property public final com.mapbox.maps.extension.compose.style.StringListValue tiles;
    property public final com.mapbox.maps.extension.compose.style.StringValue url;
    property public final com.mapbox.maps.extension.compose.style.BooleanValue volatile;
    field public static final com.mapbox.maps.extension.compose.style.sources.generated.VectorSourceState.Companion Companion;
  }

  public static final class VectorSourceState.Companion {
    method public androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.style.sources.generated.VectorSourceState,com.mapbox.maps.extension.compose.style.sources.SourceState.Holder> getSaver();
    property public final androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.style.sources.generated.VectorSourceState,com.mapbox.maps.extension.compose.style.sources.SourceState.Holder> Saver;
  }

  public final class VectorSourceStateKt {
    method @androidx.compose.runtime.Composable public static inline com.mapbox.maps.extension.compose.style.sources.generated.VectorSourceState rememberVectorSourceState(String? key = null, String sourceId = remember({ 
    return generateRandomSourceId("vector")
}), kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.sources.generated.VectorSourceState,kotlin.Unit> init = {});
  }

}

package com.mapbox.maps.extension.compose.style.standard {

  @androidx.compose.runtime.Stable public abstract class BaseStyleConfigurationState {
    ctor protected BaseStyleConfigurationState(com.mapbox.maps.extension.compose.style.BooleanValue initialShowPlaceLabels = com.mapbox.maps.extension.compose.style.BooleanValue.INITIAL, com.mapbox.maps.extension.compose.style.BooleanValue initialShowRoadLabels = com.mapbox.maps.extension.compose.style.BooleanValue.INITIAL, com.mapbox.maps.extension.compose.style.BooleanValue initialShowPointOfInterestLabels = com.mapbox.maps.extension.compose.style.BooleanValue.INITIAL, com.mapbox.maps.extension.compose.style.BooleanValue initialShowTransitLabels = com.mapbox.maps.extension.compose.style.BooleanValue.INITIAL, com.mapbox.maps.extension.compose.style.standard.LightPresetValue initialLightPreset = com.mapbox.maps.extension.compose.style.standard.LightPresetValue.INITIAL, com.mapbox.maps.extension.compose.style.StringValue initialFont = com.mapbox.maps.extension.compose.style.StringValue.INITIAL);
    method public final com.mapbox.maps.extension.compose.style.StringValue getFont();
    method public final com.mapbox.maps.extension.compose.style.standard.LightPresetValue getLightPreset();
    method public final com.mapbox.maps.extension.compose.style.BooleanValue getShowPlaceLabels();
    method public final com.mapbox.maps.extension.compose.style.BooleanValue getShowPointOfInterestLabels();
    method public final com.mapbox.maps.extension.compose.style.BooleanValue getShowRoadLabels();
    method public final com.mapbox.maps.extension.compose.style.BooleanValue getShowTransitLabels();
    method public final void setFont(com.mapbox.maps.extension.compose.style.StringValue);
    method public final void setLightPreset(com.mapbox.maps.extension.compose.style.standard.LightPresetValue);
    method public final void setShowPlaceLabels(com.mapbox.maps.extension.compose.style.BooleanValue);
    method public final void setShowPointOfInterestLabels(com.mapbox.maps.extension.compose.style.BooleanValue);
    method public final void setShowRoadLabels(com.mapbox.maps.extension.compose.style.BooleanValue);
    method public final void setShowTransitLabels(com.mapbox.maps.extension.compose.style.BooleanValue);
    property public final com.mapbox.maps.extension.compose.style.StringValue font;
    property public final com.mapbox.maps.extension.compose.style.standard.LightPresetValue lightPreset;
    property public final com.mapbox.maps.extension.compose.style.BooleanValue showPlaceLabels;
    property public final com.mapbox.maps.extension.compose.style.BooleanValue showPointOfInterestLabels;
    property public final com.mapbox.maps.extension.compose.style.BooleanValue showRoadLabels;
    property public final com.mapbox.maps.extension.compose.style.BooleanValue showTransitLabels;
  }

  @androidx.compose.runtime.Immutable public final class LightPresetValue {
    ctor public LightPresetValue(com.mapbox.bindgen.Value value);
    ctor public LightPresetValue(String value);
    ctor public LightPresetValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.standard.LightPresetValue copy(com.mapbox.bindgen.Value value);
    method public String? getPresetNameOrNull();
    method public com.mapbox.bindgen.Value getValue();
    property public final String? presetNameOrNull;
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.standard.LightPresetValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.standard.LightPresetValue DAWN;
    field public static final com.mapbox.maps.extension.compose.style.standard.LightPresetValue DAY;
    field public static final com.mapbox.maps.extension.compose.style.standard.LightPresetValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.standard.LightPresetValue DUSK;
    field public static final com.mapbox.maps.extension.compose.style.standard.LightPresetValue NIGHT;
  }

  public static final class LightPresetValue.Companion {
  }

  public final class MapboxStandardSatelliteStyleKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.style.MapboxStyleComposable public static void MapboxStandardSatelliteStyle(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.imports.StyleImportsScope,kotlin.Unit>? styleImportsContent = null, kotlin.jvm.functions.Function0<kotlin.Unit>? topSlot = null, kotlin.jvm.functions.Function0<kotlin.Unit>? middleSlot = null, kotlin.jvm.functions.Function0<kotlin.Unit>? bottomSlot = null, com.mapbox.maps.extension.compose.style.projection.generated.Projection projection = com.mapbox.maps.extension.compose.style.projection.generated.Projection.INITIAL, com.mapbox.maps.extension.compose.style.atmosphere.generated.AtmosphereState atmosphereState = remember({ 
    return <init>()
}), com.mapbox.maps.extension.compose.style.terrain.generated.TerrainState terrainState = com.mapbox.maps.extension.compose.style.terrain.generated.TerrainState.INITIAL, com.mapbox.maps.extension.compose.style.lights.LightsState lightsState = com.mapbox.maps.extension.compose.style.lights.LightsState.INITIAL, com.mapbox.maps.TransitionOptions styleTransition = remember({ 
    return transition({ 
    
    })
}), com.mapbox.maps.extension.compose.style.standard.StandardSatelliteStyleConfigurationState standardSatelliteStyleConfigurationState = remember({ 
    return <init>()
}));
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.style.MapboxStyleComposable public static void MapboxStandardSatelliteStyle(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.imports.StyleImportsScope,kotlin.Unit>? styleImportsContent = null, kotlin.jvm.functions.Function0<kotlin.Unit>? topSlot = null, kotlin.jvm.functions.Function0<kotlin.Unit>? middleSlot = null, kotlin.jvm.functions.Function0<kotlin.Unit>? bottomSlot = null, com.mapbox.maps.extension.compose.style.projection.generated.Projection projection = com.mapbox.maps.extension.compose.style.projection.generated.Projection.INITIAL, com.mapbox.maps.extension.compose.style.atmosphere.generated.AtmosphereState atmosphereState = remember({ 
    return <init>()
}), com.mapbox.maps.extension.compose.style.terrain.generated.TerrainState terrainState = com.mapbox.maps.extension.compose.style.terrain.generated.TerrainState.INITIAL, com.mapbox.maps.extension.compose.style.lights.LightsState lightsState = com.mapbox.maps.extension.compose.style.lights.LightsState.INITIAL, com.mapbox.maps.TransitionOptions styleTransition = remember({ 
    return transition({ 
    
    })
}), kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.standard.StandardSatelliteStyleConfigurationState,kotlin.Unit> init);
  }

  public final class MapboxStandardStyleKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.style.MapboxStyleComposable public static void MapboxStandardStyle(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.imports.StyleImportsScope,kotlin.Unit>? styleImportsContent = null, kotlin.jvm.functions.Function0<kotlin.Unit>? topSlot = null, kotlin.jvm.functions.Function0<kotlin.Unit>? middleSlot = null, kotlin.jvm.functions.Function0<kotlin.Unit>? bottomSlot = null, com.mapbox.maps.extension.compose.style.projection.generated.Projection projection = com.mapbox.maps.extension.compose.style.projection.generated.Projection.INITIAL, com.mapbox.maps.extension.compose.style.atmosphere.generated.AtmosphereState atmosphereState = remember({ 
    return <init>()
}), com.mapbox.maps.extension.compose.style.terrain.generated.TerrainState terrainState = com.mapbox.maps.extension.compose.style.terrain.generated.TerrainState.INITIAL, com.mapbox.maps.extension.compose.style.lights.LightsState lightsState = com.mapbox.maps.extension.compose.style.lights.LightsState.INITIAL, com.mapbox.maps.TransitionOptions styleTransition = remember({ 
    return transition({ 
    
    })
}), com.mapbox.maps.extension.compose.style.standard.StandardStyleConfigurationState standardStyleConfigurationState = remember({ 
    return <init>()
}));
    method @androidx.compose.runtime.Composable @com.mapbox.maps.extension.compose.style.MapboxStyleComposable public static void MapboxStandardStyle(kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.imports.StyleImportsScope,kotlin.Unit>? styleImportsContent = null, kotlin.jvm.functions.Function0<kotlin.Unit>? topSlot = null, kotlin.jvm.functions.Function0<kotlin.Unit>? middleSlot = null, kotlin.jvm.functions.Function0<kotlin.Unit>? bottomSlot = null, com.mapbox.maps.extension.compose.style.projection.generated.Projection projection = com.mapbox.maps.extension.compose.style.projection.generated.Projection.INITIAL, com.mapbox.maps.extension.compose.style.atmosphere.generated.AtmosphereState atmosphereState = remember({ 
    return <init>()
}), com.mapbox.maps.extension.compose.style.terrain.generated.TerrainState terrainState = com.mapbox.maps.extension.compose.style.terrain.generated.TerrainState.INITIAL, com.mapbox.maps.extension.compose.style.lights.LightsState lightsState = com.mapbox.maps.extension.compose.style.lights.LightsState.INITIAL, com.mapbox.maps.TransitionOptions styleTransition = remember({ 
    return transition({ 
    
    })
}), kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.standard.StandardStyleConfigurationState,kotlin.Unit> init);
  }

  @androidx.compose.runtime.Stable public final class StandardSatelliteStyleConfigurationState extends com.mapbox.maps.extension.compose.style.standard.BaseStyleConfigurationState {
    ctor public StandardSatelliteStyleConfigurationState();
    method public com.mapbox.maps.extension.compose.style.BooleanValue getShowPedestrianRoads();
    method public com.mapbox.maps.extension.compose.style.BooleanValue getShowRoadsAndTransit();
    method public void setShowPedestrianRoads(com.mapbox.maps.extension.compose.style.BooleanValue);
    method public void setShowRoadsAndTransit(com.mapbox.maps.extension.compose.style.BooleanValue);
    property public final com.mapbox.maps.extension.compose.style.BooleanValue showPedestrianRoads;
    property public final com.mapbox.maps.extension.compose.style.BooleanValue showRoadsAndTransit;
  }

  @androidx.compose.runtime.Stable public final class StandardStyleConfigurationState extends com.mapbox.maps.extension.compose.style.standard.BaseStyleConfigurationState {
    ctor public StandardStyleConfigurationState();
    method public com.mapbox.maps.extension.compose.style.BooleanValue getShow3dObjects();
    method public com.mapbox.maps.extension.compose.style.standard.ThemeValue getTheme();
    method public void setShow3dObjects(com.mapbox.maps.extension.compose.style.BooleanValue);
    method public void setTheme(com.mapbox.maps.extension.compose.style.standard.ThemeValue);
    property public final com.mapbox.maps.extension.compose.style.BooleanValue show3dObjects;
    property public final com.mapbox.maps.extension.compose.style.standard.ThemeValue theme;
  }

  @androidx.compose.runtime.Immutable public final class ThemeValue {
    ctor public ThemeValue(com.mapbox.bindgen.Value value);
    ctor public ThemeValue(String value);
    ctor public ThemeValue(com.mapbox.maps.extension.style.expressions.generated.Expression expression);
    method public com.mapbox.bindgen.Value component1();
    method public com.mapbox.maps.extension.compose.style.standard.ThemeValue copy(com.mapbox.bindgen.Value value);
    method public String? getPresetNameOrNull();
    method public com.mapbox.bindgen.Value getValue();
    property public final String? presetNameOrNull;
    property public final com.mapbox.bindgen.Value value;
    field public static final com.mapbox.maps.extension.compose.style.standard.ThemeValue.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.standard.ThemeValue DEFAULT;
    field public static final com.mapbox.maps.extension.compose.style.standard.ThemeValue FADED;
    field public static final com.mapbox.maps.extension.compose.style.standard.ThemeValue MONOCHROME;
  }

  public static final class ThemeValue.Companion {
  }

}

package com.mapbox.maps.extension.compose.style.terrain {

  public final class TerrainStateApplierKt {
  }

}

package com.mapbox.maps.extension.compose.style.terrain.generated {

  @androidx.compose.runtime.Stable public final class TerrainState {
    ctor public TerrainState(com.mapbox.maps.extension.compose.style.sources.generated.RasterDemSourceState rasterDemSourceState);
    method public com.mapbox.maps.extension.compose.style.DoubleValue getExaggeration();
    method public com.mapbox.maps.extension.compose.style.Transition getExaggerationTransition();
    method public void setExaggeration(com.mapbox.maps.extension.compose.style.DoubleValue);
    method public void setExaggerationTransition(com.mapbox.maps.extension.compose.style.Transition);
    property public final com.mapbox.maps.extension.compose.style.DoubleValue exaggeration;
    property public final com.mapbox.maps.extension.compose.style.Transition exaggerationTransition;
    field public static final com.mapbox.maps.extension.compose.style.terrain.generated.TerrainState.Companion Companion;
    field public static final com.mapbox.maps.extension.compose.style.terrain.generated.TerrainState DISABLED;
  }

  public static final class TerrainState.Companion {
    method public androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.style.terrain.generated.TerrainState,com.mapbox.maps.extension.compose.style.terrain.generated.TerrainState.Holder> getSaver();
    property public final androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.style.terrain.generated.TerrainState,com.mapbox.maps.extension.compose.style.terrain.generated.TerrainState.Holder> Saver;
  }

  @kotlinx.parcelize.Parcelize @kotlinx.parcelize.TypeParceler public static final class TerrainState.Holder implements android.os.Parcelable {
    method public com.mapbox.maps.extension.compose.style.sources.SourceState.Holder? component1();
    method public java.util.Map<java.lang.String,com.mapbox.bindgen.Value> component2();
    method public boolean component3();
    method public com.mapbox.maps.extension.compose.style.terrain.generated.TerrainState.Holder copy(com.mapbox.maps.extension.compose.style.sources.SourceState.Holder? rasterDemSourceStateHolder, java.util.Map<java.lang.String,? extends com.mapbox.bindgen.Value> savedProperties, boolean initial);
    method public boolean getInitial();
    method public com.mapbox.maps.extension.compose.style.sources.SourceState.Holder? getRasterDemSourceStateHolder();
    method public java.util.Map<java.lang.String,com.mapbox.bindgen.Value> getSavedProperties();
    property public final boolean initial;
    property public final com.mapbox.maps.extension.compose.style.sources.SourceState.Holder? rasterDemSourceStateHolder;
    property public final java.util.Map<java.lang.String,com.mapbox.bindgen.Value> savedProperties;
  }

  public final class TerrainStateKt {
    method @androidx.compose.runtime.Composable public static inline com.mapbox.maps.extension.compose.style.terrain.generated.TerrainState rememberTerrainState(com.mapbox.maps.extension.compose.style.sources.generated.RasterDemSourceState rasterDemSourceState, String? key = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.style.terrain.generated.TerrainState,kotlin.Unit> init = {});
  }

}

